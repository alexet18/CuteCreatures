{"ast":null,"code":"import * as i3$1 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i5 from '@angular/cdk/scrolling';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Input, EventEmitter, Host, Optional, Output, Injectable, SkipSelf, forwardRef, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport * as i4 from 'ng-zorro-antd/core/highlight';\nimport { NzHighlightModule } from 'ng-zorro-antd/core/highlight';\nimport * as i4$1 from 'ng-zorro-antd/core/no-animation';\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport * as i2 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport * as i3 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { __decorate } from 'tslib';\nimport { Subject, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport * as i1 from 'ng-zorro-antd/core/tree';\nimport { NzTreeBaseService, NzTreeBase, flattenTreeData, NzTreeHigherOrderServiceToken } from 'ng-zorro-antd/core/tree';\nexport { NzTreeNode } from 'ng-zorro-antd/core/tree';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { treeCollapseMotion } from 'ng-zorro-antd/core/animation';\nimport * as i2$1 from 'ng-zorro-antd/core/config';\nimport { WithConfig } from 'ng-zorro-antd/core/config';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nfunction NzTreeIndentComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\");\n  }\n\n  if (rf & 2) {\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"ant-tree-indent-unit\", !ctx_r0.nzSelectMode)(\"ant-select-tree-indent-unit\", ctx_r0.nzSelectMode)(\"ant-select-tree-indent-unit-start\", ctx_r0.nzSelectMode && ctx_r0.nzIsStart[i_r2])(\"ant-tree-indent-unit-start\", !ctx_r0.nzSelectMode && ctx_r0.nzIsStart[i_r2])(\"ant-select-tree-indent-unit-end\", ctx_r0.nzSelectMode && ctx_r0.nzIsEnd[i_r2])(\"ant-tree-indent-unit-end\", !ctx_r0.nzSelectMode && ctx_r0.nzIsEnd[i_r2]);\n  }\n}\n\nconst _c0 = [\"builtin\", \"\"];\n\nfunction NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"i\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"ant-select-tree-switcher-icon\", ctx_r5.nzSelectMode)(\"ant-tree-switcher-icon\", !ctx_r5.nzSelectMode);\n  }\n}\n\nconst _c1 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    origin: a1\n  };\n};\n\nfunction NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_ng_container_1_Template, 2, 4, \"ng-container\", 3);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r4.nzExpandedIcon)(\"nzStringTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c1, ctx_r4.context, ctx_r4.context.origin));\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_Template, 2, 5, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n\n    const _r2 = i0.ɵɵreference(3);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isLoading)(\"ngIfElse\", _r2);\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"nzType\", ctx_r8.isSwitcherOpen ? \"minus-square\" : \"plus-square\");\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 8);\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_1_Template, 1, 1, \"i\", 5);\n    i0.ɵɵtemplate(2, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_2_Template, 1, 0, \"i\", 6);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.isShowLineIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.isShowLineIcon);\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_Template, 3, 2, \"ng-container\", 3);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r6.nzExpandedIcon)(\"nzStringTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c1, ctx_r6.context, ctx_r6.context.origin));\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_Template, 2, 5, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n\n    const _r2 = i0.ɵɵreference(3);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.isLoading)(\"ngIfElse\", _r2);\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 9);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"nzSpin\", true);\n  }\n}\n\nfunction NzTreeNodeTitleComponent_ng_template_0_Template(rf, ctx) {}\n\nfunction NzTreeNodeTitleComponent_ng_container_1_span_1_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"nzType\", ctx_r4.icon);\n  }\n}\n\nfunction NzTreeNodeTitleComponent_ng_container_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtemplate(2, NzTreeNodeTitleComponent_ng_container_1_span_1_i_2_Template, 1, 1, \"i\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"ant-tree-icon__open\", ctx_r2.isSwitcherOpen)(\"ant-tree-icon__close\", ctx_r2.isSwitcherClose)(\"ant-tree-icon_loading\", ctx_r2.isLoading)(\"ant-select-tree-iconEle\", ctx_r2.selectMode)(\"ant-tree-iconEle\", !ctx_r2.selectMode);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"ant-select-tree-iconEle\", ctx_r2.selectMode)(\"ant-select-tree-icon__customize\", ctx_r2.selectMode)(\"ant-tree-iconEle\", !ctx_r2.selectMode)(\"ant-tree-icon__customize\", !ctx_r2.selectMode);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.icon);\n  }\n}\n\nfunction NzTreeNodeTitleComponent_ng_container_1_nz_tree_drop_indicator_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"nz-tree-drop-indicator\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"dropPosition\", ctx_r3.dragPosition)(\"level\", ctx_r3.context.level);\n  }\n}\n\nfunction NzTreeNodeTitleComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeTitleComponent_ng_container_1_span_1_Template, 3, 19, \"span\", 2);\n    i0.ɵɵelement(2, \"span\", 3);\n    i0.ɵɵpipe(3, \"nzHighlight\");\n    i0.ɵɵtemplate(4, NzTreeNodeTitleComponent_ng_container_1_nz_tree_drop_indicator_4_Template, 1, 2, \"nz-tree-drop-indicator\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.icon && ctx_r1.showIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind4(3, 3, ctx_r1.title, ctx_r1.matchedValue, \"i\", \"font-highlight\"), i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.showIndicator);\n  }\n}\n\nfunction NzTreeNodeBuiltinComponent_nz_tree_node_switcher_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"nz-tree-node-switcher\", 4);\n    i0.ɵɵlistener(\"click\", function NzTreeNodeBuiltinComponent_nz_tree_node_switcher_1_Template_nz_tree_node_switcher_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.clickExpand($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"nzShowExpand\", ctx_r0.nzShowExpand)(\"nzShowLine\", ctx_r0.nzShowLine)(\"nzExpandedIcon\", ctx_r0.nzExpandedIcon)(\"nzSelectMode\", ctx_r0.nzSelectMode)(\"context\", ctx_r0.nzTreeNode)(\"isLeaf\", ctx_r0.isLeaf)(\"isExpanded\", ctx_r0.isExpanded)(\"isLoading\", ctx_r0.isLoading);\n  }\n}\n\nfunction NzTreeNodeBuiltinComponent_nz_tree_node_checkbox_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"nz-tree-node-checkbox\", 5);\n    i0.ɵɵlistener(\"click\", function NzTreeNodeBuiltinComponent_nz_tree_node_checkbox_2_Template_nz_tree_node_checkbox_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.clickCheckBox($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"nzSelectMode\", ctx_r1.nzSelectMode)(\"isChecked\", ctx_r1.isChecked)(\"isHalfChecked\", ctx_r1.isHalfChecked)(\"isDisabled\", ctx_r1.isDisabled)(\"isDisableCheckbox\", ctx_r1.isDisableCheckbox);\n  }\n}\n\nconst _c2 = [\"nzTreeTemplate\"];\n\nfunction NzTreeComponent_cdk_virtual_scroll_viewport_6_ng_container_1_ng_template_1_Template(rf, ctx) {}\n\nconst _c3 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction NzTreeComponent_cdk_virtual_scroll_viewport_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeComponent_cdk_virtual_scroll_viewport_6_ng_container_1_ng_template_1_Template, 0, 0, \"ng-template\", 10);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const node_r5 = ctx.$implicit;\n    i0.ɵɵnextContext(2);\n\n    const _r2 = i0.ɵɵreference(9);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r2)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c3, node_r5));\n  }\n}\n\nfunction NzTreeComponent_cdk_virtual_scroll_viewport_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"cdk-virtual-scroll-viewport\", 8);\n    i0.ɵɵtemplate(1, NzTreeComponent_cdk_virtual_scroll_viewport_6_ng_container_1_Template, 2, 4, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"height\", ctx_r0.nzVirtualHeight);\n    i0.ɵɵclassProp(\"ant-select-tree-list-holder-inner\", ctx_r0.nzSelectMode)(\"ant-tree-list-holder-inner\", !ctx_r0.nzSelectMode);\n    i0.ɵɵproperty(\"itemSize\", ctx_r0.nzVirtualItemSize)(\"minBufferPx\", ctx_r0.nzVirtualMinBufferPx)(\"maxBufferPx\", ctx_r0.nzVirtualMaxBufferPx);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"cdkVirtualForOf\", ctx_r0.nzFlattenNodes)(\"cdkVirtualForTrackBy\", ctx_r0.trackByFlattenNode);\n  }\n}\n\nfunction NzTreeComponent_div_7_ng_container_1_ng_template_1_Template(rf, ctx) {}\n\nfunction NzTreeComponent_div_7_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeComponent_div_7_ng_container_1_ng_template_1_Template, 0, 0, \"ng-template\", 10);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const node_r8 = ctx.$implicit;\n    i0.ɵɵnextContext(2);\n\n    const _r2 = i0.ɵɵreference(9);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r2)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c3, node_r8));\n  }\n}\n\nfunction NzTreeComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtemplate(1, NzTreeComponent_div_7_ng_container_1_Template, 2, 4, \"ng-container\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"ant-select-tree-list-holder-inner\", ctx_r1.nzSelectMode)(\"ant-tree-list-holder-inner\", !ctx_r1.nzSelectMode);\n    i0.ɵɵproperty(\"@.disabled\", ctx_r1.beforeInit || (ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation))(\"nzNoAnimation\", ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation)(\"@treeCollapseMotion\", ctx_r1.nzFlattenNodes.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.nzFlattenNodes)(\"ngForTrackBy\", ctx_r1.trackByFlattenNode);\n  }\n}\n\nfunction NzTreeComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"nz-tree-node\", 13);\n    i0.ɵɵlistener(\"nzExpandChange\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzExpandChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.eventTriggerChanged($event);\n    })(\"nzClick\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.eventTriggerChanged($event);\n    })(\"nzDblClick\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzDblClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.eventTriggerChanged($event);\n    })(\"nzContextMenu\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzContextMenu_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.eventTriggerChanged($event);\n    })(\"nzCheckBoxChange\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzCheckBoxChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.eventTriggerChanged($event);\n    })(\"nzOnDragStart\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDragStart_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.eventTriggerChanged($event);\n    })(\"nzOnDragEnter\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDragEnter_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.eventTriggerChanged($event);\n    })(\"nzOnDragOver\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDragOver_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.eventTriggerChanged($event);\n    })(\"nzOnDragLeave\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDragLeave_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.eventTriggerChanged($event);\n    })(\"nzOnDragEnd\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDragEnd_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.eventTriggerChanged($event);\n    })(\"nzOnDrop\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDrop_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.eventTriggerChanged($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const treeNode_r10 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"icon\", treeNode_r10.icon)(\"title\", treeNode_r10.title)(\"isLoading\", treeNode_r10.isLoading)(\"isSelected\", treeNode_r10.isSelected)(\"isDisabled\", treeNode_r10.isDisabled)(\"isMatched\", treeNode_r10.isMatched)(\"isExpanded\", treeNode_r10.isExpanded)(\"isLeaf\", treeNode_r10.isLeaf)(\"isStart\", treeNode_r10.isStart)(\"isEnd\", treeNode_r10.isEnd)(\"isChecked\", treeNode_r10.isChecked)(\"isHalfChecked\", treeNode_r10.isHalfChecked)(\"isDisableCheckbox\", treeNode_r10.isDisableCheckbox)(\"isSelectable\", treeNode_r10.isSelectable)(\"canHide\", treeNode_r10.canHide)(\"nzTreeNode\", treeNode_r10)(\"nzSelectMode\", ctx_r3.nzSelectMode)(\"nzShowLine\", ctx_r3.nzShowLine)(\"nzExpandedIcon\", ctx_r3.nzExpandedIcon)(\"nzDraggable\", ctx_r3.nzDraggable)(\"nzCheckable\", ctx_r3.nzCheckable)(\"nzShowExpand\", ctx_r3.nzShowExpand)(\"nzAsyncData\", ctx_r3.nzAsyncData)(\"nzSearchValue\", ctx_r3.nzSearchValue)(\"nzHideUnMatched\", ctx_r3.nzHideUnMatched)(\"nzBeforeDrop\", ctx_r3.nzBeforeDrop)(\"nzShowIcon\", ctx_r3.nzShowIcon)(\"nzTreeTemplate\", ctx_r3.nzTreeTemplate || ctx_r3.nzTreeTemplateChild);\n  }\n}\n\nclass NzTreeDropIndicatorComponent {\n  constructor(cdr) {\n    this.cdr = cdr;\n    this.level = 1;\n    this.direction = 'ltr';\n    this.style = {};\n  }\n\n  ngOnChanges(_changes) {\n    this.renderIndicator(this.dropPosition, this.direction);\n  }\n\n  renderIndicator(dropPosition, direction = 'ltr') {\n    const offset = 4;\n    const startPosition = direction === 'ltr' ? 'left' : 'right';\n    const endPosition = direction === 'ltr' ? 'right' : 'left';\n    const style = {\n      [startPosition]: `${offset}px`,\n      [endPosition]: '0px'\n    };\n\n    switch (dropPosition) {\n      case -1:\n        style.top = `${-3}px`;\n        break;\n\n      case 1:\n        style.bottom = `${-3}px`;\n        break;\n\n      case 0:\n        // dropPosition === 0\n        style.bottom = `${-3}px`;\n        style[startPosition] = `${offset + 24}px`;\n        break;\n\n      default:\n        style.display = 'none';\n        break;\n    }\n\n    this.style = style;\n    this.cdr.markForCheck();\n  }\n\n}\n\nNzTreeDropIndicatorComponent.ɵfac = function NzTreeDropIndicatorComponent_Factory(t) {\n  return new (t || NzTreeDropIndicatorComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nNzTreeDropIndicatorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeDropIndicatorComponent,\n  selectors: [[\"nz-tree-drop-indicator\"]],\n  hostVars: 4,\n  hostBindings: function NzTreeDropIndicatorComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵstyleMap(ctx.style);\n      i0.ɵɵclassProp(\"ant-tree-drop-indicator\", true);\n    }\n  },\n  inputs: {\n    dropPosition: \"dropPosition\",\n    level: \"level\",\n    direction: \"direction\"\n  },\n  exportAs: [\"NzTreeDropIndicator\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function NzTreeDropIndicatorComponent_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeDropIndicatorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-drop-indicator',\n      exportAs: 'NzTreeDropIndicator',\n      template: ``,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[class.ant-tree-drop-indicator]': 'true',\n        '[style]': 'style'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    dropPosition: [{\n      type: Input\n    }],\n    level: [{\n      type: Input\n    }],\n    direction: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzTreeIndentComponent {\n  constructor() {\n    this.nzTreeLevel = 0;\n    this.nzIsStart = [];\n    this.nzIsEnd = [];\n    this.nzSelectMode = false;\n    this.listOfUnit = [];\n  }\n\n  ngOnChanges(changes) {\n    const {\n      nzTreeLevel\n    } = changes;\n\n    if (nzTreeLevel) {\n      this.listOfUnit = [...new Array(nzTreeLevel.currentValue || 0)];\n    }\n  }\n\n}\n\nNzTreeIndentComponent.ɵfac = function NzTreeIndentComponent_Factory(t) {\n  return new (t || NzTreeIndentComponent)();\n};\n\nNzTreeIndentComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeIndentComponent,\n  selectors: [[\"nz-tree-indent\"]],\n  hostVars: 5,\n  hostBindings: function NzTreeIndentComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-hidden\", true);\n      i0.ɵɵclassProp(\"ant-tree-indent\", !ctx.nzSelectMode)(\"ant-select-tree-indent\", ctx.nzSelectMode);\n    }\n  },\n  inputs: {\n    nzTreeLevel: \"nzTreeLevel\",\n    nzIsStart: \"nzIsStart\",\n    nzIsEnd: \"nzIsEnd\",\n    nzSelectMode: \"nzSelectMode\"\n  },\n  exportAs: [\"nzTreeIndent\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"ant-tree-indent-unit\", \"ant-select-tree-indent-unit\", \"ant-select-tree-indent-unit-start\", \"ant-tree-indent-unit-start\", \"ant-select-tree-indent-unit-end\", \"ant-tree-indent-unit-end\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function NzTreeIndentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NzTreeIndentComponent_span_0_Template, 1, 12, \"span\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.listOfUnit);\n    }\n  },\n  directives: [i7.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeIndentComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-indent',\n      exportAs: 'nzTreeIndent',\n      template: `\n    <span\n      [class.ant-tree-indent-unit]=\"!nzSelectMode\"\n      [class.ant-select-tree-indent-unit]=\"nzSelectMode\"\n      [class.ant-select-tree-indent-unit-start]=\"nzSelectMode && nzIsStart[i]\"\n      [class.ant-tree-indent-unit-start]=\"!nzSelectMode && nzIsStart[i]\"\n      [class.ant-select-tree-indent-unit-end]=\"nzSelectMode && nzIsEnd[i]\"\n      [class.ant-tree-indent-unit-end]=\"!nzSelectMode && nzIsEnd[i]\"\n      *ngFor=\"let _ of listOfUnit; let i = index\"\n    ></span>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[attr.aria-hidden]': 'true',\n        '[class.ant-tree-indent]': '!nzSelectMode',\n        '[class.ant-select-tree-indent]': 'nzSelectMode'\n      }\n    }]\n  }], null, {\n    nzTreeLevel: [{\n      type: Input\n    }],\n    nzIsStart: [{\n      type: Input\n    }],\n    nzIsEnd: [{\n      type: Input\n    }],\n    nzSelectMode: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzTreeNodeBuiltinCheckboxComponent {\n  constructor() {\n    this.nzSelectMode = false;\n  }\n\n}\n\nNzTreeNodeBuiltinCheckboxComponent.ɵfac = function NzTreeNodeBuiltinCheckboxComponent_Factory(t) {\n  return new (t || NzTreeNodeBuiltinCheckboxComponent)();\n};\n\nNzTreeNodeBuiltinCheckboxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeNodeBuiltinCheckboxComponent,\n  selectors: [[\"nz-tree-node-checkbox\", \"builtin\", \"\"]],\n  hostVars: 16,\n  hostBindings: function NzTreeNodeBuiltinCheckboxComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"ant-select-tree-checkbox\", ctx.nzSelectMode)(\"ant-select-tree-checkbox-checked\", ctx.nzSelectMode && ctx.isChecked)(\"ant-select-tree-checkbox-indeterminate\", ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-select-tree-checkbox-disabled\", ctx.nzSelectMode && (ctx.isDisabled || ctx.isDisableCheckbox))(\"ant-tree-checkbox\", !ctx.nzSelectMode)(\"ant-tree-checkbox-checked\", !ctx.nzSelectMode && ctx.isChecked)(\"ant-tree-checkbox-indeterminate\", !ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-tree-checkbox-disabled\", !ctx.nzSelectMode && (ctx.isDisabled || ctx.isDisableCheckbox));\n    }\n  },\n  inputs: {\n    nzSelectMode: \"nzSelectMode\",\n    isChecked: \"isChecked\",\n    isHalfChecked: \"isHalfChecked\",\n    isDisabled: \"isDisabled\",\n    isDisableCheckbox: \"isDisableCheckbox\"\n  },\n  attrs: _c0,\n  decls: 1,\n  vars: 4,\n  template: function NzTreeNodeBuiltinCheckboxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"span\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"ant-tree-checkbox-inner\", !ctx.nzSelectMode)(\"ant-select-tree-checkbox-inner\", ctx.nzSelectMode);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeBuiltinCheckboxComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-checkbox[builtin]',\n      template: `\n    <span [class.ant-tree-checkbox-inner]=\"!nzSelectMode\" [class.ant-select-tree-checkbox-inner]=\"nzSelectMode\"></span>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[class.ant-select-tree-checkbox]': `nzSelectMode`,\n        '[class.ant-select-tree-checkbox-checked]': `nzSelectMode && isChecked`,\n        '[class.ant-select-tree-checkbox-indeterminate]': `nzSelectMode && isHalfChecked`,\n        '[class.ant-select-tree-checkbox-disabled]': `nzSelectMode && (isDisabled || isDisableCheckbox)`,\n        '[class.ant-tree-checkbox]': `!nzSelectMode`,\n        '[class.ant-tree-checkbox-checked]': `!nzSelectMode && isChecked`,\n        '[class.ant-tree-checkbox-indeterminate]': `!nzSelectMode && isHalfChecked`,\n        '[class.ant-tree-checkbox-disabled]': `!nzSelectMode && (isDisabled || isDisableCheckbox)`\n      }\n    }]\n  }], null, {\n    nzSelectMode: [{\n      type: Input\n    }],\n    isChecked: [{\n      type: Input\n    }],\n    isHalfChecked: [{\n      type: Input\n    }],\n    isDisabled: [{\n      type: Input\n    }],\n    isDisableCheckbox: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzTreeNodeSwitcherComponent {\n  constructor() {\n    this.nzSelectMode = false;\n  }\n\n  get isShowLineIcon() {\n    return !this.isLeaf && !!this.nzShowLine;\n  }\n\n  get isShowSwitchIcon() {\n    return !this.isLeaf && !this.nzShowLine;\n  }\n\n  get isSwitcherOpen() {\n    return !!this.isExpanded && !this.isLeaf;\n  }\n\n  get isSwitcherClose() {\n    return !this.isExpanded && !this.isLeaf;\n  }\n\n}\n\nNzTreeNodeSwitcherComponent.ɵfac = function NzTreeNodeSwitcherComponent_Factory(t) {\n  return new (t || NzTreeNodeSwitcherComponent)();\n};\n\nNzTreeNodeSwitcherComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeNodeSwitcherComponent,\n  selectors: [[\"nz-tree-node-switcher\"]],\n  hostVars: 16,\n  hostBindings: function NzTreeNodeSwitcherComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"ant-select-tree-switcher\", ctx.nzSelectMode)(\"ant-select-tree-switcher-noop\", ctx.nzSelectMode && ctx.isLeaf)(\"ant-select-tree-switcher_open\", ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-select-tree-switcher_close\", ctx.nzSelectMode && ctx.isSwitcherClose)(\"ant-tree-switcher\", !ctx.nzSelectMode)(\"ant-tree-switcher-noop\", !ctx.nzSelectMode && ctx.isLeaf)(\"ant-tree-switcher_open\", !ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-tree-switcher_close\", !ctx.nzSelectMode && ctx.isSwitcherClose);\n    }\n  },\n  inputs: {\n    nzShowExpand: \"nzShowExpand\",\n    nzShowLine: \"nzShowLine\",\n    nzExpandedIcon: \"nzExpandedIcon\",\n    nzSelectMode: \"nzSelectMode\",\n    context: \"context\",\n    isLeaf: \"isLeaf\",\n    isLoading: \"isLoading\",\n    isExpanded: \"isExpanded\"\n  },\n  decls: 4,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [\"loadingTemplate\", \"\"], [4, \"ngIf\", \"ngIfElse\"], [4, \"nzStringTemplateOutlet\", \"nzStringTemplateOutletContext\"], [\"nz-icon\", \"\", \"nzType\", \"caret-down\"], [\"nz-icon\", \"\", \"class\", \"ant-tree-switcher-line-icon\", 3, \"nzType\", 4, \"ngIf\"], [\"nz-icon\", \"\", \"nzType\", \"file\", \"class\", \"ant-tree-switcher-line-icon\", 4, \"ngIf\"], [\"nz-icon\", \"\", 1, \"ant-tree-switcher-line-icon\", 3, \"nzType\"], [\"nz-icon\", \"\", \"nzType\", \"file\", 1, \"ant-tree-switcher-line-icon\"], [\"nz-icon\", \"\", \"nzType\", \"loading\", 1, \"ant-tree-switcher-loading-icon\", 3, \"nzSpin\"]],\n  template: function NzTreeNodeSwitcherComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NzTreeNodeSwitcherComponent_ng_container_0_Template, 2, 2, \"ng-container\", 0);\n      i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_Template, 2, 2, \"ng-container\", 0);\n      i0.ɵɵtemplate(2, NzTreeNodeSwitcherComponent_ng_template_2_Template, 1, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isShowSwitchIcon);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.nzShowLine);\n    }\n  },\n  directives: [i7.NgIf, i2.NzStringTemplateOutletDirective, i3.NzIconDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeSwitcherComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-switcher',\n      template: `\n    <ng-container *ngIf=\"isShowSwitchIcon\">\n      <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n        <ng-container *nzStringTemplateOutlet=\"nzExpandedIcon; context: { $implicit: context, origin: context.origin }\">\n          <i\n            nz-icon\n            nzType=\"caret-down\"\n            [class.ant-select-tree-switcher-icon]=\"nzSelectMode\"\n            [class.ant-tree-switcher-icon]=\"!nzSelectMode\"\n          ></i>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"nzShowLine\">\n      <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n        <ng-container *nzStringTemplateOutlet=\"nzExpandedIcon; context: { $implicit: context, origin: context.origin }\">\n          <i\n            *ngIf=\"isShowLineIcon\"\n            nz-icon\n            [nzType]=\"isSwitcherOpen ? 'minus-square' : 'plus-square'\"\n            class=\"ant-tree-switcher-line-icon\"\n          ></i>\n          <i *ngIf=\"!isShowLineIcon\" nz-icon nzType=\"file\" class=\"ant-tree-switcher-line-icon\"></i>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n    <ng-template #loadingTemplate>\n      <i nz-icon nzType=\"loading\" [nzSpin]=\"true\" class=\"ant-tree-switcher-loading-icon\"></i>\n    </ng-template>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[class.ant-select-tree-switcher]': 'nzSelectMode',\n        '[class.ant-select-tree-switcher-noop]': 'nzSelectMode && isLeaf',\n        '[class.ant-select-tree-switcher_open]': 'nzSelectMode && isSwitcherOpen',\n        '[class.ant-select-tree-switcher_close]': 'nzSelectMode && isSwitcherClose',\n        '[class.ant-tree-switcher]': '!nzSelectMode',\n        '[class.ant-tree-switcher-noop]': '!nzSelectMode && isLeaf',\n        '[class.ant-tree-switcher_open]': '!nzSelectMode && isSwitcherOpen',\n        '[class.ant-tree-switcher_close]': '!nzSelectMode && isSwitcherClose'\n      }\n    }]\n  }], null, {\n    nzShowExpand: [{\n      type: Input\n    }],\n    nzShowLine: [{\n      type: Input\n    }],\n    nzExpandedIcon: [{\n      type: Input\n    }],\n    nzSelectMode: [{\n      type: Input\n    }],\n    context: [{\n      type: Input\n    }],\n    isLeaf: [{\n      type: Input\n    }],\n    isLoading: [{\n      type: Input\n    }],\n    isExpanded: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzTreeNodeTitleComponent {\n  constructor(cdr) {\n    this.cdr = cdr;\n    this.treeTemplate = null;\n    this.selectMode = false; // Drag indicator\n\n    this.showIndicator = true;\n  }\n\n  get canDraggable() {\n    return this.draggable && !this.isDisabled ? true : null;\n  }\n\n  get matchedValue() {\n    return this.isMatched ? this.searchValue : '';\n  }\n\n  get isSwitcherOpen() {\n    return this.isExpanded && !this.isLeaf;\n  }\n\n  get isSwitcherClose() {\n    return !this.isExpanded && !this.isLeaf;\n  }\n\n  ngOnChanges(changes) {\n    const {\n      showIndicator,\n      dragPosition\n    } = changes;\n\n    if (showIndicator || dragPosition) {\n      this.cdr.markForCheck();\n    }\n  }\n\n}\n\nNzTreeNodeTitleComponent.ɵfac = function NzTreeNodeTitleComponent_Factory(t) {\n  return new (t || NzTreeNodeTitleComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nNzTreeNodeTitleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeNodeTitleComponent,\n  selectors: [[\"nz-tree-node-title\"]],\n  hostVars: 21,\n  hostBindings: function NzTreeNodeTitleComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"title\", ctx.title)(\"draggable\", ctx.canDraggable)(\"aria-grabbed\", ctx.canDraggable);\n      i0.ɵɵclassProp(\"draggable\", ctx.canDraggable)(\"ant-select-tree-node-content-wrapper\", ctx.selectMode)(\"ant-select-tree-node-content-wrapper-open\", ctx.selectMode && ctx.isSwitcherOpen)(\"ant-select-tree-node-content-wrapper-close\", ctx.selectMode && ctx.isSwitcherClose)(\"ant-select-tree-node-selected\", ctx.selectMode && ctx.isSelected)(\"ant-tree-node-content-wrapper\", !ctx.selectMode)(\"ant-tree-node-content-wrapper-open\", !ctx.selectMode && ctx.isSwitcherOpen)(\"ant-tree-node-content-wrapper-close\", !ctx.selectMode && ctx.isSwitcherClose)(\"ant-tree-node-selected\", !ctx.selectMode && ctx.isSelected);\n    }\n  },\n  inputs: {\n    searchValue: \"searchValue\",\n    treeTemplate: \"treeTemplate\",\n    draggable: \"draggable\",\n    showIcon: \"showIcon\",\n    selectMode: \"selectMode\",\n    context: \"context\",\n    icon: \"icon\",\n    title: \"title\",\n    isLoading: \"isLoading\",\n    isSelected: \"isSelected\",\n    isDisabled: \"isDisabled\",\n    isMatched: \"isMatched\",\n    isExpanded: \"isExpanded\",\n    isLeaf: \"isLeaf\",\n    showIndicator: \"showIndicator\",\n    dragPosition: \"dragPosition\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 6,\n  consts: [[3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngIf\"], [3, \"ant-tree-icon__open\", \"ant-tree-icon__close\", \"ant-tree-icon_loading\", \"ant-select-tree-iconEle\", \"ant-tree-iconEle\", 4, \"ngIf\"], [1, \"ant-tree-title\", 3, \"innerHTML\"], [3, \"dropPosition\", \"level\", 4, \"ngIf\"], [\"nz-icon\", \"\", 3, \"nzType\", 4, \"ngIf\"], [\"nz-icon\", \"\", 3, \"nzType\"], [3, \"dropPosition\", \"level\"]],\n  template: function NzTreeNodeTitleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NzTreeNodeTitleComponent_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      i0.ɵɵtemplate(1, NzTreeNodeTitleComponent_ng_container_1_Template, 5, 8, \"ng-container\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.treeTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(3, _c1, ctx.context, ctx.context.origin));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.treeTemplate);\n    }\n  },\n  directives: [NzTreeDropIndicatorComponent, i7.NgTemplateOutlet, i7.NgIf, i3.NzIconDirective],\n  pipes: [i4.NzHighlightPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeTitleComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-title',\n      template: `\n    <ng-template\n      [ngTemplateOutlet]=\"treeTemplate\"\n      [ngTemplateOutletContext]=\"{ $implicit: context, origin: context.origin }\"\n    ></ng-template>\n    <ng-container *ngIf=\"!treeTemplate\">\n      <span\n        *ngIf=\"icon && showIcon\"\n        [class.ant-tree-icon__open]=\"isSwitcherOpen\"\n        [class.ant-tree-icon__close]=\"isSwitcherClose\"\n        [class.ant-tree-icon_loading]=\"isLoading\"\n        [class.ant-select-tree-iconEle]=\"selectMode\"\n        [class.ant-tree-iconEle]=\"!selectMode\"\n      >\n        <span\n          [class.ant-select-tree-iconEle]=\"selectMode\"\n          [class.ant-select-tree-icon__customize]=\"selectMode\"\n          [class.ant-tree-iconEle]=\"!selectMode\"\n          [class.ant-tree-icon__customize]=\"!selectMode\"\n        >\n          <i nz-icon *ngIf=\"icon\" [nzType]=\"icon\"></i>\n        </span>\n      </span>\n      <span class=\"ant-tree-title\" [innerHTML]=\"title | nzHighlight: matchedValue:'i':'font-highlight'\"></span>\n      <nz-tree-drop-indicator\n        *ngIf=\"showIndicator\"\n        [dropPosition]=\"dragPosition\"\n        [level]=\"context.level\"\n      ></nz-tree-drop-indicator>\n    </ng-container>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[attr.title]': 'title',\n        '[attr.draggable]': 'canDraggable',\n        '[attr.aria-grabbed]': 'canDraggable',\n        '[class.draggable]': 'canDraggable',\n        '[class.ant-select-tree-node-content-wrapper]': `selectMode`,\n        '[class.ant-select-tree-node-content-wrapper-open]': `selectMode && isSwitcherOpen`,\n        '[class.ant-select-tree-node-content-wrapper-close]': `selectMode && isSwitcherClose`,\n        '[class.ant-select-tree-node-selected]': `selectMode && isSelected`,\n        '[class.ant-tree-node-content-wrapper]': `!selectMode`,\n        '[class.ant-tree-node-content-wrapper-open]': `!selectMode && isSwitcherOpen`,\n        '[class.ant-tree-node-content-wrapper-close]': `!selectMode && isSwitcherClose`,\n        '[class.ant-tree-node-selected]': `!selectMode && isSelected`\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    searchValue: [{\n      type: Input\n    }],\n    treeTemplate: [{\n      type: Input\n    }],\n    draggable: [{\n      type: Input\n    }],\n    showIcon: [{\n      type: Input\n    }],\n    selectMode: [{\n      type: Input\n    }],\n    context: [{\n      type: Input\n    }],\n    icon: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    isLoading: [{\n      type: Input\n    }],\n    isSelected: [{\n      type: Input\n    }],\n    isDisabled: [{\n      type: Input\n    }],\n    isMatched: [{\n      type: Input\n    }],\n    isExpanded: [{\n      type: Input\n    }],\n    isLeaf: [{\n      type: Input\n    }],\n    showIndicator: [{\n      type: Input\n    }],\n    dragPosition: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NzTreeNodeBuiltinComponent {\n  constructor(nzTreeService, ngZone, renderer, elementRef, cdr, noAnimation) {\n    this.nzTreeService = nzTreeService;\n    this.ngZone = ngZone;\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n    this.cdr = cdr;\n    this.noAnimation = noAnimation;\n    /**\n     * for global property\n     */\n\n    this.icon = '';\n    this.title = '';\n    this.isLoading = false;\n    this.isSelected = false;\n    this.isDisabled = false;\n    this.isMatched = false;\n    this.isStart = [];\n    this.isEnd = [];\n    this.nzHideUnMatched = false;\n    this.nzNoAnimation = false;\n    this.nzSelectMode = false;\n    this.nzShowIcon = false;\n    this.nzTreeTemplate = null;\n    this.nzSearchValue = '';\n    this.nzDraggable = false;\n    this.nzClick = new EventEmitter();\n    this.nzDblClick = new EventEmitter();\n    this.nzContextMenu = new EventEmitter();\n    this.nzCheckBoxChange = new EventEmitter();\n    this.nzExpandChange = new EventEmitter();\n    this.nzOnDragStart = new EventEmitter();\n    this.nzOnDragEnter = new EventEmitter();\n    this.nzOnDragOver = new EventEmitter();\n    this.nzOnDragLeave = new EventEmitter();\n    this.nzOnDrop = new EventEmitter();\n    this.nzOnDragEnd = new EventEmitter();\n    /**\n     * drag var\n     */\n\n    this.destroy$ = new Subject();\n    this.dragPos = 2;\n    this.dragPosClass = {\n      0: 'drag-over',\n      1: 'drag-over-gap-bottom',\n      '-1': 'drag-over-gap-top'\n    };\n    this.draggingKey = null;\n    this.showIndicator = false;\n  }\n  /**\n   * default set\n   */\n\n\n  get displayStyle() {\n    // to hide unmatched nodes\n    return this.nzSearchValue && this.nzHideUnMatched && !this.isMatched && !this.isExpanded && this.canHide ? 'none' : '';\n  }\n\n  get isSwitcherOpen() {\n    return this.isExpanded && !this.isLeaf;\n  }\n\n  get isSwitcherClose() {\n    return !this.isExpanded && !this.isLeaf;\n  }\n  /**\n   * collapse node\n   *\n   * @param event\n   */\n\n\n  clickExpand(event) {\n    event.preventDefault();\n\n    if (!this.isLoading && !this.isLeaf) {\n      // set async state\n      if (this.nzAsyncData && this.nzTreeNode.children.length === 0 && !this.isExpanded) {\n        this.nzTreeNode.isLoading = true;\n      }\n\n      this.nzTreeNode.setExpanded(!this.isExpanded);\n    }\n\n    this.nzTreeService.setExpandedNodeList(this.nzTreeNode);\n    const eventNext = this.nzTreeService.formatEvent('expand', this.nzTreeNode, event);\n    this.nzExpandChange.emit(eventNext);\n  }\n\n  clickSelect(event) {\n    event.preventDefault();\n\n    if (this.isSelectable && !this.isDisabled) {\n      this.nzTreeNode.isSelected = !this.nzTreeNode.isSelected;\n    }\n\n    this.nzTreeService.setSelectedNodeList(this.nzTreeNode);\n    const eventNext = this.nzTreeService.formatEvent('click', this.nzTreeNode, event);\n    this.nzClick.emit(eventNext);\n  }\n\n  dblClick(event) {\n    event.preventDefault();\n    const eventNext = this.nzTreeService.formatEvent('dblclick', this.nzTreeNode, event);\n    this.nzDblClick.emit(eventNext);\n  }\n\n  contextMenu(event) {\n    event.preventDefault();\n    const eventNext = this.nzTreeService.formatEvent('contextmenu', this.nzTreeNode, event);\n    this.nzContextMenu.emit(eventNext);\n  }\n  /**\n   * check node\n   *\n   * @param event\n   */\n\n\n  clickCheckBox(event) {\n    event.preventDefault(); // return if node is disabled\n\n    if (this.isDisabled || this.isDisableCheckbox) {\n      return;\n    }\n\n    this.nzTreeNode.isChecked = !this.nzTreeNode.isChecked;\n    this.nzTreeNode.isHalfChecked = false;\n    this.nzTreeService.setCheckedNodeList(this.nzTreeNode);\n    const eventNext = this.nzTreeService.formatEvent('check', this.nzTreeNode, event);\n    this.nzCheckBoxChange.emit(eventNext);\n  }\n\n  clearDragClass() {\n    const dragClass = ['drag-over-gap-top', 'drag-over-gap-bottom', 'drag-over', 'drop-target'];\n    dragClass.forEach(e => {\n      this.renderer.removeClass(this.elementRef.nativeElement, e);\n    });\n  }\n  /**\n   * drag event\n   *\n   * @param e\n   */\n\n\n  handleDragStart(e) {\n    try {\n      // ie throw error\n      // firefox-need-it\n      e.dataTransfer.setData('text/plain', this.nzTreeNode.key);\n    } catch (error) {// empty\n    }\n\n    this.nzTreeService.setSelectedNode(this.nzTreeNode);\n    this.draggingKey = this.nzTreeNode.key;\n    const eventNext = this.nzTreeService.formatEvent('dragstart', this.nzTreeNode, e);\n    this.nzOnDragStart.emit(eventNext);\n  }\n\n  handleDragEnter(e) {\n    var _a;\n\n    e.preventDefault(); // reset position\n\n    this.showIndicator = this.nzTreeNode.key !== ((_a = this.nzTreeService.getSelectedNode()) === null || _a === void 0 ? void 0 : _a.key);\n    this.renderIndicator(2);\n    this.ngZone.run(() => {\n      const eventNext = this.nzTreeService.formatEvent('dragenter', this.nzTreeNode, e);\n      this.nzOnDragEnter.emit(eventNext);\n    });\n  }\n\n  handleDragOver(e) {\n    e.preventDefault();\n    const dropPosition = this.nzTreeService.calcDropPosition(e);\n\n    if (this.dragPos !== dropPosition) {\n      this.clearDragClass();\n      this.renderIndicator(dropPosition); // leaf node will pass\n\n      if (!(this.dragPos === 0 && this.isLeaf)) {\n        this.renderer.addClass(this.elementRef.nativeElement, this.dragPosClass[this.dragPos]);\n        this.renderer.addClass(this.elementRef.nativeElement, 'drop-target');\n      }\n    }\n\n    const eventNext = this.nzTreeService.formatEvent('dragover', this.nzTreeNode, e);\n    this.nzOnDragOver.emit(eventNext);\n  }\n\n  handleDragLeave(e) {\n    e.preventDefault();\n    this.renderIndicator(2);\n    this.clearDragClass();\n    const eventNext = this.nzTreeService.formatEvent('dragleave', this.nzTreeNode, e);\n    this.nzOnDragLeave.emit(eventNext);\n  }\n\n  handleDragDrop(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.ngZone.run(() => {\n      this.showIndicator = false;\n      this.clearDragClass();\n      const node = this.nzTreeService.getSelectedNode();\n\n      if (!node || node && node.key === this.nzTreeNode.key || this.dragPos === 0 && this.isLeaf) {\n        return;\n      } // pass if node is leafNo\n\n\n      const dropEvent = this.nzTreeService.formatEvent('drop', this.nzTreeNode, e);\n      const dragEndEvent = this.nzTreeService.formatEvent('dragend', this.nzTreeNode, e);\n\n      if (this.nzBeforeDrop) {\n        this.nzBeforeDrop({\n          dragNode: this.nzTreeService.getSelectedNode(),\n          node: this.nzTreeNode,\n          pos: this.dragPos\n        }).subscribe(canDrop => {\n          if (canDrop) {\n            this.nzTreeService.dropAndApply(this.nzTreeNode, this.dragPos);\n          }\n\n          this.nzOnDrop.emit(dropEvent);\n          this.nzOnDragEnd.emit(dragEndEvent);\n        });\n      } else if (this.nzTreeNode) {\n        this.nzTreeService.dropAndApply(this.nzTreeNode, this.dragPos);\n        this.nzOnDrop.emit(dropEvent);\n      }\n    });\n  }\n\n  handleDragEnd(e) {\n    e.preventDefault();\n    this.ngZone.run(() => {\n      // if user do not custom beforeDrop\n      if (!this.nzBeforeDrop) {\n        // clear dragging state\n        this.draggingKey = null;\n        const eventNext = this.nzTreeService.formatEvent('dragend', this.nzTreeNode, e);\n        this.nzOnDragEnd.emit(eventNext);\n      }\n    });\n  }\n  /**\n   * Listening to dragging events.\n   */\n\n\n  handDragEvent() {\n    this.ngZone.runOutsideAngular(() => {\n      if (this.nzDraggable) {\n        const nativeElement = this.elementRef.nativeElement;\n        this.destroy$ = new Subject();\n        fromEvent(nativeElement, 'dragstart').pipe(takeUntil(this.destroy$)).subscribe(e => this.handleDragStart(e));\n        fromEvent(nativeElement, 'dragenter').pipe(takeUntil(this.destroy$)).subscribe(e => this.handleDragEnter(e));\n        fromEvent(nativeElement, 'dragover').pipe(takeUntil(this.destroy$)).subscribe(e => this.handleDragOver(e));\n        fromEvent(nativeElement, 'dragleave').pipe(takeUntil(this.destroy$)).subscribe(e => this.handleDragLeave(e));\n        fromEvent(nativeElement, 'drop').pipe(takeUntil(this.destroy$)).subscribe(e => this.handleDragDrop(e));\n        fromEvent(nativeElement, 'dragend').pipe(takeUntil(this.destroy$)).subscribe(e => this.handleDragEnd(e));\n      } else {\n        this.destroy$.next();\n        this.destroy$.complete();\n      }\n    });\n  }\n\n  markForCheck() {\n    this.cdr.markForCheck();\n  }\n\n  ngOnInit() {\n    this.nzTreeNode.component = this;\n    this.ngZone.runOutsideAngular(() => {\n      fromEvent(this.elementRef.nativeElement, 'mousedown').pipe(takeUntil(this.destroy$)).subscribe(event => {\n        if (this.nzSelectMode) {\n          event.preventDefault();\n        }\n      });\n    });\n  }\n\n  ngOnChanges(changes) {\n    const {\n      nzDraggable\n    } = changes;\n\n    if (nzDraggable) {\n      this.handDragEvent();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  renderIndicator(dropPosition) {\n    this.ngZone.run(() => {\n      var _a;\n\n      this.showIndicator = dropPosition !== 2;\n\n      if (this.nzTreeNode.key === ((_a = this.nzTreeService.getSelectedNode()) === null || _a === void 0 ? void 0 : _a.key) || dropPosition === 0 && this.isLeaf) {\n        return;\n      }\n\n      this.dragPos = dropPosition;\n      this.cdr.markForCheck();\n    });\n  }\n\n}\n\nNzTreeNodeBuiltinComponent.ɵfac = function NzTreeNodeBuiltinComponent_Factory(t) {\n  return new (t || NzTreeNodeBuiltinComponent)(i0.ɵɵdirectiveInject(i1.NzTreeBaseService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4$1.NzNoAnimationDirective, 9));\n};\n\nNzTreeNodeBuiltinComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeNodeBuiltinComponent,\n  selectors: [[\"nz-tree-node\", \"builtin\", \"\"]],\n  hostVars: 36,\n  hostBindings: function NzTreeNodeBuiltinComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n      i0.ɵɵclassProp(\"ant-select-tree-treenode\", ctx.nzSelectMode)(\"ant-select-tree-treenode-disabled\", ctx.nzSelectMode && ctx.isDisabled)(\"ant-select-tree-treenode-switcher-open\", ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-select-tree-treenode-switcher-close\", ctx.nzSelectMode && ctx.isSwitcherClose)(\"ant-select-tree-treenode-checkbox-checked\", ctx.nzSelectMode && ctx.isChecked)(\"ant-select-tree-treenode-checkbox-indeterminate\", ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-select-tree-treenode-selected\", ctx.nzSelectMode && ctx.isSelected)(\"ant-select-tree-treenode-loading\", ctx.nzSelectMode && ctx.isLoading)(\"ant-tree-treenode\", !ctx.nzSelectMode)(\"ant-tree-treenode-disabled\", !ctx.nzSelectMode && ctx.isDisabled)(\"ant-tree-treenode-switcher-open\", !ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-tree-treenode-switcher-close\", !ctx.nzSelectMode && ctx.isSwitcherClose)(\"ant-tree-treenode-checkbox-checked\", !ctx.nzSelectMode && ctx.isChecked)(\"ant-tree-treenode-checkbox-indeterminate\", !ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-tree-treenode-selected\", !ctx.nzSelectMode && ctx.isSelected)(\"ant-tree-treenode-loading\", !ctx.nzSelectMode && ctx.isLoading)(\"dragging\", ctx.draggingKey === ctx.nzTreeNode.key);\n    }\n  },\n  inputs: {\n    icon: \"icon\",\n    title: \"title\",\n    isLoading: \"isLoading\",\n    isSelected: \"isSelected\",\n    isDisabled: \"isDisabled\",\n    isMatched: \"isMatched\",\n    isExpanded: \"isExpanded\",\n    isLeaf: \"isLeaf\",\n    isChecked: \"isChecked\",\n    isHalfChecked: \"isHalfChecked\",\n    isDisableCheckbox: \"isDisableCheckbox\",\n    isSelectable: \"isSelectable\",\n    canHide: \"canHide\",\n    isStart: \"isStart\",\n    isEnd: \"isEnd\",\n    nzTreeNode: \"nzTreeNode\",\n    nzShowLine: \"nzShowLine\",\n    nzShowExpand: \"nzShowExpand\",\n    nzCheckable: \"nzCheckable\",\n    nzAsyncData: \"nzAsyncData\",\n    nzHideUnMatched: \"nzHideUnMatched\",\n    nzNoAnimation: \"nzNoAnimation\",\n    nzSelectMode: \"nzSelectMode\",\n    nzShowIcon: \"nzShowIcon\",\n    nzExpandedIcon: \"nzExpandedIcon\",\n    nzTreeTemplate: \"nzTreeTemplate\",\n    nzBeforeDrop: \"nzBeforeDrop\",\n    nzSearchValue: \"nzSearchValue\",\n    nzDraggable: \"nzDraggable\"\n  },\n  outputs: {\n    nzClick: \"nzClick\",\n    nzDblClick: \"nzDblClick\",\n    nzContextMenu: \"nzContextMenu\",\n    nzCheckBoxChange: \"nzCheckBoxChange\",\n    nzExpandChange: \"nzExpandChange\",\n    nzOnDragStart: \"nzOnDragStart\",\n    nzOnDragEnter: \"nzOnDragEnter\",\n    nzOnDragOver: \"nzOnDragOver\",\n    nzOnDragLeave: \"nzOnDragLeave\",\n    nzOnDrop: \"nzOnDrop\",\n    nzOnDragEnd: \"nzOnDragEnd\"\n  },\n  exportAs: [\"nzTreeBuiltinNode\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c0,\n  decls: 4,\n  vars: 22,\n  consts: [[3, \"nzTreeLevel\", \"nzSelectMode\", \"nzIsStart\", \"nzIsEnd\"], [3, \"nzShowExpand\", \"nzShowLine\", \"nzExpandedIcon\", \"nzSelectMode\", \"context\", \"isLeaf\", \"isExpanded\", \"isLoading\", \"click\", 4, \"ngIf\"], [\"builtin\", \"\", 3, \"nzSelectMode\", \"isChecked\", \"isHalfChecked\", \"isDisabled\", \"isDisableCheckbox\", \"click\", 4, \"ngIf\"], [3, \"icon\", \"title\", \"isLoading\", \"isSelected\", \"isDisabled\", \"isMatched\", \"isExpanded\", \"isLeaf\", \"searchValue\", \"treeTemplate\", \"draggable\", \"showIcon\", \"selectMode\", \"context\", \"showIndicator\", \"dragPosition\", \"dblclick\", \"click\", \"contextmenu\"], [3, \"nzShowExpand\", \"nzShowLine\", \"nzExpandedIcon\", \"nzSelectMode\", \"context\", \"isLeaf\", \"isExpanded\", \"isLoading\", \"click\"], [\"builtin\", \"\", 3, \"nzSelectMode\", \"isChecked\", \"isHalfChecked\", \"isDisabled\", \"isDisableCheckbox\", \"click\"]],\n  template: function NzTreeNodeBuiltinComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"nz-tree-indent\", 0);\n      i0.ɵɵtemplate(1, NzTreeNodeBuiltinComponent_nz_tree_node_switcher_1_Template, 1, 8, \"nz-tree-node-switcher\", 1);\n      i0.ɵɵtemplate(2, NzTreeNodeBuiltinComponent_nz_tree_node_checkbox_2_Template, 1, 5, \"nz-tree-node-checkbox\", 2);\n      i0.ɵɵelementStart(3, \"nz-tree-node-title\", 3);\n      i0.ɵɵlistener(\"dblclick\", function NzTreeNodeBuiltinComponent_Template_nz_tree_node_title_dblclick_3_listener($event) {\n        return ctx.dblClick($event);\n      })(\"click\", function NzTreeNodeBuiltinComponent_Template_nz_tree_node_title_click_3_listener($event) {\n        return ctx.clickSelect($event);\n      })(\"contextmenu\", function NzTreeNodeBuiltinComponent_Template_nz_tree_node_title_contextmenu_3_listener($event) {\n        return ctx.contextMenu($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"nzTreeLevel\", ctx.nzTreeNode.level)(\"nzSelectMode\", ctx.nzSelectMode)(\"nzIsStart\", ctx.isStart)(\"nzIsEnd\", ctx.isEnd);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.nzShowExpand);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.nzCheckable);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"icon\", ctx.icon)(\"title\", ctx.title)(\"isLoading\", ctx.isLoading)(\"isSelected\", ctx.isSelected)(\"isDisabled\", ctx.isDisabled)(\"isMatched\", ctx.isMatched)(\"isExpanded\", ctx.isExpanded)(\"isLeaf\", ctx.isLeaf)(\"searchValue\", ctx.nzSearchValue)(\"treeTemplate\", ctx.nzTreeTemplate)(\"draggable\", ctx.nzDraggable)(\"showIcon\", ctx.nzShowIcon)(\"selectMode\", ctx.nzSelectMode)(\"context\", ctx.nzTreeNode)(\"showIndicator\", ctx.showIndicator)(\"dragPosition\", ctx.dragPos);\n    }\n  },\n  directives: [NzTreeIndentComponent, NzTreeNodeSwitcherComponent, NzTreeNodeBuiltinCheckboxComponent, NzTreeNodeTitleComponent, i7.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n__decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzShowLine\", void 0);\n\n__decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzShowExpand\", void 0);\n\n__decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzCheckable\", void 0);\n\n__decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzAsyncData\", void 0);\n\n__decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzHideUnMatched\", void 0);\n\n__decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzNoAnimation\", void 0);\n\n__decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzSelectMode\", void 0);\n\n__decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzShowIcon\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeBuiltinComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node[builtin]',\n      exportAs: 'nzTreeBuiltinNode',\n      template: `\n    <nz-tree-indent\n      [nzTreeLevel]=\"nzTreeNode.level\"\n      [nzSelectMode]=\"nzSelectMode\"\n      [nzIsStart]=\"isStart\"\n      [nzIsEnd]=\"isEnd\"\n    ></nz-tree-indent>\n    <nz-tree-node-switcher\n      *ngIf=\"nzShowExpand\"\n      [nzShowExpand]=\"nzShowExpand\"\n      [nzShowLine]=\"nzShowLine\"\n      [nzExpandedIcon]=\"nzExpandedIcon\"\n      [nzSelectMode]=\"nzSelectMode\"\n      [context]=\"nzTreeNode\"\n      [isLeaf]=\"isLeaf\"\n      [isExpanded]=\"isExpanded\"\n      [isLoading]=\"isLoading\"\n      (click)=\"clickExpand($event)\"\n    ></nz-tree-node-switcher>\n    <nz-tree-node-checkbox\n      builtin\n      *ngIf=\"nzCheckable\"\n      (click)=\"clickCheckBox($event)\"\n      [nzSelectMode]=\"nzSelectMode\"\n      [isChecked]=\"isChecked\"\n      [isHalfChecked]=\"isHalfChecked\"\n      [isDisabled]=\"isDisabled\"\n      [isDisableCheckbox]=\"isDisableCheckbox\"\n    ></nz-tree-node-checkbox>\n    <nz-tree-node-title\n      [icon]=\"icon\"\n      [title]=\"title\"\n      [isLoading]=\"isLoading\"\n      [isSelected]=\"isSelected\"\n      [isDisabled]=\"isDisabled\"\n      [isMatched]=\"isMatched\"\n      [isExpanded]=\"isExpanded\"\n      [isLeaf]=\"isLeaf\"\n      [searchValue]=\"nzSearchValue\"\n      [treeTemplate]=\"nzTreeTemplate\"\n      [draggable]=\"nzDraggable\"\n      [showIcon]=\"nzShowIcon\"\n      [selectMode]=\"nzSelectMode\"\n      [context]=\"nzTreeNode\"\n      [showIndicator]=\"showIndicator\"\n      [dragPosition]=\"dragPos\"\n      (dblclick)=\"dblClick($event)\"\n      (click)=\"clickSelect($event)\"\n      (contextmenu)=\"contextMenu($event)\"\n    ></nz-tree-node-title>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        '[class.ant-select-tree-treenode]': `nzSelectMode`,\n        '[class.ant-select-tree-treenode-disabled]': `nzSelectMode && isDisabled`,\n        '[class.ant-select-tree-treenode-switcher-open]': `nzSelectMode && isSwitcherOpen`,\n        '[class.ant-select-tree-treenode-switcher-close]': `nzSelectMode && isSwitcherClose`,\n        '[class.ant-select-tree-treenode-checkbox-checked]': `nzSelectMode && isChecked`,\n        '[class.ant-select-tree-treenode-checkbox-indeterminate]': `nzSelectMode && isHalfChecked`,\n        '[class.ant-select-tree-treenode-selected]': `nzSelectMode && isSelected`,\n        '[class.ant-select-tree-treenode-loading]': `nzSelectMode && isLoading`,\n        '[class.ant-tree-treenode]': `!nzSelectMode`,\n        '[class.ant-tree-treenode-disabled]': `!nzSelectMode && isDisabled`,\n        '[class.ant-tree-treenode-switcher-open]': `!nzSelectMode && isSwitcherOpen`,\n        '[class.ant-tree-treenode-switcher-close]': `!nzSelectMode && isSwitcherClose`,\n        '[class.ant-tree-treenode-checkbox-checked]': `!nzSelectMode && isChecked`,\n        '[class.ant-tree-treenode-checkbox-indeterminate]': `!nzSelectMode && isHalfChecked`,\n        '[class.ant-tree-treenode-selected]': `!nzSelectMode && isSelected`,\n        '[class.ant-tree-treenode-loading]': `!nzSelectMode && isLoading`,\n        '[class.dragging]': `draggingKey === nzTreeNode.key`,\n        '[style.display]': 'displayStyle'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i1.NzTreeBaseService\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i4$1.NzNoAnimationDirective,\n      decorators: [{\n        type: Host\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    icon: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    isLoading: [{\n      type: Input\n    }],\n    isSelected: [{\n      type: Input\n    }],\n    isDisabled: [{\n      type: Input\n    }],\n    isMatched: [{\n      type: Input\n    }],\n    isExpanded: [{\n      type: Input\n    }],\n    isLeaf: [{\n      type: Input\n    }],\n    isChecked: [{\n      type: Input\n    }],\n    isHalfChecked: [{\n      type: Input\n    }],\n    isDisableCheckbox: [{\n      type: Input\n    }],\n    isSelectable: [{\n      type: Input\n    }],\n    canHide: [{\n      type: Input\n    }],\n    isStart: [{\n      type: Input\n    }],\n    isEnd: [{\n      type: Input\n    }],\n    nzTreeNode: [{\n      type: Input\n    }],\n    nzShowLine: [{\n      type: Input\n    }],\n    nzShowExpand: [{\n      type: Input\n    }],\n    nzCheckable: [{\n      type: Input\n    }],\n    nzAsyncData: [{\n      type: Input\n    }],\n    nzHideUnMatched: [{\n      type: Input\n    }],\n    nzNoAnimation: [{\n      type: Input\n    }],\n    nzSelectMode: [{\n      type: Input\n    }],\n    nzShowIcon: [{\n      type: Input\n    }],\n    nzExpandedIcon: [{\n      type: Input\n    }],\n    nzTreeTemplate: [{\n      type: Input\n    }],\n    nzBeforeDrop: [{\n      type: Input\n    }],\n    nzSearchValue: [{\n      type: Input\n    }],\n    nzDraggable: [{\n      type: Input\n    }],\n    nzClick: [{\n      type: Output\n    }],\n    nzDblClick: [{\n      type: Output\n    }],\n    nzContextMenu: [{\n      type: Output\n    }],\n    nzCheckBoxChange: [{\n      type: Output\n    }],\n    nzExpandChange: [{\n      type: Output\n    }],\n    nzOnDragStart: [{\n      type: Output\n    }],\n    nzOnDragEnter: [{\n      type: Output\n    }],\n    nzOnDragOver: [{\n      type: Output\n    }],\n    nzOnDragLeave: [{\n      type: Output\n    }],\n    nzOnDrop: [{\n      type: Output\n    }],\n    nzOnDragEnd: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzTreeService extends NzTreeBaseService {\n  constructor() {\n    super();\n  }\n\n}\n\nNzTreeService.ɵfac = function NzTreeService_Factory(t) {\n  return new (t || NzTreeService)();\n};\n\nNzTreeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NzTreeService,\n  factory: NzTreeService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction NzTreeServiceFactory(higherOrderService, treeService) {\n  return higherOrderService ? higherOrderService : treeService;\n}\n\nconst NZ_CONFIG_MODULE_NAME = 'tree';\n\nclass NzTreeComponent extends NzTreeBase {\n  // Handle emit event end\n  constructor(nzTreeService, nzConfigService, cdr, directionality, noAnimation) {\n    super(nzTreeService);\n    this.nzConfigService = nzConfigService;\n    this.cdr = cdr;\n    this.directionality = directionality;\n    this.noAnimation = noAnimation;\n    this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n    this.nzShowIcon = false;\n    this.nzHideUnMatched = false;\n    this.nzBlockNode = false;\n    this.nzExpandAll = false;\n    this.nzSelectMode = false;\n    this.nzCheckStrictly = false;\n    this.nzShowExpand = true;\n    this.nzShowLine = false;\n    this.nzCheckable = false;\n    this.nzAsyncData = false;\n    this.nzDraggable = false;\n    this.nzMultiple = false;\n    this.nzVirtualItemSize = 28;\n    this.nzVirtualMaxBufferPx = 500;\n    this.nzVirtualMinBufferPx = 28;\n    this.nzVirtualHeight = null;\n    this.nzData = [];\n    this.nzExpandedKeys = [];\n    this.nzSelectedKeys = [];\n    this.nzCheckedKeys = [];\n    this.nzSearchValue = '';\n    this.nzFlattenNodes = [];\n    this.beforeInit = true;\n    this.dir = 'ltr';\n    this.nzExpandedKeysChange = new EventEmitter();\n    this.nzSelectedKeysChange = new EventEmitter();\n    this.nzCheckedKeysChange = new EventEmitter();\n    this.nzSearchValueChange = new EventEmitter();\n    this.nzClick = new EventEmitter();\n    this.nzDblClick = new EventEmitter();\n    this.nzContextMenu = new EventEmitter();\n    this.nzCheckBoxChange = new EventEmitter();\n    this.nzExpandChange = new EventEmitter();\n    this.nzOnDragStart = new EventEmitter();\n    this.nzOnDragEnter = new EventEmitter();\n    this.nzOnDragOver = new EventEmitter();\n    this.nzOnDragLeave = new EventEmitter();\n    this.nzOnDrop = new EventEmitter();\n    this.nzOnDragEnd = new EventEmitter();\n    this.HIDDEN_STYLE = {\n      width: 0,\n      height: 0,\n      display: 'flex',\n      overflow: 'hidden',\n      opacity: 0,\n      border: 0,\n      padding: 0,\n      margin: 0\n    };\n    this.HIDDEN_NODE_STYLE = {\n      position: 'absolute',\n      pointerEvents: 'none',\n      visibility: 'hidden',\n      height: 0,\n      overflow: 'hidden'\n    };\n    this.destroy$ = new Subject();\n\n    this.onChange = () => null;\n\n    this.onTouched = () => null;\n  }\n\n  writeValue(value) {\n    this.handleNzData(value);\n  }\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * Render all properties of nzTree\n   *\n   * @param changes: all changes from @Input\n   */\n\n\n  renderTreeProperties(changes) {\n    let useDefaultExpandedKeys = false;\n    let expandAll = false;\n    const {\n      nzData,\n      nzExpandedKeys,\n      nzSelectedKeys,\n      nzCheckedKeys,\n      nzCheckStrictly,\n      nzExpandAll,\n      nzMultiple,\n      nzSearchValue\n    } = changes;\n\n    if (nzExpandAll) {\n      useDefaultExpandedKeys = true;\n      expandAll = this.nzExpandAll;\n    }\n\n    if (nzMultiple) {\n      this.nzTreeService.isMultiple = this.nzMultiple;\n    }\n\n    if (nzCheckStrictly) {\n      this.nzTreeService.isCheckStrictly = this.nzCheckStrictly;\n    }\n\n    if (nzData) {\n      this.handleNzData(this.nzData);\n    }\n\n    if (nzCheckedKeys) {\n      this.handleCheckedKeys(this.nzCheckedKeys);\n    }\n\n    if (nzCheckStrictly) {\n      this.handleCheckedKeys(null);\n    }\n\n    if (nzExpandedKeys || nzExpandAll) {\n      useDefaultExpandedKeys = true;\n      this.handleExpandedKeys(expandAll || this.nzExpandedKeys);\n    }\n\n    if (nzSelectedKeys) {\n      this.handleSelectedKeys(this.nzSelectedKeys, this.nzMultiple);\n    }\n\n    if (nzSearchValue) {\n      if (!(nzSearchValue.firstChange && !this.nzSearchValue)) {\n        useDefaultExpandedKeys = false;\n        this.handleSearchValue(nzSearchValue.currentValue, this.nzSearchFunc);\n        this.nzSearchValueChange.emit(this.nzTreeService.formatEvent('search', null, null));\n      }\n    } // flatten data\n\n\n    const currentExpandedKeys = this.getExpandedNodeList().map(v => v.key);\n    const newExpandedKeys = useDefaultExpandedKeys ? expandAll || this.nzExpandedKeys : currentExpandedKeys;\n    this.handleFlattenNodes(this.nzTreeService.rootNodes, newExpandedKeys);\n  }\n\n  trackByFlattenNode(_, node) {\n    return node.key;\n  } // Deal with properties\n\n  /**\n   * nzData\n   *\n   * @param value\n   */\n\n\n  handleNzData(value) {\n    if (Array.isArray(value)) {\n      const data = this.coerceTreeNodes(value);\n      this.nzTreeService.initTree(data);\n    }\n  }\n\n  handleFlattenNodes(data, expandKeys = []) {\n    this.nzTreeService.flattenTreeData(data, expandKeys);\n  }\n\n  handleCheckedKeys(keys) {\n    this.nzTreeService.conductCheck(keys, this.nzCheckStrictly);\n  }\n\n  handleExpandedKeys(keys = []) {\n    this.nzTreeService.conductExpandedKeys(keys);\n  }\n\n  handleSelectedKeys(keys, isMulti) {\n    this.nzTreeService.conductSelectedKeys(keys, isMulti);\n  }\n\n  handleSearchValue(value, searchFunc) {\n    const dataList = flattenTreeData(this.nzTreeService.rootNodes, true).map(v => v.data);\n\n    const checkIfMatched = node => {\n      if (searchFunc) {\n        return searchFunc(node.origin);\n      }\n\n      return !value || !node.title.toLowerCase().includes(value.toLowerCase()) ? false : true;\n    };\n\n    dataList.forEach(v => {\n      v.isMatched = checkIfMatched(v);\n      v.canHide = !v.isMatched;\n\n      if (!v.isMatched) {\n        v.setExpanded(false);\n        this.nzTreeService.setExpandedNodeList(v);\n      } else {\n        // expand\n        this.nzTreeService.expandNodeAllParentBySearch(v);\n      }\n\n      this.nzTreeService.setMatchedNodeList(v);\n    });\n  }\n  /**\n   * Handle emit event\n   *\n   * @param event\n   * handle each event\n   */\n\n\n  eventTriggerChanged(event) {\n    const node = event.node;\n\n    switch (event.eventName) {\n      case 'expand':\n        this.renderTree();\n        this.nzExpandChange.emit(event);\n        break;\n\n      case 'click':\n        this.nzClick.emit(event);\n        break;\n\n      case 'dblclick':\n        this.nzDblClick.emit(event);\n        break;\n\n      case 'contextmenu':\n        this.nzContextMenu.emit(event);\n        break;\n\n      case 'check':\n        // Render checked state with nodes' property `isChecked`\n        this.nzTreeService.setCheckedNodeList(node);\n\n        if (!this.nzCheckStrictly) {\n          this.nzTreeService.conduct(node);\n        } // Cause check method will rerender list, so we need recover it and next the new event to user\n\n\n        const eventNext = this.nzTreeService.formatEvent('check', node, event.event);\n        this.nzCheckBoxChange.emit(eventNext);\n        break;\n\n      case 'dragstart':\n        // if node is expanded\n        if (node.isExpanded) {\n          node.setExpanded(!node.isExpanded);\n          this.renderTree();\n        }\n\n        this.nzOnDragStart.emit(event);\n        break;\n\n      case 'dragenter':\n        const selectedNode = this.nzTreeService.getSelectedNode();\n\n        if (selectedNode && selectedNode.key !== node.key && !node.isExpanded && !node.isLeaf) {\n          node.setExpanded(true);\n          this.renderTree();\n        }\n\n        this.nzOnDragEnter.emit(event);\n        break;\n\n      case 'dragover':\n        this.nzOnDragOver.emit(event);\n        break;\n\n      case 'dragleave':\n        this.nzOnDragLeave.emit(event);\n        break;\n\n      case 'dragend':\n        this.nzOnDragEnd.emit(event);\n        break;\n\n      case 'drop':\n        this.renderTree();\n        this.nzOnDrop.emit(event);\n        break;\n    }\n  }\n  /**\n   * Click expand icon\n   */\n\n\n  renderTree() {\n    this.handleFlattenNodes(this.nzTreeService.rootNodes, this.getExpandedNodeList().map(v => v.key));\n    this.cdr.markForCheck();\n  }\n\n  ngOnInit() {\n    var _a;\n\n    this.nzTreeService.flattenNodes$.pipe(takeUntil(this.destroy$)).subscribe(data => {\n      this.nzFlattenNodes = data;\n      this.cdr.markForCheck();\n    });\n    this.dir = this.directionality.value;\n    (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n      this.dir = direction;\n      this.cdr.detectChanges();\n    });\n  }\n\n  ngOnChanges(changes) {\n    this.renderTreeProperties(changes);\n  }\n\n  ngAfterViewInit() {\n    this.beforeInit = false;\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n}\n\nNzTreeComponent.ɵfac = function NzTreeComponent_Factory(t) {\n  return new (t || NzTreeComponent)(i0.ɵɵdirectiveInject(i1.NzTreeBaseService), i0.ɵɵdirectiveInject(i2$1.NzConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3$1.Directionality, 8), i0.ɵɵdirectiveInject(i4$1.NzNoAnimationDirective, 9));\n};\n\nNzTreeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeComponent,\n  selectors: [[\"nz-tree\"]],\n  contentQueries: function NzTreeComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c2, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nzTreeTemplateChild = _t.first);\n    }\n  },\n  viewQuery: function NzTreeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CdkVirtualScrollViewport, 5, CdkVirtualScrollViewport);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cdkVirtualScrollViewport = _t.first);\n    }\n  },\n  hostVars: 20,\n  hostBindings: function NzTreeComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"ant-select-tree\", ctx.nzSelectMode)(\"ant-select-tree-show-line\", ctx.nzSelectMode && ctx.nzShowLine)(\"ant-select-tree-icon-hide\", ctx.nzSelectMode && !ctx.nzShowIcon)(\"ant-select-tree-block-node\", ctx.nzSelectMode && ctx.nzBlockNode)(\"ant-tree\", !ctx.nzSelectMode)(\"ant-tree-rtl\", ctx.dir === \"rtl\")(\"ant-tree-show-line\", !ctx.nzSelectMode && ctx.nzShowLine)(\"ant-tree-icon-hide\", !ctx.nzSelectMode && !ctx.nzShowIcon)(\"ant-tree-block-node\", !ctx.nzSelectMode && ctx.nzBlockNode)(\"draggable-tree\", ctx.nzDraggable);\n    }\n  },\n  inputs: {\n    nzShowIcon: \"nzShowIcon\",\n    nzHideUnMatched: \"nzHideUnMatched\",\n    nzBlockNode: \"nzBlockNode\",\n    nzExpandAll: \"nzExpandAll\",\n    nzSelectMode: \"nzSelectMode\",\n    nzCheckStrictly: \"nzCheckStrictly\",\n    nzShowExpand: \"nzShowExpand\",\n    nzShowLine: \"nzShowLine\",\n    nzCheckable: \"nzCheckable\",\n    nzAsyncData: \"nzAsyncData\",\n    nzDraggable: \"nzDraggable\",\n    nzMultiple: \"nzMultiple\",\n    nzExpandedIcon: \"nzExpandedIcon\",\n    nzVirtualItemSize: \"nzVirtualItemSize\",\n    nzVirtualMaxBufferPx: \"nzVirtualMaxBufferPx\",\n    nzVirtualMinBufferPx: \"nzVirtualMinBufferPx\",\n    nzVirtualHeight: \"nzVirtualHeight\",\n    nzTreeTemplate: \"nzTreeTemplate\",\n    nzBeforeDrop: \"nzBeforeDrop\",\n    nzData: \"nzData\",\n    nzExpandedKeys: \"nzExpandedKeys\",\n    nzSelectedKeys: \"nzSelectedKeys\",\n    nzCheckedKeys: \"nzCheckedKeys\",\n    nzSearchValue: \"nzSearchValue\",\n    nzSearchFunc: \"nzSearchFunc\"\n  },\n  outputs: {\n    nzExpandedKeysChange: \"nzExpandedKeysChange\",\n    nzSelectedKeysChange: \"nzSelectedKeysChange\",\n    nzCheckedKeysChange: \"nzCheckedKeysChange\",\n    nzSearchValueChange: \"nzSearchValueChange\",\n    nzClick: \"nzClick\",\n    nzDblClick: \"nzDblClick\",\n    nzContextMenu: \"nzContextMenu\",\n    nzCheckBoxChange: \"nzCheckBoxChange\",\n    nzExpandChange: \"nzExpandChange\",\n    nzOnDragStart: \"nzOnDragStart\",\n    nzOnDragEnter: \"nzOnDragEnter\",\n    nzOnDragOver: \"nzOnDragOver\",\n    nzOnDragLeave: \"nzOnDragLeave\",\n    nzOnDrop: \"nzOnDrop\",\n    nzOnDragEnd: \"nzOnDragEnd\"\n  },\n  exportAs: [\"nzTree\"],\n  features: [i0.ɵɵProvidersFeature([NzTreeService, {\n    provide: NzTreeBaseService,\n    useFactory: NzTreeServiceFactory,\n    deps: [[new SkipSelf(), new Optional(), NzTreeHigherOrderServiceToken], NzTreeService]\n  }, {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NzTreeComponent),\n    multi: true\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 10,\n  vars: 6,\n  consts: [[3, \"ngStyle\"], [1, \"ant-tree-treenode\", 3, \"ngStyle\"], [1, \"ant-tree-indent\"], [1, \"ant-tree-indent-unit\"], [1, \"ant-tree-list\", 2, \"position\", \"relative\"], [3, \"ant-select-tree-list-holder-inner\", \"ant-tree-list-holder-inner\", \"itemSize\", \"minBufferPx\", \"maxBufferPx\", \"height\", 4, \"ngIf\"], [3, \"ant-select-tree-list-holder-inner\", \"ant-tree-list-holder-inner\", \"nzNoAnimation\", 4, \"ngIf\"], [\"nodeTemplate\", \"\"], [3, \"itemSize\", \"minBufferPx\", \"maxBufferPx\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\", \"cdkVirtualForTrackBy\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"nzNoAnimation\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"builtin\", \"\", 3, \"icon\", \"title\", \"isLoading\", \"isSelected\", \"isDisabled\", \"isMatched\", \"isExpanded\", \"isLeaf\", \"isStart\", \"isEnd\", \"isChecked\", \"isHalfChecked\", \"isDisableCheckbox\", \"isSelectable\", \"canHide\", \"nzTreeNode\", \"nzSelectMode\", \"nzShowLine\", \"nzExpandedIcon\", \"nzDraggable\", \"nzCheckable\", \"nzShowExpand\", \"nzAsyncData\", \"nzSearchValue\", \"nzHideUnMatched\", \"nzBeforeDrop\", \"nzShowIcon\", \"nzTreeTemplate\", \"nzExpandChange\", \"nzClick\", \"nzDblClick\", \"nzContextMenu\", \"nzCheckBoxChange\", \"nzOnDragStart\", \"nzOnDragEnter\", \"nzOnDragOver\", \"nzOnDragLeave\", \"nzOnDragEnd\", \"nzOnDrop\"]],\n  template: function NzTreeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵelement(1, \"input\", 0);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 1);\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵelement(4, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 4);\n      i0.ɵɵtemplate(6, NzTreeComponent_cdk_virtual_scroll_viewport_6_Template, 2, 11, \"cdk-virtual-scroll-viewport\", 5);\n      i0.ɵɵtemplate(7, NzTreeComponent_div_7_Template, 2, 9, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, NzTreeComponent_ng_template_8_Template, 1, 28, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngStyle\", ctx.HIDDEN_STYLE);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngStyle\", ctx.HIDDEN_NODE_STYLE);\n      i0.ɵɵadvance(3);\n      i0.ɵɵclassProp(\"ant-select-tree-list\", ctx.nzSelectMode);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.nzVirtualHeight);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.nzVirtualHeight);\n    }\n  },\n  directives: [i5.CdkVirtualScrollViewport, NzTreeNodeBuiltinComponent, i7.NgStyle, i7.NgIf, i5.CdkFixedSizeVirtualScroll, i5.CdkVirtualForOf, i7.NgTemplateOutlet, i4$1.NzNoAnimationDirective, i7.NgForOf],\n  encapsulation: 2,\n  data: {\n    animation: [treeCollapseMotion]\n  },\n  changeDetection: 0\n});\n\n__decorate([InputBoolean(), WithConfig()], NzTreeComponent.prototype, \"nzShowIcon\", void 0);\n\n__decorate([InputBoolean(), WithConfig()], NzTreeComponent.prototype, \"nzHideUnMatched\", void 0);\n\n__decorate([InputBoolean(), WithConfig()], NzTreeComponent.prototype, \"nzBlockNode\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzExpandAll\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzSelectMode\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzCheckStrictly\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzShowExpand\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzShowLine\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzCheckable\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzAsyncData\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzDraggable\", void 0);\n\n__decorate([InputBoolean()], NzTreeComponent.prototype, \"nzMultiple\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree',\n      exportAs: 'nzTree',\n      animations: [treeCollapseMotion],\n      template: `\n    <div>\n      <input [ngStyle]=\"HIDDEN_STYLE\" />\n    </div>\n    <div class=\"ant-tree-treenode\" [ngStyle]=\"HIDDEN_NODE_STYLE\">\n      <div class=\"ant-tree-indent\">\n        <div class=\"ant-tree-indent-unit\"></div>\n      </div>\n    </div>\n    <div class=\"ant-tree-list\" [class.ant-select-tree-list]=\"nzSelectMode\" style=\"position: relative\">\n      <cdk-virtual-scroll-viewport\n        *ngIf=\"nzVirtualHeight\"\n        [class.ant-select-tree-list-holder-inner]=\"nzSelectMode\"\n        [class.ant-tree-list-holder-inner]=\"!nzSelectMode\"\n        [itemSize]=\"nzVirtualItemSize\"\n        [minBufferPx]=\"nzVirtualMinBufferPx\"\n        [maxBufferPx]=\"nzVirtualMaxBufferPx\"\n        [style.height]=\"nzVirtualHeight\"\n      >\n        <ng-container *cdkVirtualFor=\"let node of nzFlattenNodes; trackBy: trackByFlattenNode\">\n          <ng-template [ngTemplateOutlet]=\"nodeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n        </ng-container>\n      </cdk-virtual-scroll-viewport>\n\n      <div\n        *ngIf=\"!nzVirtualHeight\"\n        [class.ant-select-tree-list-holder-inner]=\"nzSelectMode\"\n        [class.ant-tree-list-holder-inner]=\"!nzSelectMode\"\n        [@.disabled]=\"beforeInit || noAnimation?.nzNoAnimation\"\n        [nzNoAnimation]=\"noAnimation?.nzNoAnimation\"\n        [@treeCollapseMotion]=\"nzFlattenNodes.length\"\n      >\n        <ng-container *ngFor=\"let node of nzFlattenNodes; trackBy: trackByFlattenNode\">\n          <ng-template [ngTemplateOutlet]=\"nodeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n        </ng-container>\n      </div>\n    </div>\n    <ng-template #nodeTemplate let-treeNode>\n      <nz-tree-node\n        builtin\n        [icon]=\"treeNode.icon\"\n        [title]=\"treeNode.title\"\n        [isLoading]=\"treeNode.isLoading\"\n        [isSelected]=\"treeNode.isSelected\"\n        [isDisabled]=\"treeNode.isDisabled\"\n        [isMatched]=\"treeNode.isMatched\"\n        [isExpanded]=\"treeNode.isExpanded\"\n        [isLeaf]=\"treeNode.isLeaf\"\n        [isStart]=\"treeNode.isStart\"\n        [isEnd]=\"treeNode.isEnd\"\n        [isChecked]=\"treeNode.isChecked\"\n        [isHalfChecked]=\"treeNode.isHalfChecked\"\n        [isDisableCheckbox]=\"treeNode.isDisableCheckbox\"\n        [isSelectable]=\"treeNode.isSelectable\"\n        [canHide]=\"treeNode.canHide\"\n        [nzTreeNode]=\"treeNode\"\n        [nzSelectMode]=\"nzSelectMode\"\n        [nzShowLine]=\"nzShowLine\"\n        [nzExpandedIcon]=\"nzExpandedIcon\"\n        [nzDraggable]=\"nzDraggable\"\n        [nzCheckable]=\"nzCheckable\"\n        [nzShowExpand]=\"nzShowExpand\"\n        [nzAsyncData]=\"nzAsyncData\"\n        [nzSearchValue]=\"nzSearchValue\"\n        [nzHideUnMatched]=\"nzHideUnMatched\"\n        [nzBeforeDrop]=\"nzBeforeDrop\"\n        [nzShowIcon]=\"nzShowIcon\"\n        [nzTreeTemplate]=\"nzTreeTemplate || nzTreeTemplateChild\"\n        (nzExpandChange)=\"eventTriggerChanged($event)\"\n        (nzClick)=\"eventTriggerChanged($event)\"\n        (nzDblClick)=\"eventTriggerChanged($event)\"\n        (nzContextMenu)=\"eventTriggerChanged($event)\"\n        (nzCheckBoxChange)=\"eventTriggerChanged($event)\"\n        (nzOnDragStart)=\"eventTriggerChanged($event)\"\n        (nzOnDragEnter)=\"eventTriggerChanged($event)\"\n        (nzOnDragOver)=\"eventTriggerChanged($event)\"\n        (nzOnDragLeave)=\"eventTriggerChanged($event)\"\n        (nzOnDragEnd)=\"eventTriggerChanged($event)\"\n        (nzOnDrop)=\"eventTriggerChanged($event)\"\n      ></nz-tree-node>\n    </ng-template>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [NzTreeService, {\n        provide: NzTreeBaseService,\n        useFactory: NzTreeServiceFactory,\n        deps: [[new SkipSelf(), new Optional(), NzTreeHigherOrderServiceToken], NzTreeService]\n      }, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NzTreeComponent),\n        multi: true\n      }],\n      host: {\n        '[class.ant-select-tree]': `nzSelectMode`,\n        '[class.ant-select-tree-show-line]': `nzSelectMode && nzShowLine`,\n        '[class.ant-select-tree-icon-hide]': `nzSelectMode && !nzShowIcon`,\n        '[class.ant-select-tree-block-node]': `nzSelectMode && nzBlockNode`,\n        '[class.ant-tree]': `!nzSelectMode`,\n        '[class.ant-tree-rtl]': `dir === 'rtl'`,\n        '[class.ant-tree-show-line]': `!nzSelectMode && nzShowLine`,\n        '[class.ant-tree-icon-hide]': `!nzSelectMode && !nzShowIcon`,\n        '[class.ant-tree-block-node]': `!nzSelectMode && nzBlockNode`,\n        '[class.draggable-tree]': `nzDraggable`\n      }\n    }]\n  }], function () {\n    return [{\n      type: i1.NzTreeBaseService\n    }, {\n      type: i2$1.NzConfigService\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i3$1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i4$1.NzNoAnimationDirective,\n      decorators: [{\n        type: Host\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    nzShowIcon: [{\n      type: Input\n    }],\n    nzHideUnMatched: [{\n      type: Input\n    }],\n    nzBlockNode: [{\n      type: Input\n    }],\n    nzExpandAll: [{\n      type: Input\n    }],\n    nzSelectMode: [{\n      type: Input\n    }],\n    nzCheckStrictly: [{\n      type: Input\n    }],\n    nzShowExpand: [{\n      type: Input\n    }],\n    nzShowLine: [{\n      type: Input\n    }],\n    nzCheckable: [{\n      type: Input\n    }],\n    nzAsyncData: [{\n      type: Input\n    }],\n    nzDraggable: [{\n      type: Input\n    }],\n    nzMultiple: [{\n      type: Input\n    }],\n    nzExpandedIcon: [{\n      type: Input\n    }],\n    nzVirtualItemSize: [{\n      type: Input\n    }],\n    nzVirtualMaxBufferPx: [{\n      type: Input\n    }],\n    nzVirtualMinBufferPx: [{\n      type: Input\n    }],\n    nzVirtualHeight: [{\n      type: Input\n    }],\n    nzTreeTemplate: [{\n      type: Input\n    }],\n    nzBeforeDrop: [{\n      type: Input\n    }],\n    nzData: [{\n      type: Input\n    }],\n    nzExpandedKeys: [{\n      type: Input\n    }],\n    nzSelectedKeys: [{\n      type: Input\n    }],\n    nzCheckedKeys: [{\n      type: Input\n    }],\n    nzSearchValue: [{\n      type: Input\n    }],\n    nzSearchFunc: [{\n      type: Input\n    }],\n    nzTreeTemplateChild: [{\n      type: ContentChild,\n      args: ['nzTreeTemplate', {\n        static: true\n      }]\n    }],\n    cdkVirtualScrollViewport: [{\n      type: ViewChild,\n      args: [CdkVirtualScrollViewport, {\n        read: CdkVirtualScrollViewport\n      }]\n    }],\n    nzExpandedKeysChange: [{\n      type: Output\n    }],\n    nzSelectedKeysChange: [{\n      type: Output\n    }],\n    nzCheckedKeysChange: [{\n      type: Output\n    }],\n    nzSearchValueChange: [{\n      type: Output\n    }],\n    nzClick: [{\n      type: Output\n    }],\n    nzDblClick: [{\n      type: Output\n    }],\n    nzContextMenu: [{\n      type: Output\n    }],\n    nzCheckBoxChange: [{\n      type: Output\n    }],\n    nzExpandChange: [{\n      type: Output\n    }],\n    nzOnDragStart: [{\n      type: Output\n    }],\n    nzOnDragEnter: [{\n      type: Output\n    }],\n    nzOnDragOver: [{\n      type: Output\n    }],\n    nzOnDragLeave: [{\n      type: Output\n    }],\n    nzOnDrop: [{\n      type: Output\n    }],\n    nzOnDragEnd: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzTreeModule {}\n\nNzTreeModule.ɵfac = function NzTreeModule_Factory(t) {\n  return new (t || NzTreeModule)();\n};\n\nNzTreeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NzTreeModule\n});\nNzTreeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[BidiModule, CommonModule, NzOutletModule, NzIconModule, NzNoAnimationModule, NzHighlightModule, ScrollingModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, CommonModule, NzOutletModule, NzIconModule, NzNoAnimationModule, NzHighlightModule, ScrollingModule],\n      declarations: [NzTreeComponent, NzTreeNodeBuiltinComponent, NzTreeIndentComponent, NzTreeNodeSwitcherComponent, NzTreeNodeBuiltinCheckboxComponent, NzTreeNodeTitleComponent, NzTreeDropIndicatorComponent],\n      exports: [NzTreeComponent, NzTreeNodeBuiltinComponent, NzTreeIndentComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzTreeComponent, NzTreeIndentComponent, NzTreeModule, NzTreeNodeBuiltinCheckboxComponent, NzTreeNodeBuiltinComponent, NzTreeNodeSwitcherComponent, NzTreeNodeTitleComponent, NzTreeService, NzTreeServiceFactory };","map":{"version":3,"sources":["/home/tudor/Desktop/Work/Git/Cute/node_modules/ng-zorro-antd/fesm2015/ng-zorro-antd-tree.mjs"],"names":["i3$1","BidiModule","i5","CdkVirtualScrollViewport","ScrollingModule","i7","CommonModule","i0","Component","ChangeDetectionStrategy","Input","EventEmitter","Host","Optional","Output","Injectable","SkipSelf","forwardRef","ContentChild","ViewChild","NgModule","i4","NzHighlightModule","i4$1","NzNoAnimationModule","i2","NzOutletModule","i3","NzIconModule","__decorate","Subject","fromEvent","takeUntil","InputBoolean","i1","NzTreeBaseService","NzTreeBase","flattenTreeData","NzTreeHigherOrderServiceToken","NzTreeNode","NG_VALUE_ACCESSOR","treeCollapseMotion","i2$1","WithConfig","NzTreeDropIndicatorComponent","constructor","cdr","level","direction","style","ngOnChanges","_changes","renderIndicator","dropPosition","offset","startPosition","endPosition","top","bottom","display","markForCheck","ɵfac","ChangeDetectorRef","ɵcmp","type","args","selector","exportAs","template","changeDetection","OnPush","preserveWhitespaces","host","NzTreeIndentComponent","nzTreeLevel","nzIsStart","nzIsEnd","nzSelectMode","listOfUnit","changes","Array","currentValue","NgForOf","NzTreeNodeBuiltinCheckboxComponent","isChecked","isHalfChecked","isDisabled","isDisableCheckbox","NzTreeNodeSwitcherComponent","isShowLineIcon","isLeaf","nzShowLine","isShowSwitchIcon","isSwitcherOpen","isExpanded","isSwitcherClose","NgIf","NzStringTemplateOutletDirective","NzIconDirective","nzShowExpand","nzExpandedIcon","context","isLoading","NzTreeNodeTitleComponent","treeTemplate","selectMode","showIndicator","canDraggable","draggable","matchedValue","isMatched","searchValue","dragPosition","NgTemplateOutlet","NzHighlightPipe","showIcon","icon","title","isSelected","NzTreeNodeBuiltinComponent","nzTreeService","ngZone","renderer","elementRef","noAnimation","isStart","isEnd","nzHideUnMatched","nzNoAnimation","nzShowIcon","nzTreeTemplate","nzSearchValue","nzDraggable","nzClick","nzDblClick","nzContextMenu","nzCheckBoxChange","nzExpandChange","nzOnDragStart","nzOnDragEnter","nzOnDragOver","nzOnDragLeave","nzOnDrop","nzOnDragEnd","destroy$","dragPos","dragPosClass","draggingKey","displayStyle","canHide","clickExpand","event","preventDefault","nzAsyncData","nzTreeNode","children","length","setExpanded","setExpandedNodeList","eventNext","formatEvent","emit","clickSelect","isSelectable","setSelectedNodeList","dblClick","contextMenu","clickCheckBox","setCheckedNodeList","clearDragClass","dragClass","forEach","e","removeClass","nativeElement","handleDragStart","dataTransfer","setData","key","error","setSelectedNode","handleDragEnter","_a","getSelectedNode","run","handleDragOver","calcDropPosition","addClass","handleDragLeave","handleDragDrop","stopPropagation","node","dropEvent","dragEndEvent","nzBeforeDrop","dragNode","pos","subscribe","canDrop","dropAndApply","handleDragEnd","handDragEvent","runOutsideAngular","pipe","next","complete","ngOnInit","component","ngOnDestroy","NgZone","Renderer2","ElementRef","NzNoAnimationDirective","prototype","decorators","nzCheckable","NzTreeService","ɵprov","NzTreeServiceFactory","higherOrderService","treeService","NZ_CONFIG_MODULE_NAME","NzTreeComponent","nzConfigService","directionality","_nzModuleName","nzBlockNode","nzExpandAll","nzCheckStrictly","nzMultiple","nzVirtualItemSize","nzVirtualMaxBufferPx","nzVirtualMinBufferPx","nzVirtualHeight","nzData","nzExpandedKeys","nzSelectedKeys","nzCheckedKeys","nzFlattenNodes","beforeInit","dir","nzExpandedKeysChange","nzSelectedKeysChange","nzCheckedKeysChange","nzSearchValueChange","HIDDEN_STYLE","width","height","overflow","opacity","border","padding","margin","HIDDEN_NODE_STYLE","position","pointerEvents","visibility","onChange","onTouched","writeValue","value","handleNzData","registerOnChange","fn","registerOnTouched","renderTreeProperties","useDefaultExpandedKeys","expandAll","isMultiple","isCheckStrictly","handleCheckedKeys","handleExpandedKeys","handleSelectedKeys","firstChange","handleSearchValue","nzSearchFunc","currentExpandedKeys","getExpandedNodeList","map","v","newExpandedKeys","handleFlattenNodes","rootNodes","trackByFlattenNode","_","isArray","data","coerceTreeNodes","initTree","expandKeys","keys","conductCheck","conductExpandedKeys","isMulti","conductSelectedKeys","searchFunc","dataList","checkIfMatched","origin","toLowerCase","includes","expandNodeAllParentBySearch","setMatchedNodeList","eventTriggerChanged","eventName","renderTree","conduct","selectedNode","flattenNodes$","change","detectChanges","ngAfterViewInit","NzConfigService","Directionality","provide","useFactory","deps","useExisting","multi","NgStyle","CdkFixedSizeVirtualScroll","CdkVirtualForOf","animations","providers","nzTreeTemplateChild","static","cdkVirtualScrollViewport","read","NzTreeModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,mBAAtB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,SAASC,wBAAT,EAAmCC,eAAnC,QAA0D,wBAA1D;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,SAAT,EAAoBC,uBAApB,EAA6CC,KAA7C,EAAoDC,YAApD,EAAkEC,IAAlE,EAAwEC,QAAxE,EAAkFC,MAAlF,EAA0FC,UAA1F,EAAsGC,QAAtG,EAAgHC,UAAhH,EAA4HC,YAA5H,EAA0IC,SAA1I,EAAqJC,QAArJ,QAAqK,eAArK;AACA,OAAO,KAAKC,EAAZ,MAAoB,8BAApB;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,OAAO,KAAKC,IAAZ,MAAsB,iCAAtB;AACA,SAASC,mBAAT,QAAoC,iCAApC;AACA,OAAO,KAAKC,EAAZ,MAAoB,2BAApB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,OAAO,KAAKC,EAAZ,MAAoB,oBAApB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,MAAnC;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,OAAO,KAAKC,EAAZ,MAAoB,yBAApB;AACA,SAASC,iBAAT,EAA4BC,UAA5B,EAAwCC,eAAxC,EAAyDC,6BAAzD,QAA8F,yBAA9F;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,iBAAT,QAAkC,gBAAlC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,OAAO,KAAKC,IAAZ,MAAsB,2BAAtB;AACA,SAASC,UAAT,QAA2B,2BAA3B;AAEA;AACA;AACA;AACA;;;;AAuC+GpC,IAAAA,EA4C3G,qB;;;;;mBA5C2GA,E;AAAAA,IAAAA,EA6CzG,0a;;;;;;;;AA7CyGA,IAAAA,EA8JvG,2B;AA9JuGA,IAAAA,EA+JrG,qB;AA/JqGA,IAAAA,EAqKvG,wB;;;;mBArKuGA,E;AAAAA,IAAAA,EAkKnG,a;AAlKmGA,IAAAA,EAkKnG,kH;;;;;;;;;;;;;AAlKmGA,IAAAA,EA6JzG,2B;AA7JyGA,IAAAA,EA8JvG,0H;AA9JuGA,IAAAA,EAsKzG,wB;;;;mBAtKyGA,E;AAAAA,IAAAA,EA8JxF,a;AA9JwFA,IAAAA,EA8JxF,8FA9JwFA,EA8JxF,gE;;;;;;AA9JwFA,IAAAA,EA4J3G,2B;AA5J2GA,IAAAA,EA6JzG,2G;AA7JyGA,IAAAA,EAuK3G,wB;;;;mBAvK2GA,E;;gBAAAA,E;;AAAAA,IAAAA,EA6J1F,a;AA7J0FA,IAAAA,EA6J1F,uD;;;;;;AA7J0FA,IAAAA,EA2KrG,qB;;;;mBA3KqGA,E;AAAAA,IAAAA,EA8KnG,6E;;;;;;AA9KmGA,IAAAA,EAiLrG,qB;;;;;;AAjLqGA,IAAAA,EA0KvG,2B;AA1KuGA,IAAAA,EA2KrG,mH;AA3KqGA,IAAAA,EAiLrG,mH;AAjLqGA,IAAAA,EAkLvG,wB;;;;mBAlLuGA,E;AAAAA,IAAAA,EA4KlG,a;AA5KkGA,IAAAA,EA4KlG,0C;AA5KkGA,IAAAA,EAiLjG,a;AAjLiGA,IAAAA,EAiLjG,2C;;;;;;AAjLiGA,IAAAA,EAyKzG,2B;AAzKyGA,IAAAA,EA0KvG,0H;AA1KuGA,IAAAA,EAmLzG,wB;;;;mBAnLyGA,E;AAAAA,IAAAA,EA0KxF,a;AA1KwFA,IAAAA,EA0KxF,8FA1KwFA,EA0KxF,gE;;;;;;AA1KwFA,IAAAA,EAwK3G,2B;AAxK2GA,IAAAA,EAyKzG,2G;AAzKyGA,IAAAA,EAoL3G,wB;;;;mBApL2GA,E;;gBAAAA,E;;AAAAA,IAAAA,EAyK1F,a;AAzK0FA,IAAAA,EAyK1F,uD;;;;;;AAzK0FA,IAAAA,EAsLzG,qB;;;;AAtLyGA,IAAAA,EAsL7E,2B;;;;;;;;AAtL6EA,IAAAA,EA8SrG,qB;;;;mBA9SqGA,E;AAAAA,IAAAA,EA8S7E,kC;;;;;;AA9S6EA,IAAAA,EAgSzG,0B;AAhSyGA,IAAAA,EAwSvG,0B;AAxSuGA,IAAAA,EA8SrG,yF;AA9SqGA,IAAAA,EA+SvG,e;AA/SuGA,IAAAA,EAgTzG,e;;;;mBAhTyGA,E;AAAAA,IAAAA,EAkSvG,2O;AAlSuGA,IAAAA,EAySrG,a;AAzSqGA,IAAAA,EAySrG,wM;AAzSqGA,IAAAA,EA8SzF,a;AA9SyFA,IAAAA,EA8SzF,gC;;;;;;AA9SyFA,IAAAA,EAkTzG,0C;;;;mBAlTyGA,E;AAAAA,IAAAA,EAoTvG,+E;;;;;;AApTuGA,IAAAA,EA+R3G,2B;AA/R2GA,IAAAA,EAgSzG,yF;AAhSyGA,IAAAA,EAiTzG,wB;AAjTyGA,IAAAA,E;AAAAA,IAAAA,EAkTzG,4H;AAlTyGA,IAAAA,EAuT3G,wB;;;;mBAvT2GA,E;AAAAA,IAAAA,EAiStG,a;AAjSsGA,IAAAA,EAiStG,mD;AAjSsGA,IAAAA,EAiT5E,a;AAjT4EA,IAAAA,EAiT5E,yBAjT4EA,EAiT5E,8EAjT4EA,EAiT5E,gB;AAjT4EA,IAAAA,EAmTtG,a;AAnTsGA,IAAAA,EAmTtG,yC;;;;;;gBAnTsGA,E;;AAAAA,IAAAA,EA0rB3G,8C;AA1rB2GA,IAAAA,EAosBzG;AApsByGA,MAAAA,EAosBzG;AAAA,qBApsByGA,EAosBzG;AAAA,aAAS,0BAAT;AAAA,M;AApsByGA,IAAAA,EAqsB1G,e;;;;mBArsB0GA,E;AAAAA,IAAAA,EA4rBzG,sR;;;;;;gBA5rByGA,E;;AAAAA,IAAAA,EAssB3G,8C;AAtsB2GA,IAAAA,EAysBzG;AAzsByGA,MAAAA,EAysBzG;AAAA,qBAzsByGA,EAysBzG;AAAA,aAAS,4BAAT;AAAA,M;AAzsByGA,IAAAA,EA+sB1G,e;;;;mBA/sB0GA,E;AAAAA,IAAAA,EA0sBzG,sM;;;;;;;;;;;;;;;;AA1sByGA,IAAAA,EAmuCvG,2B;AAnuCuGA,IAAAA,EAouCrG,4H;AApuCqGA,IAAAA,EAquCvG,wB;;;;;AAruCuGA,IAAAA,E;;gBAAAA,E;;AAAAA,IAAAA,EAouCxF,a;AApuCwFA,IAAAA,EAouCxF,gEApuCwFA,EAouCxF,kC;;;;;;AApuCwFA,IAAAA,EA0tCzG,oD;AA1tCyGA,IAAAA,EAmuCvG,8G;AAnuCuGA,IAAAA,EAsuCzG,e;;;;mBAtuCyGA,E;AAAAA,IAAAA,EAiuCvG,8C;AAjuCuGA,IAAAA,EA4tCvG,0H;AA5tCuGA,IAAAA,EA8tCvG,yI;AA9tCuGA,IAAAA,EAmuChE,a;AAnuCgEA,IAAAA,EAmuChE,wG;;;;;;;;AAnuCgEA,IAAAA,EAgvCvG,2B;AAhvCuGA,IAAAA,EAivCrG,oG;AAjvCqGA,IAAAA,EAkvCvG,wB;;;;;AAlvCuGA,IAAAA,E;;gBAAAA,E;;AAAAA,IAAAA,EAivCxF,a;AAjvCwFA,IAAAA,EAivCxF,gEAjvCwFA,EAivCxF,kC;;;;;;AAjvCwFA,IAAAA,EAwuCzG,6B;AAxuCyGA,IAAAA,EAgvCvG,uF;AAhvCuGA,IAAAA,EAmvCzG,e;;;;mBAnvCyGA,E;AAAAA,IAAAA,EA0uCvG,0H;AA1uCuGA,IAAAA,EA4uCvG,kQ;AA5uCuGA,IAAAA,EAgvCxE,a;AAhvCwEA,IAAAA,EAgvCxE,wF;;;;;;iBAhvCwEA,E;;AAAAA,IAAAA,EAsvCzG,sC;AAtvCyGA,IAAAA,EAoxCvG;AApxCuGA,MAAAA,EAoxCvG;AAAA,sBApxCuGA,EAoxCvG;AAAA,aAAkB,mCAAlB;AAAA;AApxCuGA,MAAAA,EAoxCvG;AAAA,sBApxCuGA,EAoxCvG;AAAA,aACW,mCADX;AAAA;AApxCuGA,MAAAA,EAoxCvG;AAAA,sBApxCuGA,EAoxCvG;AAAA,aAEc,mCAFd;AAAA;AApxCuGA,MAAAA,EAoxCvG;AAAA,sBApxCuGA,EAoxCvG;AAAA,aAGiB,mCAHjB;AAAA;AApxCuGA,MAAAA,EAoxCvG;AAAA,sBApxCuGA,EAoxCvG;AAAA,aAIoB,mCAJpB;AAAA;AApxCuGA,MAAAA,EAoxCvG;AAAA,sBApxCuGA,EAoxCvG;AAAA,aAKiB,mCALjB;AAAA;AApxCuGA,MAAAA,EAoxCvG;AAAA,sBApxCuGA,EAoxCvG;AAAA,aAMiB,mCANjB;AAAA;AApxCuGA,MAAAA,EAoxCvG;AAAA,sBApxCuGA,EAoxCvG;AAAA,aAOgB,mCAPhB;AAAA;AApxCuGA,MAAAA,EAoxCvG;AAAA,sBApxCuGA,EAoxCvG;AAAA,aAQiB,mCARjB;AAAA;AApxCuGA,MAAAA,EAoxCvG;AAAA,sBApxCuGA,EAoxCvG;AAAA,aASe,mCATf;AAAA;AApxCuGA,MAAAA,EAoxCvG;AAAA,sBApxCuGA,EAoxCvG;AAAA,aAUY,mCAVZ;AAAA,M;AApxCuGA,IAAAA,EA+xCxG,e;;;;;mBA/xCwGA,E;AAAAA,IAAAA,EAwvCvG,0iC;;;;AA9xCR,MAAMqC,4BAAN,CAAmC;AAC/BC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,KAAL,GAAa,EAAb;AACH;;AACDC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKC,eAAL,CAAqB,KAAKC,YAA1B,EAAwC,KAAKL,SAA7C;AACH;;AACDI,EAAAA,eAAe,CAACC,YAAD,EAAeL,SAAS,GAAG,KAA3B,EAAkC;AAC7C,UAAMM,MAAM,GAAG,CAAf;AACA,UAAMC,aAAa,GAAGP,SAAS,KAAK,KAAd,GAAsB,MAAtB,GAA+B,OAArD;AACA,UAAMQ,WAAW,GAAGR,SAAS,KAAK,KAAd,GAAsB,OAAtB,GAAgC,MAApD;AACA,UAAMC,KAAK,GAAG;AACV,OAACM,aAAD,GAAkB,GAAED,MAAO,IADjB;AAEV,OAACE,WAAD,GAAe;AAFL,KAAd;;AAIA,YAAQH,YAAR;AACI,WAAK,CAAC,CAAN;AACIJ,QAAAA,KAAK,CAACQ,GAAN,GAAa,GAAE,CAAC,CAAE,IAAlB;AACA;;AACJ,WAAK,CAAL;AACIR,QAAAA,KAAK,CAACS,MAAN,GAAgB,GAAE,CAAC,CAAE,IAArB;AACA;;AACJ,WAAK,CAAL;AACI;AACAT,QAAAA,KAAK,CAACS,MAAN,GAAgB,GAAE,CAAC,CAAE,IAArB;AACAT,QAAAA,KAAK,CAACM,aAAD,CAAL,GAAwB,GAAED,MAAM,GAAG,EAAG,IAAtC;AACA;;AACJ;AACIL,QAAAA,KAAK,CAACU,OAAN,GAAgB,MAAhB;AACA;AAdR;;AAgBA,SAAKV,KAAL,GAAaA,KAAb;AACA,SAAKH,GAAL,CAASc,YAAT;AACH;;AApC8B;;AAsCnChB,4BAA4B,CAACiB,IAA7B;AAAA,mBAAyHjB,4BAAzH,EAA+GrC,EAA/G,mBAAuKA,EAAE,CAACuD,iBAA1K;AAAA;;AACAlB,4BAA4B,CAACmB,IAA7B,kBAD+GxD,EAC/G;AAAA,QAA6GqC,4BAA7G;AAAA;AAAA;AAAA;AAAA;AAD+GrC,MAAAA,EAC/G;AAD+GA,MAAAA,EAC/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAD+GA,EAC/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA,qDAF+GA,EAE/G,mBAA2FqC,4BAA3F,EAAqI,CAAC;AAC1HoB,IAAAA,IAAI,EAAExD,SADoH;AAE1HyD,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,wBADX;AAECC,MAAAA,QAAQ,EAAE,qBAFX;AAGCC,MAAAA,QAAQ,EAAG,EAHZ;AAICC,MAAAA,eAAe,EAAE5D,uBAAuB,CAAC6D,MAJ1C;AAKCC,MAAAA,mBAAmB,EAAE,KALtB;AAMCC,MAAAA,IAAI,EAAE;AACF,2CAAmC,MADjC;AAEF,mBAAW;AAFT;AANP,KAAD;AAFoH,GAAD,CAArI,EAa4B,YAAY;AAAE,WAAO,CAAC;AAAER,MAAAA,IAAI,EAAEzD,EAAE,CAACuD;AAAX,KAAD,CAAP;AAA0C,GAbpF,EAasG;AAAET,IAAAA,YAAY,EAAE,CAAC;AACvGW,MAAAA,IAAI,EAAEtD;AADiG,KAAD,CAAhB;AAEtFqC,IAAAA,KAAK,EAAE,CAAC;AACRiB,MAAAA,IAAI,EAAEtD;AADE,KAAD,CAF+E;AAItFsC,IAAAA,SAAS,EAAE,CAAC;AACZgB,MAAAA,IAAI,EAAEtD;AADM,KAAD;AAJ2E,GAbtG;AAAA;AAqBA;AACA;AACA;AACA;;;AACA,MAAM+D,qBAAN,CAA4B;AACxB5B,EAAAA,WAAW,GAAG;AACV,SAAK6B,WAAL,GAAmB,CAAnB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,YAAL,GAAoB,KAApB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACH;;AACD5B,EAAAA,WAAW,CAAC6B,OAAD,EAAU;AACjB,UAAM;AAAEL,MAAAA;AAAF,QAAkBK,OAAxB;;AACA,QAAIL,WAAJ,EAAiB;AACb,WAAKI,UAAL,GAAkB,CAAC,GAAG,IAAIE,KAAJ,CAAUN,WAAW,CAACO,YAAZ,IAA4B,CAAtC,CAAJ,CAAlB;AACH;AACJ;;AAbuB;;AAe5BR,qBAAqB,CAACZ,IAAtB;AAAA,mBAAkHY,qBAAlH;AAAA;;AACAA,qBAAqB,CAACV,IAAtB,kBA3C+GxD,EA2C/G;AAAA,QAAsGkE,qBAAtG;AAAA;AAAA;AAAA;AAAA;AA3C+GlE,MAAAA,EA2C/G;AA3C+GA,MAAAA,EA2C/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA3C+GA,EA2C/G;AAAA;AAAA;AAAA;AAAA;AAAA;AA3C+GA,MAAAA,EA4C3G,uEADJ;AAAA;;AAAA;AA3C+GA,MAAAA,EAmD3F,sCARpB;AAAA;AAAA;AAAA,eAU0CF,EAAE,CAAC6E,OAV7C;AAAA;AAAA;AAAA;;AAWA;AAAA,qDAtD+G3E,EAsD/G,mBAA2FkE,qBAA3F,EAA8H,CAAC;AACnHT,IAAAA,IAAI,EAAExD,SAD6G;AAEnHyD,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,gBADX;AAECC,MAAAA,QAAQ,EAAE,cAFX;AAGCC,MAAAA,QAAQ,EAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAbmB;AAcCC,MAAAA,eAAe,EAAE5D,uBAAuB,CAAC6D,MAd1C;AAeCC,MAAAA,mBAAmB,EAAE,KAftB;AAgBCC,MAAAA,IAAI,EAAE;AACF,8BAAsB,MADpB;AAEF,mCAA2B,eAFzB;AAGF,0CAAkC;AAHhC;AAhBP,KAAD;AAF6G,GAAD,CAA9H,QAwB4B;AAAEE,IAAAA,WAAW,EAAE,CAAC;AAC5BV,MAAAA,IAAI,EAAEtD;AADsB,KAAD,CAAf;AAEZiE,IAAAA,SAAS,EAAE,CAAC;AACZX,MAAAA,IAAI,EAAEtD;AADM,KAAD,CAFC;AAIZkE,IAAAA,OAAO,EAAE,CAAC;AACVZ,MAAAA,IAAI,EAAEtD;AADI,KAAD,CAJG;AAMZmE,IAAAA,YAAY,EAAE,CAAC;AACfb,MAAAA,IAAI,EAAEtD;AADS,KAAD;AANF,GAxB5B;AAAA;AAkCA;AACA;AACA;AACA;;;AACA,MAAMyE,kCAAN,CAAyC;AACrCtC,EAAAA,WAAW,GAAG;AACV,SAAKgC,YAAL,GAAoB,KAApB;AACH;;AAHoC;;AAKzCM,kCAAkC,CAACtB,IAAnC;AAAA,mBAA+HsB,kCAA/H;AAAA;;AACAA,kCAAkC,CAACpB,IAAnC,kBAlG+GxD,EAkG/G;AAAA,QAAmH4E,kCAAnH;AAAA;AAAA;AAAA;AAAA;AAlG+G5E,MAAAA,EAkG/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlG+GA,MAAAA,EAmG3G,qBADJ;AAAA;;AAAA;AAlG+GA,MAAAA,EAmGrG,8GADV;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA,qDArG+GA,EAqG/G,mBAA2F4E,kCAA3F,EAA2I,CAAC;AAChInB,IAAAA,IAAI,EAAExD,SAD0H;AAEhIyD,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,gCADX;AAECE,MAAAA,QAAQ,EAAG;AAC/B;AACA,GAJmB;AAKCC,MAAAA,eAAe,EAAE5D,uBAAuB,CAAC6D,MAL1C;AAMCC,MAAAA,mBAAmB,EAAE,KANtB;AAOCC,MAAAA,IAAI,EAAE;AACF,4CAAqC,cADnC;AAEF,oDAA6C,2BAF3C;AAGF,0DAAmD,+BAHjD;AAIF,qDAA8C,mDAJ5C;AAKF,qCAA8B,eAL5B;AAMF,6CAAsC,4BANpC;AAOF,mDAA4C,gCAP1C;AAQF,8CAAuC;AARrC;AAPP,KAAD;AAF0H,GAAD,CAA3I,QAoB4B;AAAEK,IAAAA,YAAY,EAAE,CAAC;AAC7Bb,MAAAA,IAAI,EAAEtD;AADuB,KAAD,CAAhB;AAEZ0E,IAAAA,SAAS,EAAE,CAAC;AACZpB,MAAAA,IAAI,EAAEtD;AADM,KAAD,CAFC;AAIZ2E,IAAAA,aAAa,EAAE,CAAC;AAChBrB,MAAAA,IAAI,EAAEtD;AADU,KAAD,CAJH;AAMZ4E,IAAAA,UAAU,EAAE,CAAC;AACbtB,MAAAA,IAAI,EAAEtD;AADO,KAAD,CANA;AAQZ6E,IAAAA,iBAAiB,EAAE,CAAC;AACpBvB,MAAAA,IAAI,EAAEtD;AADc,KAAD;AARP,GApB5B;AAAA;AAgCA;AACA;AACA;AACA;;;AACA,MAAM8E,2BAAN,CAAkC;AAC9B3C,EAAAA,WAAW,GAAG;AACV,SAAKgC,YAAL,GAAoB,KAApB;AACH;;AACiB,MAAdY,cAAc,GAAG;AACjB,WAAO,CAAC,KAAKC,MAAN,IAAgB,CAAC,CAAC,KAAKC,UAA9B;AACH;;AACmB,MAAhBC,gBAAgB,GAAG;AACnB,WAAO,CAAC,KAAKF,MAAN,IAAgB,CAAC,KAAKC,UAA7B;AACH;;AACiB,MAAdE,cAAc,GAAG;AACjB,WAAO,CAAC,CAAC,KAAKC,UAAP,IAAqB,CAAC,KAAKJ,MAAlC;AACH;;AACkB,MAAfK,eAAe,GAAG;AAClB,WAAO,CAAC,KAAKD,UAAN,IAAoB,CAAC,KAAKJ,MAAjC;AACH;;AAf6B;;AAiBlCF,2BAA2B,CAAC3B,IAA5B;AAAA,mBAAwH2B,2BAAxH;AAAA;;AACAA,2BAA2B,CAACzB,IAA5B,kBA3J+GxD,EA2J/G;AAAA,QAA4GiF,2BAA5G;AAAA;AAAA;AAAA;AAAA;AA3J+GjF,MAAAA,EA2J/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3J+GA,MAAAA,EA4J3G,4FADJ;AA3J+GA,MAAAA,EAwK3G,4FAbJ;AA3J+GA,MAAAA,EAqL3G,iGArL2GA,EAqL3G,wBA1BJ;AAAA;;AAAA;AA3J+GA,MAAAA,EA4J5F,yCADnB;AA3J+GA,MAAAA,EAwK5F,aAbnB;AA3J+GA,MAAAA,EAwK5F,mCAbnB;AAAA;AAAA;AAAA,eA6B0CF,EAAE,CAAC2F,IA7B7C,EA6B2HvE,EAAE,CAACwE,+BA7B9H,EA6B0TtE,EAAE,CAACuE,eA7B7T;AAAA;AAAA;AAAA;;AA8BA;AAAA,qDAzL+G3F,EAyL/G,mBAA2FiF,2BAA3F,EAAoI,CAAC;AACzHxB,IAAAA,IAAI,EAAExD,SADmH;AAEzHyD,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,uBADX;AAECE,MAAAA,QAAQ,EAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GA/BmB;AAgCCC,MAAAA,eAAe,EAAE5D,uBAAuB,CAAC6D,MAhC1C;AAiCCC,MAAAA,mBAAmB,EAAE,KAjCtB;AAkCCC,MAAAA,IAAI,EAAE;AACF,4CAAoC,cADlC;AAEF,iDAAyC,wBAFvC;AAGF,iDAAyC,gCAHvC;AAIF,kDAA0C,iCAJxC;AAKF,qCAA6B,eAL3B;AAMF,0CAAkC,yBANhC;AAOF,0CAAkC,iCAPhC;AAQF,2CAAmC;AARjC;AAlCP,KAAD;AAFmH,GAAD,CAApI,QA+C4B;AAAE2B,IAAAA,YAAY,EAAE,CAAC;AAC7BnC,MAAAA,IAAI,EAAEtD;AADuB,KAAD,CAAhB;AAEZiF,IAAAA,UAAU,EAAE,CAAC;AACb3B,MAAAA,IAAI,EAAEtD;AADO,KAAD,CAFA;AAIZ0F,IAAAA,cAAc,EAAE,CAAC;AACjBpC,MAAAA,IAAI,EAAEtD;AADW,KAAD,CAJJ;AAMZmE,IAAAA,YAAY,EAAE,CAAC;AACfb,MAAAA,IAAI,EAAEtD;AADS,KAAD,CANF;AAQZ2F,IAAAA,OAAO,EAAE,CAAC;AACVrC,MAAAA,IAAI,EAAEtD;AADI,KAAD,CARG;AAUZgF,IAAAA,MAAM,EAAE,CAAC;AACT1B,MAAAA,IAAI,EAAEtD;AADG,KAAD,CAVI;AAYZ4F,IAAAA,SAAS,EAAE,CAAC;AACZtC,MAAAA,IAAI,EAAEtD;AADM,KAAD,CAZC;AAcZoF,IAAAA,UAAU,EAAE,CAAC;AACb9B,MAAAA,IAAI,EAAEtD;AADO,KAAD;AAdA,GA/C5B;AAAA;AAiEA;AACA;AACA;AACA;;;AACA,MAAM6F,wBAAN,CAA+B;AAC3B1D,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAK0D,YAAL,GAAoB,IAApB;AACA,SAAKC,UAAL,GAAkB,KAAlB,CAHa,CAIb;;AACA,SAAKC,aAAL,GAAqB,IAArB;AACH;;AACe,MAAZC,YAAY,GAAG;AACf,WAAO,KAAKC,SAAL,IAAkB,CAAC,KAAKtB,UAAxB,GAAqC,IAArC,GAA4C,IAAnD;AACH;;AACe,MAAZuB,YAAY,GAAG;AACf,WAAO,KAAKC,SAAL,GAAiB,KAAKC,WAAtB,GAAoC,EAA3C;AACH;;AACiB,MAAdlB,cAAc,GAAG;AACjB,WAAO,KAAKC,UAAL,IAAmB,CAAC,KAAKJ,MAAhC;AACH;;AACkB,MAAfK,eAAe,GAAG;AAClB,WAAO,CAAC,KAAKD,UAAN,IAAoB,CAAC,KAAKJ,MAAjC;AACH;;AACDxC,EAAAA,WAAW,CAAC6B,OAAD,EAAU;AACjB,UAAM;AAAE2B,MAAAA,aAAF;AAAiBM,MAAAA;AAAjB,QAAkCjC,OAAxC;;AACA,QAAI2B,aAAa,IAAIM,YAArB,EAAmC;AAC/B,WAAKlE,GAAL,CAASc,YAAT;AACH;AACJ;;AAzB0B;;AA2B/B2C,wBAAwB,CAAC1C,IAAzB;AAAA,mBAAqH0C,wBAArH,EAzR+GhG,EAyR/G,mBAA+JA,EAAE,CAACuD,iBAAlK;AAAA;;AACAyC,wBAAwB,CAACxC,IAAzB,kBA1R+GxD,EA0R/G;AAAA,QAAyGgG,wBAAzG;AAAA;AAAA;AAAA;AAAA;AA1R+GhG,MAAAA,EA0R/G;AA1R+GA,MAAAA,EA0R/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA1R+GA,EA0R/G;AAAA;AAAA;AAAA;AAAA;AAAA;AA1R+GA,MAAAA,EA2R3G,uFADJ;AA1R+GA,MAAAA,EA+R3G,yFALJ;AAAA;;AAAA;AA1R+GA,MAAAA,EA4RzG,6EA5RyGA,EA4RzG,0DAFN;AA1R+GA,MAAAA,EA+R5F,aALnB;AA1R+GA,MAAAA,EA+R5F,sCALnB;AAAA;AAAA;AAAA,eA8B0CqC,4BA9B1C,EA8BuNvC,EAAE,CAAC4G,gBA9B1N,EA8B+U5G,EAAE,CAAC2F,IA9BlV,EA8BgarE,EAAE,CAACuE,eA9Bna;AAAA,UA8BilB7E,EAAE,CAAC6F,eA9BplB;AAAA;AAAA;AAAA;;AA+BA;AAAA,qDAzT+G3G,EAyT/G,mBAA2FgG,wBAA3F,EAAiI,CAAC;AACtHvC,IAAAA,IAAI,EAAExD,SADgH;AAEtHyD,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,oBADX;AAECE,MAAAA,QAAQ,EAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAhCmB;AAiCCC,MAAAA,eAAe,EAAE5D,uBAAuB,CAAC6D,MAjC1C;AAkCCC,MAAAA,mBAAmB,EAAE,KAlCtB;AAmCCC,MAAAA,IAAI,EAAE;AACF,wBAAgB,OADd;AAEF,4BAAoB,cAFlB;AAGF,+BAAuB,cAHrB;AAIF,6BAAqB,cAJnB;AAKF,wDAAiD,YAL/C;AAMF,6DAAsD,8BANpD;AAOF,8DAAuD,+BAPrD;AAQF,iDAA0C,0BARxC;AASF,iDAA0C,aATxC;AAUF,sDAA+C,+BAV7C;AAWF,uDAAgD,gCAX9C;AAYF,0CAAmC;AAZjC;AAnCP,KAAD;AAFgH,GAAD,CAAjI,EAoD4B,YAAY;AAAE,WAAO,CAAC;AAAER,MAAAA,IAAI,EAAEzD,EAAE,CAACuD;AAAX,KAAD,CAAP;AAA0C,GApDpF,EAoDsG;AAAEiD,IAAAA,WAAW,EAAE,CAAC;AACtG/C,MAAAA,IAAI,EAAEtD;AADgG,KAAD,CAAf;AAEtF8F,IAAAA,YAAY,EAAE,CAAC;AACfxC,MAAAA,IAAI,EAAEtD;AADS,KAAD,CAFwE;AAItFkG,IAAAA,SAAS,EAAE,CAAC;AACZ5C,MAAAA,IAAI,EAAEtD;AADM,KAAD,CAJ2E;AAMtFyG,IAAAA,QAAQ,EAAE,CAAC;AACXnD,MAAAA,IAAI,EAAEtD;AADK,KAAD,CAN4E;AAQtF+F,IAAAA,UAAU,EAAE,CAAC;AACbzC,MAAAA,IAAI,EAAEtD;AADO,KAAD,CAR0E;AAUtF2F,IAAAA,OAAO,EAAE,CAAC;AACVrC,MAAAA,IAAI,EAAEtD;AADI,KAAD,CAV6E;AAYtF0G,IAAAA,IAAI,EAAE,CAAC;AACPpD,MAAAA,IAAI,EAAEtD;AADC,KAAD,CAZgF;AActF2G,IAAAA,KAAK,EAAE,CAAC;AACRrD,MAAAA,IAAI,EAAEtD;AADE,KAAD,CAd+E;AAgBtF4F,IAAAA,SAAS,EAAE,CAAC;AACZtC,MAAAA,IAAI,EAAEtD;AADM,KAAD,CAhB2E;AAkBtF4G,IAAAA,UAAU,EAAE,CAAC;AACbtD,MAAAA,IAAI,EAAEtD;AADO,KAAD,CAlB0E;AAoBtF4E,IAAAA,UAAU,EAAE,CAAC;AACbtB,MAAAA,IAAI,EAAEtD;AADO,KAAD,CApB0E;AAsBtFoG,IAAAA,SAAS,EAAE,CAAC;AACZ9C,MAAAA,IAAI,EAAEtD;AADM,KAAD,CAtB2E;AAwBtFoF,IAAAA,UAAU,EAAE,CAAC;AACb9B,MAAAA,IAAI,EAAEtD;AADO,KAAD,CAxB0E;AA0BtFgF,IAAAA,MAAM,EAAE,CAAC;AACT1B,MAAAA,IAAI,EAAEtD;AADG,KAAD,CA1B8E;AA4BtFgG,IAAAA,aAAa,EAAE,CAAC;AAChB1C,MAAAA,IAAI,EAAEtD;AADU,KAAD,CA5BuE;AA8BtFsG,IAAAA,YAAY,EAAE,CAAC;AACfhD,MAAAA,IAAI,EAAEtD;AADS,KAAD;AA9BwE,GApDtG;AAAA;;AAsFA,MAAM6G,0BAAN,CAAiC;AAC7B1E,EAAAA,WAAW,CAAC2E,aAAD,EAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,UAAlC,EAA8C7E,GAA9C,EAAmD8E,WAAnD,EAAgE;AACvE,SAAKJ,aAAL,GAAqBA,aAArB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAK7E,GAAL,GAAWA,GAAX;AACA,SAAK8E,WAAL,GAAmBA,WAAnB;AACA;AACR;AACA;;AACQ,SAAKR,IAAL,GAAY,EAAZ;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKf,SAAL,GAAiB,KAAjB;AACA,SAAKgB,UAAL,GAAkB,KAAlB;AACA,SAAKhC,UAAL,GAAkB,KAAlB;AACA,SAAKwB,SAAL,GAAiB,KAAjB;AACA,SAAKe,OAAL,GAAe,EAAf;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACA,SAAKC,aAAL,GAAqB,KAArB;AACA,SAAKnD,YAAL,GAAoB,KAApB;AACA,SAAKoD,UAAL,GAAkB,KAAlB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,OAAL,GAAe,IAAI1H,YAAJ,EAAf;AACA,SAAK2H,UAAL,GAAkB,IAAI3H,YAAJ,EAAlB;AACA,SAAK4H,aAAL,GAAqB,IAAI5H,YAAJ,EAArB;AACA,SAAK6H,gBAAL,GAAwB,IAAI7H,YAAJ,EAAxB;AACA,SAAK8H,cAAL,GAAsB,IAAI9H,YAAJ,EAAtB;AACA,SAAK+H,aAAL,GAAqB,IAAI/H,YAAJ,EAArB;AACA,SAAKgI,aAAL,GAAqB,IAAIhI,YAAJ,EAArB;AACA,SAAKiI,YAAL,GAAoB,IAAIjI,YAAJ,EAApB;AACA,SAAKkI,aAAL,GAAqB,IAAIlI,YAAJ,EAArB;AACA,SAAKmI,QAAL,GAAgB,IAAInI,YAAJ,EAAhB;AACA,SAAKoI,WAAL,GAAmB,IAAIpI,YAAJ,EAAnB;AACA;AACR;AACA;;AACQ,SAAKqI,QAAL,GAAgB,IAAIlH,OAAJ,EAAhB;AACA,SAAKmH,OAAL,GAAe,CAAf;AACA,SAAKC,YAAL,GAAoB;AAChB,SAAG,WADa;AAEhB,SAAG,sBAFa;AAGhB,YAAM;AAHU,KAApB;AAKA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKzC,aAAL,GAAqB,KAArB;AACH;AACD;AACJ;AACA;;;AACoB,MAAZ0C,YAAY,GAAG;AACf;AACA,WAAO,KAAKjB,aAAL,IAAsB,KAAKJ,eAA3B,IAA8C,CAAC,KAAKjB,SAApD,IAAiE,CAAC,KAAKhB,UAAvE,IAAqF,KAAKuD,OAA1F,GACD,MADC,GAED,EAFN;AAGH;;AACiB,MAAdxD,cAAc,GAAG;AACjB,WAAO,KAAKC,UAAL,IAAmB,CAAC,KAAKJ,MAAhC;AACH;;AACkB,MAAfK,eAAe,GAAG;AAClB,WAAO,CAAC,KAAKD,UAAN,IAAoB,CAAC,KAAKJ,MAAjC;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACI4D,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACfA,IAAAA,KAAK,CAACC,cAAN;;AACA,QAAI,CAAC,KAAKlD,SAAN,IAAmB,CAAC,KAAKZ,MAA7B,EAAqC;AACjC;AACA,UAAI,KAAK+D,WAAL,IAAoB,KAAKC,UAAL,CAAgBC,QAAhB,CAAyBC,MAAzB,KAAoC,CAAxD,IAA6D,CAAC,KAAK9D,UAAvE,EAAmF;AAC/E,aAAK4D,UAAL,CAAgBpD,SAAhB,GAA4B,IAA5B;AACH;;AACD,WAAKoD,UAAL,CAAgBG,WAAhB,CAA4B,CAAC,KAAK/D,UAAlC;AACH;;AACD,SAAK0B,aAAL,CAAmBsC,mBAAnB,CAAuC,KAAKJ,UAA5C;AACA,UAAMK,SAAS,GAAG,KAAKvC,aAAL,CAAmBwC,WAAnB,CAA+B,QAA/B,EAAyC,KAAKN,UAA9C,EAA0DH,KAA1D,CAAlB;AACA,SAAKd,cAAL,CAAoBwB,IAApB,CAAyBF,SAAzB;AACH;;AACDG,EAAAA,WAAW,CAACX,KAAD,EAAQ;AACfA,IAAAA,KAAK,CAACC,cAAN;;AACA,QAAI,KAAKW,YAAL,IAAqB,CAAC,KAAK7E,UAA/B,EAA2C;AACvC,WAAKoE,UAAL,CAAgBpC,UAAhB,GAA6B,CAAC,KAAKoC,UAAL,CAAgBpC,UAA9C;AACH;;AACD,SAAKE,aAAL,CAAmB4C,mBAAnB,CAAuC,KAAKV,UAA5C;AACA,UAAMK,SAAS,GAAG,KAAKvC,aAAL,CAAmBwC,WAAnB,CAA+B,OAA/B,EAAwC,KAAKN,UAA7C,EAAyDH,KAAzD,CAAlB;AACA,SAAKlB,OAAL,CAAa4B,IAAb,CAAkBF,SAAlB;AACH;;AACDM,EAAAA,QAAQ,CAACd,KAAD,EAAQ;AACZA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMO,SAAS,GAAG,KAAKvC,aAAL,CAAmBwC,WAAnB,CAA+B,UAA/B,EAA2C,KAAKN,UAAhD,EAA4DH,KAA5D,CAAlB;AACA,SAAKjB,UAAL,CAAgB2B,IAAhB,CAAqBF,SAArB;AACH;;AACDO,EAAAA,WAAW,CAACf,KAAD,EAAQ;AACfA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMO,SAAS,GAAG,KAAKvC,aAAL,CAAmBwC,WAAnB,CAA+B,aAA/B,EAA8C,KAAKN,UAAnD,EAA+DH,KAA/D,CAAlB;AACA,SAAKhB,aAAL,CAAmB0B,IAAnB,CAAwBF,SAAxB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIQ,EAAAA,aAAa,CAAChB,KAAD,EAAQ;AACjBA,IAAAA,KAAK,CAACC,cAAN,GADiB,CAEjB;;AACA,QAAI,KAAKlE,UAAL,IAAmB,KAAKC,iBAA5B,EAA+C;AAC3C;AACH;;AACD,SAAKmE,UAAL,CAAgBtE,SAAhB,GAA4B,CAAC,KAAKsE,UAAL,CAAgBtE,SAA7C;AACA,SAAKsE,UAAL,CAAgBrE,aAAhB,GAAgC,KAAhC;AACA,SAAKmC,aAAL,CAAmBgD,kBAAnB,CAAsC,KAAKd,UAA3C;AACA,UAAMK,SAAS,GAAG,KAAKvC,aAAL,CAAmBwC,WAAnB,CAA+B,OAA/B,EAAwC,KAAKN,UAA7C,EAAyDH,KAAzD,CAAlB;AACA,SAAKf,gBAAL,CAAsByB,IAAtB,CAA2BF,SAA3B;AACH;;AACDU,EAAAA,cAAc,GAAG;AACb,UAAMC,SAAS,GAAG,CAAC,mBAAD,EAAsB,sBAAtB,EAA8C,WAA9C,EAA2D,aAA3D,CAAlB;AACAA,IAAAA,SAAS,CAACC,OAAV,CAAkBC,CAAC,IAAI;AACnB,WAAKlD,QAAL,CAAcmD,WAAd,CAA0B,KAAKlD,UAAL,CAAgBmD,aAA1C,EAAyDF,CAAzD;AACH,KAFD;AAGH;AACD;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,eAAe,CAACH,CAAD,EAAI;AACf,QAAI;AACA;AACA;AACAA,MAAAA,CAAC,CAACI,YAAF,CAAeC,OAAf,CAAuB,YAAvB,EAAqC,KAAKvB,UAAL,CAAgBwB,GAArD;AACH,KAJD,CAKA,OAAOC,KAAP,EAAc,CACV;AACH;;AACD,SAAK3D,aAAL,CAAmB4D,eAAnB,CAAmC,KAAK1B,UAAxC;AACA,SAAKP,WAAL,GAAmB,KAAKO,UAAL,CAAgBwB,GAAnC;AACA,UAAMnB,SAAS,GAAG,KAAKvC,aAAL,CAAmBwC,WAAnB,CAA+B,WAA/B,EAA4C,KAAKN,UAAjD,EAA6DkB,CAA7D,CAAlB;AACA,SAAKlC,aAAL,CAAmBuB,IAAnB,CAAwBF,SAAxB;AACH;;AACDsB,EAAAA,eAAe,CAACT,CAAD,EAAI;AACf,QAAIU,EAAJ;;AACAV,IAAAA,CAAC,CAACpB,cAAF,GAFe,CAGf;;AACA,SAAK9C,aAAL,GAAqB,KAAKgD,UAAL,CAAgBwB,GAAhB,MAAyB,CAACI,EAAE,GAAG,KAAK9D,aAAL,CAAmB+D,eAAnB,EAAN,MAAgD,IAAhD,IAAwDD,EAAE,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,EAAE,CAACJ,GAA7G,CAArB;AACA,SAAK9H,eAAL,CAAqB,CAArB;AACA,SAAKqE,MAAL,CAAY+D,GAAZ,CAAgB,MAAM;AAClB,YAAMzB,SAAS,GAAG,KAAKvC,aAAL,CAAmBwC,WAAnB,CAA+B,WAA/B,EAA4C,KAAKN,UAAjD,EAA6DkB,CAA7D,CAAlB;AACA,WAAKjC,aAAL,CAAmBsB,IAAnB,CAAwBF,SAAxB;AACH,KAHD;AAIH;;AACD0B,EAAAA,cAAc,CAACb,CAAD,EAAI;AACdA,IAAAA,CAAC,CAACpB,cAAF;AACA,UAAMnG,YAAY,GAAG,KAAKmE,aAAL,CAAmBkE,gBAAnB,CAAoCd,CAApC,CAArB;;AACA,QAAI,KAAK3B,OAAL,KAAiB5F,YAArB,EAAmC;AAC/B,WAAKoH,cAAL;AACA,WAAKrH,eAAL,CAAqBC,YAArB,EAF+B,CAG/B;;AACA,UAAI,EAAE,KAAK4F,OAAL,KAAiB,CAAjB,IAAsB,KAAKvD,MAA7B,CAAJ,EAA0C;AACtC,aAAKgC,QAAL,CAAciE,QAAd,CAAuB,KAAKhE,UAAL,CAAgBmD,aAAvC,EAAsD,KAAK5B,YAAL,CAAkB,KAAKD,OAAvB,CAAtD;AACA,aAAKvB,QAAL,CAAciE,QAAd,CAAuB,KAAKhE,UAAL,CAAgBmD,aAAvC,EAAsD,aAAtD;AACH;AACJ;;AACD,UAAMf,SAAS,GAAG,KAAKvC,aAAL,CAAmBwC,WAAnB,CAA+B,UAA/B,EAA2C,KAAKN,UAAhD,EAA4DkB,CAA5D,CAAlB;AACA,SAAKhC,YAAL,CAAkBqB,IAAlB,CAAuBF,SAAvB;AACH;;AACD6B,EAAAA,eAAe,CAAChB,CAAD,EAAI;AACfA,IAAAA,CAAC,CAACpB,cAAF;AACA,SAAKpG,eAAL,CAAqB,CAArB;AACA,SAAKqH,cAAL;AACA,UAAMV,SAAS,GAAG,KAAKvC,aAAL,CAAmBwC,WAAnB,CAA+B,WAA/B,EAA4C,KAAKN,UAAjD,EAA6DkB,CAA7D,CAAlB;AACA,SAAK/B,aAAL,CAAmBoB,IAAnB,CAAwBF,SAAxB;AACH;;AACD8B,EAAAA,cAAc,CAACjB,CAAD,EAAI;AACdA,IAAAA,CAAC,CAACpB,cAAF;AACAoB,IAAAA,CAAC,CAACkB,eAAF;AACA,SAAKrE,MAAL,CAAY+D,GAAZ,CAAgB,MAAM;AAClB,WAAK9E,aAAL,GAAqB,KAArB;AACA,WAAK+D,cAAL;AACA,YAAMsB,IAAI,GAAG,KAAKvE,aAAL,CAAmB+D,eAAnB,EAAb;;AACA,UAAI,CAACQ,IAAD,IAAUA,IAAI,IAAIA,IAAI,CAACb,GAAL,KAAa,KAAKxB,UAAL,CAAgBwB,GAA/C,IAAwD,KAAKjC,OAAL,KAAiB,CAAjB,IAAsB,KAAKvD,MAAvF,EAAgG;AAC5F;AACH,OANiB,CAOlB;;;AACA,YAAMsG,SAAS,GAAG,KAAKxE,aAAL,CAAmBwC,WAAnB,CAA+B,MAA/B,EAAuC,KAAKN,UAA5C,EAAwDkB,CAAxD,CAAlB;AACA,YAAMqB,YAAY,GAAG,KAAKzE,aAAL,CAAmBwC,WAAnB,CAA+B,SAA/B,EAA0C,KAAKN,UAA/C,EAA2DkB,CAA3D,CAArB;;AACA,UAAI,KAAKsB,YAAT,EAAuB;AACnB,aAAKA,YAAL,CAAkB;AACdC,UAAAA,QAAQ,EAAE,KAAK3E,aAAL,CAAmB+D,eAAnB,EADI;AAEdQ,UAAAA,IAAI,EAAE,KAAKrC,UAFG;AAGd0C,UAAAA,GAAG,EAAE,KAAKnD;AAHI,SAAlB,EAIGoD,SAJH,CAIcC,OAAD,IAAa;AACtB,cAAIA,OAAJ,EAAa;AACT,iBAAK9E,aAAL,CAAmB+E,YAAnB,CAAgC,KAAK7C,UAArC,EAAiD,KAAKT,OAAtD;AACH;;AACD,eAAKH,QAAL,CAAcmB,IAAd,CAAmB+B,SAAnB;AACA,eAAKjD,WAAL,CAAiBkB,IAAjB,CAAsBgC,YAAtB;AACH,SAVD;AAWH,OAZD,MAaK,IAAI,KAAKvC,UAAT,EAAqB;AACtB,aAAKlC,aAAL,CAAmB+E,YAAnB,CAAgC,KAAK7C,UAArC,EAAiD,KAAKT,OAAtD;AACA,aAAKH,QAAL,CAAcmB,IAAd,CAAmB+B,SAAnB;AACH;AACJ,KA3BD;AA4BH;;AACDQ,EAAAA,aAAa,CAAC5B,CAAD,EAAI;AACbA,IAAAA,CAAC,CAACpB,cAAF;AACA,SAAK/B,MAAL,CAAY+D,GAAZ,CAAgB,MAAM;AAClB;AACA,UAAI,CAAC,KAAKU,YAAV,EAAwB;AACpB;AACA,aAAK/C,WAAL,GAAmB,IAAnB;AACA,cAAMY,SAAS,GAAG,KAAKvC,aAAL,CAAmBwC,WAAnB,CAA+B,SAA/B,EAA0C,KAAKN,UAA/C,EAA2DkB,CAA3D,CAAlB;AACA,aAAK7B,WAAL,CAAiBkB,IAAjB,CAAsBF,SAAtB;AACH;AACJ,KARD;AASH;AACD;AACJ;AACA;;;AACI0C,EAAAA,aAAa,GAAG;AACZ,SAAKhF,MAAL,CAAYiF,iBAAZ,CAA8B,MAAM;AAChC,UAAI,KAAKtE,WAAT,EAAsB;AAClB,cAAM0C,aAAa,GAAG,KAAKnD,UAAL,CAAgBmD,aAAtC;AACA,aAAK9B,QAAL,GAAgB,IAAIlH,OAAJ,EAAhB;AACAC,QAAAA,SAAS,CAAC+I,aAAD,EAAgB,WAAhB,CAAT,CACK6B,IADL,CACU3K,SAAS,CAAC,KAAKgH,QAAN,CADnB,EAEKqD,SAFL,CAEgBzB,CAAD,IAAO,KAAKG,eAAL,CAAqBH,CAArB,CAFtB;AAGA7I,QAAAA,SAAS,CAAC+I,aAAD,EAAgB,WAAhB,CAAT,CACK6B,IADL,CACU3K,SAAS,CAAC,KAAKgH,QAAN,CADnB,EAEKqD,SAFL,CAEgBzB,CAAD,IAAO,KAAKS,eAAL,CAAqBT,CAArB,CAFtB;AAGA7I,QAAAA,SAAS,CAAC+I,aAAD,EAAgB,UAAhB,CAAT,CACK6B,IADL,CACU3K,SAAS,CAAC,KAAKgH,QAAN,CADnB,EAEKqD,SAFL,CAEgBzB,CAAD,IAAO,KAAKa,cAAL,CAAoBb,CAApB,CAFtB;AAGA7I,QAAAA,SAAS,CAAC+I,aAAD,EAAgB,WAAhB,CAAT,CACK6B,IADL,CACU3K,SAAS,CAAC,KAAKgH,QAAN,CADnB,EAEKqD,SAFL,CAEgBzB,CAAD,IAAO,KAAKgB,eAAL,CAAqBhB,CAArB,CAFtB;AAGA7I,QAAAA,SAAS,CAAC+I,aAAD,EAAgB,MAAhB,CAAT,CACK6B,IADL,CACU3K,SAAS,CAAC,KAAKgH,QAAN,CADnB,EAEKqD,SAFL,CAEgBzB,CAAD,IAAO,KAAKiB,cAAL,CAAoBjB,CAApB,CAFtB;AAGA7I,QAAAA,SAAS,CAAC+I,aAAD,EAAgB,SAAhB,CAAT,CACK6B,IADL,CACU3K,SAAS,CAAC,KAAKgH,QAAN,CADnB,EAEKqD,SAFL,CAEgBzB,CAAD,IAAO,KAAK4B,aAAL,CAAmB5B,CAAnB,CAFtB;AAGH,OArBD,MAsBK;AACD,aAAK5B,QAAL,CAAc4D,IAAd;AACA,aAAK5D,QAAL,CAAc6D,QAAd;AACH;AACJ,KA3BD;AA4BH;;AACDjJ,EAAAA,YAAY,GAAG;AACX,SAAKd,GAAL,CAASc,YAAT;AACH;;AACDkJ,EAAAA,QAAQ,GAAG;AACP,SAAKpD,UAAL,CAAgBqD,SAAhB,GAA4B,IAA5B;AACA,SAAKtF,MAAL,CAAYiF,iBAAZ,CAA8B,MAAM;AAChC3K,MAAAA,SAAS,CAAC,KAAK4F,UAAL,CAAgBmD,aAAjB,EAAgC,WAAhC,CAAT,CACK6B,IADL,CACU3K,SAAS,CAAC,KAAKgH,QAAN,CADnB,EAEKqD,SAFL,CAEe9C,KAAK,IAAI;AACpB,YAAI,KAAK1E,YAAT,EAAuB;AACnB0E,UAAAA,KAAK,CAACC,cAAN;AACH;AACJ,OAND;AAOH,KARD;AASH;;AACDtG,EAAAA,WAAW,CAAC6B,OAAD,EAAU;AACjB,UAAM;AAAEqD,MAAAA;AAAF,QAAkBrD,OAAxB;;AACA,QAAIqD,WAAJ,EAAiB;AACb,WAAKqE,aAAL;AACH;AACJ;;AACDO,EAAAA,WAAW,GAAG;AACV,SAAKhE,QAAL,CAAc4D,IAAd;AACA,SAAK5D,QAAL,CAAc6D,QAAd;AACH;;AACDzJ,EAAAA,eAAe,CAACC,YAAD,EAAe;AAC1B,SAAKoE,MAAL,CAAY+D,GAAZ,CAAgB,MAAM;AAClB,UAAIF,EAAJ;;AACA,WAAK5E,aAAL,GAAqBrD,YAAY,KAAK,CAAtC;;AACA,UAAI,KAAKqG,UAAL,CAAgBwB,GAAhB,MAAyB,CAACI,EAAE,GAAG,KAAK9D,aAAL,CAAmB+D,eAAnB,EAAN,MAAgD,IAAhD,IAAwDD,EAAE,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,EAAE,CAACJ,GAA7G,KAAsH7H,YAAY,KAAK,CAAjB,IAAsB,KAAKqC,MAArJ,EAA8J;AAC1J;AACH;;AACD,WAAKuD,OAAL,GAAe5F,YAAf;AACA,WAAKP,GAAL,CAASc,YAAT;AACH,KARD;AASH;;AAjS4B;;AAmSjC2D,0BAA0B,CAAC1D,IAA3B;AAAA,mBAAuH0D,0BAAvH,EAlrB+GhH,EAkrB/G,mBAAmK2B,EAAE,CAACC,iBAAtK,GAlrB+G5B,EAkrB/G,mBAAoMA,EAAE,CAAC0M,MAAvM,GAlrB+G1M,EAkrB/G,mBAA0NA,EAAE,CAAC2M,SAA7N,GAlrB+G3M,EAkrB/G,mBAAmPA,EAAE,CAAC4M,UAAtP,GAlrB+G5M,EAkrB/G,mBAA6QA,EAAE,CAACuD,iBAAhR,GAlrB+GvD,EAkrB/G,mBAA8SgB,IAAI,CAAC6L,sBAAnT;AAAA;;AACA7F,0BAA0B,CAACxD,IAA3B,kBAnrB+GxD,EAmrB/G;AAAA,QAA2GgH,0BAA3G;AAAA;AAAA;AAAA;AAAA;AAnrB+GhH,MAAAA,EAmrB/G;AAnrB+GA,MAAAA,EAmrB/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAnrB+GA,EAmrB/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnrB+GA,MAAAA,EAorB3G,kCADJ;AAnrB+GA,MAAAA,EA0rB3G,6GAPJ;AAnrB+GA,MAAAA,EAssB3G,6GAnBJ;AAnrB+GA,MAAAA,EAgtB3G,2CA7BJ;AAnrB+GA,MAAAA,EAiuBzG;AAAA,eAAY,oBAAZ;AAAA;AAAA,eACS,uBADT;AAAA;AAAA,eAEe,uBAFf;AAAA,QA9CN;AAnrB+GA,MAAAA,EAouB1G,eAjDL;AAAA;;AAAA;AAnrB+GA,MAAAA,EAqrBzG,kIAFN;AAnrB+GA,MAAAA,EA2rBxG,aARP;AAnrB+GA,MAAAA,EA2rBxG,qCARP;AAnrB+GA,MAAAA,EAwsBxG,aArBP;AAnrB+GA,MAAAA,EAwsBxG,oCArBP;AAnrB+GA,MAAAA,EAitBzG,aA9BN;AAnrB+GA,MAAAA,EAitBzG,qdA9BN;AAAA;AAAA;AAAA,eAkD0CkE,qBAlD1C,EAkDoMe,2BAlDpM,EAkDwYL,kCAlDxY,EAkD6jBoB,wBAlD7jB,EAkD02BlG,EAAE,CAAC2F,IAlD72B;AAAA;AAAA;AAAA;;AAmDAnE,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEPsF,0BAA0B,CAAC8F,SAFpB,EAE+B,YAF/B,EAE6C,KAAK,CAFlD,CAAV;;AAGAxL,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEPsF,0BAA0B,CAAC8F,SAFpB,EAE+B,cAF/B,EAE+C,KAAK,CAFpD,CAAV;;AAGAxL,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEPsF,0BAA0B,CAAC8F,SAFpB,EAE+B,aAF/B,EAE8C,KAAK,CAFnD,CAAV;;AAGAxL,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEPsF,0BAA0B,CAAC8F,SAFpB,EAE+B,aAF/B,EAE8C,KAAK,CAFnD,CAAV;;AAGAxL,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEPsF,0BAA0B,CAAC8F,SAFpB,EAE+B,iBAF/B,EAEkD,KAAK,CAFvD,CAAV;;AAGAxL,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEPsF,0BAA0B,CAAC8F,SAFpB,EAE+B,eAF/B,EAEgD,KAAK,CAFrD,CAAV;;AAGAxL,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEPsF,0BAA0B,CAAC8F,SAFpB,EAE+B,cAF/B,EAE+C,KAAK,CAFpD,CAAV;;AAGAxL,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEPsF,0BAA0B,CAAC8F,SAFpB,EAE+B,YAF/B,EAE6C,KAAK,CAFlD,CAAV;;AAGA;AAAA,qDA9vB+G9M,EA8vB/G,mBAA2FgH,0BAA3F,EAAmI,CAAC;AACxHvD,IAAAA,IAAI,EAAExD,SADkH;AAExHyD,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,uBADX;AAECC,MAAAA,QAAQ,EAAE,mBAFX;AAGCC,MAAAA,QAAQ,EAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GArDmB;AAsDCC,MAAAA,eAAe,EAAE5D,uBAAuB,CAAC6D,MAtD1C;AAuDCC,MAAAA,mBAAmB,EAAE,KAvDtB;AAwDCC,MAAAA,IAAI,EAAE;AACF,4CAAqC,cADnC;AAEF,qDAA8C,4BAF5C;AAGF,0DAAmD,gCAHjD;AAIF,2DAAoD,iCAJlD;AAKF,6DAAsD,2BALpD;AAMF,mEAA4D,+BAN1D;AAOF,qDAA8C,4BAP5C;AAQF,oDAA6C,2BAR3C;AASF,qCAA8B,eAT5B;AAUF,8CAAuC,6BAVrC;AAWF,mDAA4C,iCAX1C;AAYF,oDAA6C,kCAZ3C;AAaF,sDAA+C,4BAb7C;AAcF,4DAAqD,gCAdnD;AAeF,8CAAuC,6BAfrC;AAgBF,6CAAsC,4BAhBpC;AAiBF,4BAAqB,gCAjBnB;AAkBF,2BAAmB;AAlBjB;AAxDP,KAAD;AAFkH,GAAD,CAAnI,EA+E4B,YAAY;AAChC,WAAO,CAAC;AAAER,MAAAA,IAAI,EAAE9B,EAAE,CAACC;AAAX,KAAD,EAAiC;AAAE6B,MAAAA,IAAI,EAAEzD,EAAE,CAAC0M;AAAX,KAAjC,EAAsD;AAAEjJ,MAAAA,IAAI,EAAEzD,EAAE,CAAC2M;AAAX,KAAtD,EAA8E;AAAElJ,MAAAA,IAAI,EAAEzD,EAAE,CAAC4M;AAAX,KAA9E,EAAuG;AAAEnJ,MAAAA,IAAI,EAAEzD,EAAE,CAACuD;AAAX,KAAvG,EAAuI;AAAEE,MAAAA,IAAI,EAAEzC,IAAI,CAAC6L,sBAAb;AAAqCE,MAAAA,UAAU,EAAE,CAAC;AAChLtJ,QAAAA,IAAI,EAAEpD;AAD0K,OAAD,EAEhL;AACCoD,QAAAA,IAAI,EAAEnD;AADP,OAFgL;AAAjD,KAAvI,CAAP;AAKH,GArFL,EAqFuB;AAAEuG,IAAAA,IAAI,EAAE,CAAC;AAChBpD,MAAAA,IAAI,EAAEtD;AADU,KAAD,CAAR;AAEP2G,IAAAA,KAAK,EAAE,CAAC;AACRrD,MAAAA,IAAI,EAAEtD;AADE,KAAD,CAFA;AAIP4F,IAAAA,SAAS,EAAE,CAAC;AACZtC,MAAAA,IAAI,EAAEtD;AADM,KAAD,CAJJ;AAMP4G,IAAAA,UAAU,EAAE,CAAC;AACbtD,MAAAA,IAAI,EAAEtD;AADO,KAAD,CANL;AAQP4E,IAAAA,UAAU,EAAE,CAAC;AACbtB,MAAAA,IAAI,EAAEtD;AADO,KAAD,CARL;AAUPoG,IAAAA,SAAS,EAAE,CAAC;AACZ9C,MAAAA,IAAI,EAAEtD;AADM,KAAD,CAVJ;AAYPoF,IAAAA,UAAU,EAAE,CAAC;AACb9B,MAAAA,IAAI,EAAEtD;AADO,KAAD,CAZL;AAcPgF,IAAAA,MAAM,EAAE,CAAC;AACT1B,MAAAA,IAAI,EAAEtD;AADG,KAAD,CAdD;AAgBP0E,IAAAA,SAAS,EAAE,CAAC;AACZpB,MAAAA,IAAI,EAAEtD;AADM,KAAD,CAhBJ;AAkBP2E,IAAAA,aAAa,EAAE,CAAC;AAChBrB,MAAAA,IAAI,EAAEtD;AADU,KAAD,CAlBR;AAoBP6E,IAAAA,iBAAiB,EAAE,CAAC;AACpBvB,MAAAA,IAAI,EAAEtD;AADc,KAAD,CApBZ;AAsBPyJ,IAAAA,YAAY,EAAE,CAAC;AACfnG,MAAAA,IAAI,EAAEtD;AADS,KAAD,CAtBP;AAwBP2I,IAAAA,OAAO,EAAE,CAAC;AACVrF,MAAAA,IAAI,EAAEtD;AADI,KAAD,CAxBF;AA0BPmH,IAAAA,OAAO,EAAE,CAAC;AACV7D,MAAAA,IAAI,EAAEtD;AADI,KAAD,CA1BF;AA4BPoH,IAAAA,KAAK,EAAE,CAAC;AACR9D,MAAAA,IAAI,EAAEtD;AADE,KAAD,CA5BA;AA8BPgJ,IAAAA,UAAU,EAAE,CAAC;AACb1F,MAAAA,IAAI,EAAEtD;AADO,KAAD,CA9BL;AAgCPiF,IAAAA,UAAU,EAAE,CAAC;AACb3B,MAAAA,IAAI,EAAEtD;AADO,KAAD,CAhCL;AAkCPyF,IAAAA,YAAY,EAAE,CAAC;AACfnC,MAAAA,IAAI,EAAEtD;AADS,KAAD,CAlCP;AAoCP6M,IAAAA,WAAW,EAAE,CAAC;AACdvJ,MAAAA,IAAI,EAAEtD;AADQ,KAAD,CApCN;AAsCP+I,IAAAA,WAAW,EAAE,CAAC;AACdzF,MAAAA,IAAI,EAAEtD;AADQ,KAAD,CAtCN;AAwCPqH,IAAAA,eAAe,EAAE,CAAC;AAClB/D,MAAAA,IAAI,EAAEtD;AADY,KAAD,CAxCV;AA0CPsH,IAAAA,aAAa,EAAE,CAAC;AAChBhE,MAAAA,IAAI,EAAEtD;AADU,KAAD,CA1CR;AA4CPmE,IAAAA,YAAY,EAAE,CAAC;AACfb,MAAAA,IAAI,EAAEtD;AADS,KAAD,CA5CP;AA8CPuH,IAAAA,UAAU,EAAE,CAAC;AACbjE,MAAAA,IAAI,EAAEtD;AADO,KAAD,CA9CL;AAgDP0F,IAAAA,cAAc,EAAE,CAAC;AACjBpC,MAAAA,IAAI,EAAEtD;AADW,KAAD,CAhDT;AAkDPwH,IAAAA,cAAc,EAAE,CAAC;AACjBlE,MAAAA,IAAI,EAAEtD;AADW,KAAD,CAlDT;AAoDPwL,IAAAA,YAAY,EAAE,CAAC;AACflI,MAAAA,IAAI,EAAEtD;AADS,KAAD,CApDP;AAsDPyH,IAAAA,aAAa,EAAE,CAAC;AAChBnE,MAAAA,IAAI,EAAEtD;AADU,KAAD,CAtDR;AAwDP0H,IAAAA,WAAW,EAAE,CAAC;AACdpE,MAAAA,IAAI,EAAEtD;AADQ,KAAD,CAxDN;AA0DP2H,IAAAA,OAAO,EAAE,CAAC;AACVrE,MAAAA,IAAI,EAAElD;AADI,KAAD,CA1DF;AA4DPwH,IAAAA,UAAU,EAAE,CAAC;AACbtE,MAAAA,IAAI,EAAElD;AADO,KAAD,CA5DL;AA8DPyH,IAAAA,aAAa,EAAE,CAAC;AAChBvE,MAAAA,IAAI,EAAElD;AADU,KAAD,CA9DR;AAgEP0H,IAAAA,gBAAgB,EAAE,CAAC;AACnBxE,MAAAA,IAAI,EAAElD;AADa,KAAD,CAhEX;AAkEP2H,IAAAA,cAAc,EAAE,CAAC;AACjBzE,MAAAA,IAAI,EAAElD;AADW,KAAD,CAlET;AAoEP4H,IAAAA,aAAa,EAAE,CAAC;AAChB1E,MAAAA,IAAI,EAAElD;AADU,KAAD,CApER;AAsEP6H,IAAAA,aAAa,EAAE,CAAC;AAChB3E,MAAAA,IAAI,EAAElD;AADU,KAAD,CAtER;AAwEP8H,IAAAA,YAAY,EAAE,CAAC;AACf5E,MAAAA,IAAI,EAAElD;AADS,KAAD,CAxEP;AA0EP+H,IAAAA,aAAa,EAAE,CAAC;AAChB7E,MAAAA,IAAI,EAAElD;AADU,KAAD,CA1ER;AA4EPgI,IAAAA,QAAQ,EAAE,CAAC;AACX9E,MAAAA,IAAI,EAAElD;AADK,KAAD,CA5EH;AA8EPiI,IAAAA,WAAW,EAAE,CAAC;AACd/E,MAAAA,IAAI,EAAElD;AADQ,KAAD;AA9EN,GArFvB;AAAA;AAuKA;AACA;AACA;AACA;;;AACA,MAAM0M,aAAN,SAA4BrL,iBAA5B,CAA8C;AAC1CU,EAAAA,WAAW,GAAG;AACV;AACH;;AAHyC;;AAK9C2K,aAAa,CAAC3J,IAAd;AAAA,mBAA0G2J,aAA1G;AAAA;;AACAA,aAAa,CAACC,KAAd,kBA/6B+GlN,EA+6B/G;AAAA,SAA8GiN,aAA9G;AAAA,WAA8GA,aAA9G;AAAA;;AACA;AAAA,qDAh7B+GjN,EAg7B/G,mBAA2FiN,aAA3F,EAAsH,CAAC;AAC3GxJ,IAAAA,IAAI,EAAEjD;AADqG,GAAD,CAAtH,EAE4B,YAAY;AAAE,WAAO,EAAP;AAAY,GAFtD;AAAA;;AAIA,SAAS2M,oBAAT,CAA8BC,kBAA9B,EAAkDC,WAAlD,EAA+D;AAC3D,SAAOD,kBAAkB,GAAGA,kBAAH,GAAwBC,WAAjD;AACH;;AACD,MAAMC,qBAAqB,GAAG,MAA9B;;AACA,MAAMC,eAAN,SAA8B1L,UAA9B,CAAyC;AACrC;AACAS,EAAAA,WAAW,CAAC2E,aAAD,EAAgBuG,eAAhB,EAAiCjL,GAAjC,EAAsCkL,cAAtC,EAAsDpG,WAAtD,EAAmE;AAC1E,UAAMJ,aAAN;AACA,SAAKuG,eAAL,GAAuBA,eAAvB;AACA,SAAKjL,GAAL,GAAWA,GAAX;AACA,SAAKkL,cAAL,GAAsBA,cAAtB;AACA,SAAKpG,WAAL,GAAmBA,WAAnB;AACA,SAAKqG,aAAL,GAAqBJ,qBAArB;AACA,SAAK5F,UAAL,GAAkB,KAAlB;AACA,SAAKF,eAAL,GAAuB,KAAvB;AACA,SAAKmG,WAAL,GAAmB,KAAnB;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKtJ,YAAL,GAAoB,KAApB;AACA,SAAKuJ,eAAL,GAAuB,KAAvB;AACA,SAAKjI,YAAL,GAAoB,IAApB;AACA,SAAKR,UAAL,GAAkB,KAAlB;AACA,SAAK4H,WAAL,GAAmB,KAAnB;AACA,SAAK9D,WAAL,GAAmB,KAAnB;AACA,SAAKrB,WAAL,GAAmB,KAAnB;AACA,SAAKiG,UAAL,GAAkB,KAAlB;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACA,SAAKC,oBAAL,GAA4B,GAA5B;AACA,SAAKC,oBAAL,GAA4B,EAA5B;AACA,SAAKC,eAAL,GAAuB,IAAvB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAK1G,aAAL,GAAqB,EAArB;AACA,SAAK2G,cAAL,GAAsB,EAAtB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,GAAL,GAAW,KAAX;AACA,SAAKC,oBAAL,GAA4B,IAAItO,YAAJ,EAA5B;AACA,SAAKuO,oBAAL,GAA4B,IAAIvO,YAAJ,EAA5B;AACA,SAAKwO,mBAAL,GAA2B,IAAIxO,YAAJ,EAA3B;AACA,SAAKyO,mBAAL,GAA2B,IAAIzO,YAAJ,EAA3B;AACA,SAAK0H,OAAL,GAAe,IAAI1H,YAAJ,EAAf;AACA,SAAK2H,UAAL,GAAkB,IAAI3H,YAAJ,EAAlB;AACA,SAAK4H,aAAL,GAAqB,IAAI5H,YAAJ,EAArB;AACA,SAAK6H,gBAAL,GAAwB,IAAI7H,YAAJ,EAAxB;AACA,SAAK8H,cAAL,GAAsB,IAAI9H,YAAJ,EAAtB;AACA,SAAK+H,aAAL,GAAqB,IAAI/H,YAAJ,EAArB;AACA,SAAKgI,aAAL,GAAqB,IAAIhI,YAAJ,EAArB;AACA,SAAKiI,YAAL,GAAoB,IAAIjI,YAAJ,EAApB;AACA,SAAKkI,aAAL,GAAqB,IAAIlI,YAAJ,EAArB;AACA,SAAKmI,QAAL,GAAgB,IAAInI,YAAJ,EAAhB;AACA,SAAKoI,WAAL,GAAmB,IAAIpI,YAAJ,EAAnB;AACA,SAAK0O,YAAL,GAAoB;AAChBC,MAAAA,KAAK,EAAE,CADS;AAEhBC,MAAAA,MAAM,EAAE,CAFQ;AAGhB5L,MAAAA,OAAO,EAAE,MAHO;AAIhB6L,MAAAA,QAAQ,EAAE,QAJM;AAKhBC,MAAAA,OAAO,EAAE,CALO;AAMhBC,MAAAA,MAAM,EAAE,CANQ;AAOhBC,MAAAA,OAAO,EAAE,CAPO;AAQhBC,MAAAA,MAAM,EAAE;AARQ,KAApB;AAUA,SAAKC,iBAAL,GAAyB;AACrBC,MAAAA,QAAQ,EAAE,UADW;AAErBC,MAAAA,aAAa,EAAE,MAFM;AAGrBC,MAAAA,UAAU,EAAE,QAHS;AAIrBT,MAAAA,MAAM,EAAE,CAJa;AAKrBC,MAAAA,QAAQ,EAAE;AALW,KAAzB;AAOA,SAAKxG,QAAL,GAAgB,IAAIlH,OAAJ,EAAhB;;AACA,SAAKmO,QAAL,GAAgB,MAAM,IAAtB;;AACA,SAAKC,SAAL,GAAiB,MAAM,IAAvB;AACH;;AACDC,EAAAA,UAAU,CAACC,KAAD,EAAQ;AACd,SAAKC,YAAL,CAAkBD,KAAlB;AACH;;AACDE,EAAAA,gBAAgB,CAACC,EAAD,EAAK;AACjB,SAAKN,QAAL,GAAgBM,EAAhB;AACH;;AACDC,EAAAA,iBAAiB,CAACD,EAAD,EAAK;AAClB,SAAKL,SAAL,GAAiBK,EAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,oBAAoB,CAAC1L,OAAD,EAAU;AAC1B,QAAI2L,sBAAsB,GAAG,KAA7B;AACA,QAAIC,SAAS,GAAG,KAAhB;AACA,UAAM;AAAEjC,MAAAA,MAAF;AAAUC,MAAAA,cAAV;AAA0BC,MAAAA,cAA1B;AAA0CC,MAAAA,aAA1C;AAAyDT,MAAAA,eAAzD;AAA0ED,MAAAA,WAA1E;AAAuFE,MAAAA,UAAvF;AAAmGlG,MAAAA;AAAnG,QAAqHpD,OAA3H;;AACA,QAAIoJ,WAAJ,EAAiB;AACbuC,MAAAA,sBAAsB,GAAG,IAAzB;AACAC,MAAAA,SAAS,GAAG,KAAKxC,WAAjB;AACH;;AACD,QAAIE,UAAJ,EAAgB;AACZ,WAAK7G,aAAL,CAAmBoJ,UAAnB,GAAgC,KAAKvC,UAArC;AACH;;AACD,QAAID,eAAJ,EAAqB;AACjB,WAAK5G,aAAL,CAAmBqJ,eAAnB,GAAqC,KAAKzC,eAA1C;AACH;;AACD,QAAIM,MAAJ,EAAY;AACR,WAAK2B,YAAL,CAAkB,KAAK3B,MAAvB;AACH;;AACD,QAAIG,aAAJ,EAAmB;AACf,WAAKiC,iBAAL,CAAuB,KAAKjC,aAA5B;AACH;;AACD,QAAIT,eAAJ,EAAqB;AACjB,WAAK0C,iBAAL,CAAuB,IAAvB;AACH;;AACD,QAAInC,cAAc,IAAIR,WAAtB,EAAmC;AAC/BuC,MAAAA,sBAAsB,GAAG,IAAzB;AACA,WAAKK,kBAAL,CAAwBJ,SAAS,IAAI,KAAKhC,cAA1C;AACH;;AACD,QAAIC,cAAJ,EAAoB;AAChB,WAAKoC,kBAAL,CAAwB,KAAKpC,cAA7B,EAA6C,KAAKP,UAAlD;AACH;;AACD,QAAIlG,aAAJ,EAAmB;AACf,UAAI,EAAEA,aAAa,CAAC8I,WAAd,IAA6B,CAAC,KAAK9I,aAArC,CAAJ,EAAyD;AACrDuI,QAAAA,sBAAsB,GAAG,KAAzB;AACA,aAAKQ,iBAAL,CAAuB/I,aAAa,CAAClD,YAArC,EAAmD,KAAKkM,YAAxD;AACA,aAAK/B,mBAAL,CAAyBnF,IAAzB,CAA8B,KAAKzC,aAAL,CAAmBwC,WAAnB,CAA+B,QAA/B,EAAyC,IAAzC,EAA+C,IAA/C,CAA9B;AACH;AACJ,KApCyB,CAqC1B;;;AACA,UAAMoH,mBAAmB,GAAG,KAAKC,mBAAL,GAA2BC,GAA3B,CAA+BC,CAAC,IAAIA,CAAC,CAACrG,GAAtC,CAA5B;AACA,UAAMsG,eAAe,GAAGd,sBAAsB,GAAGC,SAAS,IAAI,KAAKhC,cAArB,GAAsCyC,mBAApF;AACA,SAAKK,kBAAL,CAAwB,KAAKjK,aAAL,CAAmBkK,SAA3C,EAAsDF,eAAtD;AACH;;AACDG,EAAAA,kBAAkB,CAACC,CAAD,EAAI7F,IAAJ,EAAU;AACxB,WAAOA,IAAI,CAACb,GAAZ;AACH,GA/HoC,CAgIrC;;AACA;AACJ;AACA;AACA;AACA;;;AACImF,EAAAA,YAAY,CAACD,KAAD,EAAQ;AAChB,QAAIpL,KAAK,CAAC6M,OAAN,CAAczB,KAAd,CAAJ,EAA0B;AACtB,YAAM0B,IAAI,GAAG,KAAKC,eAAL,CAAqB3B,KAArB,CAAb;AACA,WAAK5I,aAAL,CAAmBwK,QAAnB,CAA4BF,IAA5B;AACH;AACJ;;AACDL,EAAAA,kBAAkB,CAACK,IAAD,EAAOG,UAAU,GAAG,EAApB,EAAwB;AACtC,SAAKzK,aAAL,CAAmBnF,eAAnB,CAAmCyP,IAAnC,EAAyCG,UAAzC;AACH;;AACDnB,EAAAA,iBAAiB,CAACoB,IAAD,EAAO;AACpB,SAAK1K,aAAL,CAAmB2K,YAAnB,CAAgCD,IAAhC,EAAsC,KAAK9D,eAA3C;AACH;;AACD2C,EAAAA,kBAAkB,CAACmB,IAAI,GAAG,EAAR,EAAY;AAC1B,SAAK1K,aAAL,CAAmB4K,mBAAnB,CAAuCF,IAAvC;AACH;;AACDlB,EAAAA,kBAAkB,CAACkB,IAAD,EAAOG,OAAP,EAAgB;AAC9B,SAAK7K,aAAL,CAAmB8K,mBAAnB,CAAuCJ,IAAvC,EAA6CG,OAA7C;AACH;;AACDnB,EAAAA,iBAAiB,CAACd,KAAD,EAAQmC,UAAR,EAAoB;AACjC,UAAMC,QAAQ,GAAGnQ,eAAe,CAAC,KAAKmF,aAAL,CAAmBkK,SAApB,EAA+B,IAA/B,CAAf,CAAoDJ,GAApD,CAAwDC,CAAC,IAAIA,CAAC,CAACO,IAA/D,CAAjB;;AACA,UAAMW,cAAc,GAAI1G,IAAD,IAAU;AAC7B,UAAIwG,UAAJ,EAAgB;AACZ,eAAOA,UAAU,CAACxG,IAAI,CAAC2G,MAAN,CAAjB;AACH;;AACD,aAAO,CAACtC,KAAD,IAAU,CAACrE,IAAI,CAAC1E,KAAL,CAAWsL,WAAX,GAAyBC,QAAzB,CAAkCxC,KAAK,CAACuC,WAAN,EAAlC,CAAX,GAAoE,KAApE,GAA4E,IAAnF;AACH,KALD;;AAMAH,IAAAA,QAAQ,CAAC7H,OAAT,CAAiB4G,CAAC,IAAI;AAClBA,MAAAA,CAAC,CAACzK,SAAF,GAAc2L,cAAc,CAAClB,CAAD,CAA5B;AACAA,MAAAA,CAAC,CAAClI,OAAF,GAAY,CAACkI,CAAC,CAACzK,SAAf;;AACA,UAAI,CAACyK,CAAC,CAACzK,SAAP,EAAkB;AACdyK,QAAAA,CAAC,CAAC1H,WAAF,CAAc,KAAd;AACA,aAAKrC,aAAL,CAAmBsC,mBAAnB,CAAuCyH,CAAvC;AACH,OAHD,MAIK;AACD;AACA,aAAK/J,aAAL,CAAmBqL,2BAAnB,CAA+CtB,CAA/C;AACH;;AACD,WAAK/J,aAAL,CAAmBsL,kBAAnB,CAAsCvB,CAAtC;AACH,KAZD;AAaH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIwB,EAAAA,mBAAmB,CAACxJ,KAAD,EAAQ;AACvB,UAAMwC,IAAI,GAAGxC,KAAK,CAACwC,IAAnB;;AACA,YAAQxC,KAAK,CAACyJ,SAAd;AACI,WAAK,QAAL;AACI,aAAKC,UAAL;AACA,aAAKxK,cAAL,CAAoBwB,IAApB,CAAyBV,KAAzB;AACA;;AACJ,WAAK,OAAL;AACI,aAAKlB,OAAL,CAAa4B,IAAb,CAAkBV,KAAlB;AACA;;AACJ,WAAK,UAAL;AACI,aAAKjB,UAAL,CAAgB2B,IAAhB,CAAqBV,KAArB;AACA;;AACJ,WAAK,aAAL;AACI,aAAKhB,aAAL,CAAmB0B,IAAnB,CAAwBV,KAAxB;AACA;;AACJ,WAAK,OAAL;AACI;AACA,aAAK/B,aAAL,CAAmBgD,kBAAnB,CAAsCuB,IAAtC;;AACA,YAAI,CAAC,KAAKqC,eAAV,EAA2B;AACvB,eAAK5G,aAAL,CAAmB0L,OAAnB,CAA2BnH,IAA3B;AACH,SALL,CAMI;;;AACA,cAAMhC,SAAS,GAAG,KAAKvC,aAAL,CAAmBwC,WAAnB,CAA+B,OAA/B,EAAwC+B,IAAxC,EAA8CxC,KAAK,CAACA,KAApD,CAAlB;AACA,aAAKf,gBAAL,CAAsByB,IAAtB,CAA2BF,SAA3B;AACA;;AACJ,WAAK,WAAL;AACI;AACA,YAAIgC,IAAI,CAACjG,UAAT,EAAqB;AACjBiG,UAAAA,IAAI,CAAClC,WAAL,CAAiB,CAACkC,IAAI,CAACjG,UAAvB;AACA,eAAKmN,UAAL;AACH;;AACD,aAAKvK,aAAL,CAAmBuB,IAAnB,CAAwBV,KAAxB;AACA;;AACJ,WAAK,WAAL;AACI,cAAM4J,YAAY,GAAG,KAAK3L,aAAL,CAAmB+D,eAAnB,EAArB;;AACA,YAAI4H,YAAY,IAAIA,YAAY,CAACjI,GAAb,KAAqBa,IAAI,CAACb,GAA1C,IAAiD,CAACa,IAAI,CAACjG,UAAvD,IAAqE,CAACiG,IAAI,CAACrG,MAA/E,EAAuF;AACnFqG,UAAAA,IAAI,CAAClC,WAAL,CAAiB,IAAjB;AACA,eAAKoJ,UAAL;AACH;;AACD,aAAKtK,aAAL,CAAmBsB,IAAnB,CAAwBV,KAAxB;AACA;;AACJ,WAAK,UAAL;AACI,aAAKX,YAAL,CAAkBqB,IAAlB,CAAuBV,KAAvB;AACA;;AACJ,WAAK,WAAL;AACI,aAAKV,aAAL,CAAmBoB,IAAnB,CAAwBV,KAAxB;AACA;;AACJ,WAAK,SAAL;AACI,aAAKR,WAAL,CAAiBkB,IAAjB,CAAsBV,KAAtB;AACA;;AACJ,WAAK,MAAL;AACI,aAAK0J,UAAL;AACA,aAAKnK,QAAL,CAAcmB,IAAd,CAAmBV,KAAnB;AACA;AApDR;AAsDH;AACD;AACJ;AACA;;;AACI0J,EAAAA,UAAU,GAAG;AACT,SAAKxB,kBAAL,CAAwB,KAAKjK,aAAL,CAAmBkK,SAA3C,EAAsD,KAAKL,mBAAL,GAA2BC,GAA3B,CAA+BC,CAAC,IAAIA,CAAC,CAACrG,GAAtC,CAAtD;AACA,SAAKpI,GAAL,CAASc,YAAT;AACH;;AACDkJ,EAAAA,QAAQ,GAAG;AACP,QAAIxB,EAAJ;;AACA,SAAK9D,aAAL,CAAmB4L,aAAnB,CAAiCzG,IAAjC,CAAsC3K,SAAS,CAAC,KAAKgH,QAAN,CAA/C,EAAgEqD,SAAhE,CAA0EyF,IAAI,IAAI;AAC9E,WAAKhD,cAAL,GAAsBgD,IAAtB;AACA,WAAKhP,GAAL,CAASc,YAAT;AACH,KAHD;AAIA,SAAKoL,GAAL,GAAW,KAAKhB,cAAL,CAAoBoC,KAA/B;AACA,KAAC9E,EAAE,GAAG,KAAK0C,cAAL,CAAoBqF,MAA1B,MAAsC,IAAtC,IAA8C/H,EAAE,KAAK,KAAK,CAA1D,GAA8D,KAAK,CAAnE,GAAuEA,EAAE,CAACqB,IAAH,CAAQ3K,SAAS,CAAC,KAAKgH,QAAN,CAAjB,EAAkCqD,SAAlC,CAA6CrJ,SAAD,IAAe;AAC9H,WAAKgM,GAAL,GAAWhM,SAAX;AACA,WAAKF,GAAL,CAASwQ,aAAT;AACH,KAHsE,CAAvE;AAIH;;AACDpQ,EAAAA,WAAW,CAAC6B,OAAD,EAAU;AACjB,SAAK0L,oBAAL,CAA0B1L,OAA1B;AACH;;AACDwO,EAAAA,eAAe,GAAG;AACd,SAAKxE,UAAL,GAAkB,KAAlB;AACH;;AACD/B,EAAAA,WAAW,GAAG;AACV,SAAKhE,QAAL,CAAc4D,IAAd;AACA,SAAK5D,QAAL,CAAc6D,QAAd;AACH;;AAzQoC;;AA2QzCiB,eAAe,CAACjK,IAAhB;AAAA,mBAA4GiK,eAA5G,EAnsC+GvN,EAmsC/G,mBAA6I2B,EAAE,CAACC,iBAAhJ,GAnsC+G5B,EAmsC/G,mBAA8KmC,IAAI,CAAC8Q,eAAnL,GAnsC+GjT,EAmsC/G,mBAA+MA,EAAE,CAACuD,iBAAlN,GAnsC+GvD,EAmsC/G,mBAAgPP,IAAI,CAACyT,cAArP,MAnsC+GlT,EAmsC/G,mBAAgSgB,IAAI,CAAC6L,sBAArS;AAAA;;AACAU,eAAe,CAAC/J,IAAhB,kBApsC+GxD,EAosC/G;AAAA,QAAgGuN,eAAhG;AAAA;AAAA;AAAA;AApsC+GvN,MAAAA,EAosC/G;AAAA;;AAAA;AAAA;;AApsC+GA,MAAAA,EAosC/G,qBApsC+GA,EAosC/G;AAAA;AAAA;AAAA;AAAA;AApsC+GA,MAAAA,EAosC/G,aAY0NJ,wBAZ1N,KAY6QA,wBAZ7Q;AAAA;;AAAA;AAAA;;AApsC+GI,MAAAA,EAosC/G,qBApsC+GA,EAosC/G;AAAA;AAAA;AAAA;AAAA;AAAA;AApsC+GA,MAAAA,EAosC/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aApsC+GA,EAosC/G,oBAA8+D,CACt+DiN,aADs+D,EAEt+D;AACIkG,IAAAA,OAAO,EAAEvR,iBADb;AAEIwR,IAAAA,UAAU,EAAEjG,oBAFhB;AAGIkG,IAAAA,IAAI,EAAE,CAAC,CAAC,IAAI5S,QAAJ,EAAD,EAAiB,IAAIH,QAAJ,EAAjB,EAAiCyB,6BAAjC,CAAD,EAAkEkL,aAAlE;AAHV,GAFs+D,EAOt+D;AACIkG,IAAAA,OAAO,EAAElR,iBADb;AAEIqR,IAAAA,WAAW,EAAE5S,UAAU,CAAC,MAAM6M,eAAP,CAF3B;AAGIgG,IAAAA,KAAK,EAAE;AAHX,GAPs+D,CAA9+D,GApsC+GvT,EAosC/G,6BApsC+GA,EAosC/G;AAAA;AAAA;AAAA;AAAA;AAAA;AApsC+GA,MAAAA,EAitC3G,yBAbJ;AApsC+GA,MAAAA,EAktCzG,yBAdN;AApsC+GA,MAAAA,EAmtC3G,eAfJ;AApsC+GA,MAAAA,EAotC3G,4BAhBJ;AApsC+GA,MAAAA,EAqtCzG,4BAjBN;AApsC+GA,MAAAA,EAstCvG,uBAlBR;AApsC+GA,MAAAA,EAutCzG,eAnBN;AApsC+GA,MAAAA,EAwtC3G,eApBJ;AApsC+GA,MAAAA,EAytC3G,4BArBJ;AApsC+GA,MAAAA,EA0tCzG,+GAtBN;AApsC+GA,MAAAA,EAwuCzG,8DApCN;AApsC+GA,MAAAA,EAovC3G,eAhDJ;AApsC+GA,MAAAA,EAqvC3G,sFArvC2GA,EAqvC3G,wBAjDJ;AAAA;;AAAA;AApsC+GA,MAAAA,EAktClG,aAdb;AApsC+GA,MAAAA,EAktClG,wCAdb;AApsC+GA,MAAAA,EAotC5E,aAhBnC;AApsC+GA,MAAAA,EAotC5E,6CAhBnC;AApsC+GA,MAAAA,EAytChF,aArB/B;AApsC+GA,MAAAA,EAytChF,sDArB/B;AApsC+GA,MAAAA,EA2tCtG,aAvBT;AApsC+GA,MAAAA,EA2tCtG,wCAvBT;AApsC+GA,MAAAA,EAyuCtG,aArCT;AApsC+GA,MAAAA,EAyuCtG,yCArCT;AAAA;AAAA;AAAA,eA6F0CL,EAAE,CAACC,wBA7F7C,EA6FmMoH,0BA7FnM,EA6F+5BlH,EAAE,CAAC0T,OA7Fl6B,EA6Fi+B1T,EAAE,CAAC2F,IA7Fp+B,EA6FkjC9F,EAAE,CAAC8T,yBA7FrjC,EA6FisC9T,EAAE,CAAC+T,eA7FpsC,EA6F63C5T,EAAE,CAAC4G,gBA7Fh4C,EA6Fq/C1F,IAAI,CAAC6L,sBA7F1/C,EA6FinD/M,EAAE,CAAC6E,OA7FpnD;AAAA;AAAA;AAAA,eA6FguD,CAACzC,kBAAD;AA7FhuD;AAAA;AAAA;;AA8FAZ,UAAU,CAAC,CACPI,YAAY,EADL,EAEPU,UAAU,EAFH,CAAD,EAGPmL,eAAe,CAACT,SAHT,EAGoB,YAHpB,EAGkC,KAAK,CAHvC,CAAV;;AAIAxL,UAAU,CAAC,CACPI,YAAY,EADL,EAEPU,UAAU,EAFH,CAAD,EAGPmL,eAAe,CAACT,SAHT,EAGoB,iBAHpB,EAGuC,KAAK,CAH5C,CAAV;;AAIAxL,UAAU,CAAC,CACPI,YAAY,EADL,EAEPU,UAAU,EAFH,CAAD,EAGPmL,eAAe,CAACT,SAHT,EAGoB,aAHpB,EAGmC,KAAK,CAHxC,CAAV;;AAIAxL,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEP6L,eAAe,CAACT,SAFT,EAEoB,aAFpB,EAEmC,KAAK,CAFxC,CAAV;;AAGAxL,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEP6L,eAAe,CAACT,SAFT,EAEoB,cAFpB,EAEoC,KAAK,CAFzC,CAAV;;AAGAxL,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEP6L,eAAe,CAACT,SAFT,EAEoB,iBAFpB,EAEuC,KAAK,CAF5C,CAAV;;AAGAxL,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEP6L,eAAe,CAACT,SAFT,EAEoB,cAFpB,EAEoC,KAAK,CAFzC,CAAV;;AAGAxL,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEP6L,eAAe,CAACT,SAFT,EAEoB,YAFpB,EAEkC,KAAK,CAFvC,CAAV;;AAGAxL,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEP6L,eAAe,CAACT,SAFT,EAEoB,aAFpB,EAEmC,KAAK,CAFxC,CAAV;;AAGAxL,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEP6L,eAAe,CAACT,SAFT,EAEoB,aAFpB,EAEmC,KAAK,CAFxC,CAAV;;AAGAxL,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEP6L,eAAe,CAACT,SAFT,EAEoB,aAFpB,EAEmC,KAAK,CAFxC,CAAV;;AAGAxL,UAAU,CAAC,CACPI,YAAY,EADL,CAAD,EAEP6L,eAAe,CAACT,SAFT,EAEoB,YAFpB,EAEkC,KAAK,CAFvC,CAAV;;AAGA;AAAA,qDAz0C+G9M,EAy0C/G,mBAA2FuN,eAA3F,EAAwH,CAAC;AAC7G9J,IAAAA,IAAI,EAAExD,SADuG;AAE7GyD,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,SADX;AAECC,MAAAA,QAAQ,EAAE,QAFX;AAGC+P,MAAAA,UAAU,EAAE,CAACzR,kBAAD,CAHb;AAIC2B,MAAAA,QAAQ,EAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GArFmB;AAsFCC,MAAAA,eAAe,EAAE5D,uBAAuB,CAAC6D,MAtF1C;AAuFC6P,MAAAA,SAAS,EAAE,CACP3G,aADO,EAEP;AACIkG,QAAAA,OAAO,EAAEvR,iBADb;AAEIwR,QAAAA,UAAU,EAAEjG,oBAFhB;AAGIkG,QAAAA,IAAI,EAAE,CAAC,CAAC,IAAI5S,QAAJ,EAAD,EAAiB,IAAIH,QAAJ,EAAjB,EAAiCyB,6BAAjC,CAAD,EAAkEkL,aAAlE;AAHV,OAFO,EAOP;AACIkG,QAAAA,OAAO,EAAElR,iBADb;AAEIqR,QAAAA,WAAW,EAAE5S,UAAU,CAAC,MAAM6M,eAAP,CAF3B;AAGIgG,QAAAA,KAAK,EAAE;AAHX,OAPO,CAvFZ;AAoGCtP,MAAAA,IAAI,EAAE;AACF,mCAA4B,cAD1B;AAEF,6CAAsC,4BAFpC;AAGF,6CAAsC,6BAHpC;AAIF,8CAAuC,6BAJrC;AAKF,4BAAqB,eALnB;AAMF,gCAAyB,eANvB;AAOF,sCAA+B,6BAP7B;AAQF,sCAA+B,8BAR7B;AASF,uCAAgC,8BAT9B;AAUF,kCAA2B;AAVzB;AApGP,KAAD;AAFuG,GAAD,CAAxH,EAmH4B,YAAY;AAChC,WAAO,CAAC;AAAER,MAAAA,IAAI,EAAE9B,EAAE,CAACC;AAAX,KAAD,EAAiC;AAAE6B,MAAAA,IAAI,EAAEtB,IAAI,CAAC8Q;AAAb,KAAjC,EAAiE;AAAExP,MAAAA,IAAI,EAAEzD,EAAE,CAACuD;AAAX,KAAjE,EAAiG;AAAEE,MAAAA,IAAI,EAAEhE,IAAI,CAACyT,cAAb;AAA6BnG,MAAAA,UAAU,EAAE,CAAC;AAClItJ,QAAAA,IAAI,EAAEnD;AAD4H,OAAD;AAAzC,KAAjG,EAEW;AAAEmD,MAAAA,IAAI,EAAEzC,IAAI,CAAC6L,sBAAb;AAAqCE,MAAAA,UAAU,EAAE,CAAC;AACpDtJ,QAAAA,IAAI,EAAEpD;AAD8C,OAAD,EAEpD;AACCoD,QAAAA,IAAI,EAAEnD;AADP,OAFoD;AAAjD,KAFX,CAAP;AAOH,GA3HL,EA2HuB;AAAEoH,IAAAA,UAAU,EAAE,CAAC;AACtBjE,MAAAA,IAAI,EAAEtD;AADgB,KAAD,CAAd;AAEPqH,IAAAA,eAAe,EAAE,CAAC;AAClB/D,MAAAA,IAAI,EAAEtD;AADY,KAAD,CAFV;AAIPwN,IAAAA,WAAW,EAAE,CAAC;AACdlK,MAAAA,IAAI,EAAEtD;AADQ,KAAD,CAJN;AAMPyN,IAAAA,WAAW,EAAE,CAAC;AACdnK,MAAAA,IAAI,EAAEtD;AADQ,KAAD,CANN;AAQPmE,IAAAA,YAAY,EAAE,CAAC;AACfb,MAAAA,IAAI,EAAEtD;AADS,KAAD,CARP;AAUP0N,IAAAA,eAAe,EAAE,CAAC;AAClBpK,MAAAA,IAAI,EAAEtD;AADY,KAAD,CAVV;AAYPyF,IAAAA,YAAY,EAAE,CAAC;AACfnC,MAAAA,IAAI,EAAEtD;AADS,KAAD,CAZP;AAcPiF,IAAAA,UAAU,EAAE,CAAC;AACb3B,MAAAA,IAAI,EAAEtD;AADO,KAAD,CAdL;AAgBP6M,IAAAA,WAAW,EAAE,CAAC;AACdvJ,MAAAA,IAAI,EAAEtD;AADQ,KAAD,CAhBN;AAkBP+I,IAAAA,WAAW,EAAE,CAAC;AACdzF,MAAAA,IAAI,EAAEtD;AADQ,KAAD,CAlBN;AAoBP0H,IAAAA,WAAW,EAAE,CAAC;AACdpE,MAAAA,IAAI,EAAEtD;AADQ,KAAD,CApBN;AAsBP2N,IAAAA,UAAU,EAAE,CAAC;AACbrK,MAAAA,IAAI,EAAEtD;AADO,KAAD,CAtBL;AAwBP0F,IAAAA,cAAc,EAAE,CAAC;AACjBpC,MAAAA,IAAI,EAAEtD;AADW,KAAD,CAxBT;AA0BP4N,IAAAA,iBAAiB,EAAE,CAAC;AACpBtK,MAAAA,IAAI,EAAEtD;AADc,KAAD,CA1BZ;AA4BP6N,IAAAA,oBAAoB,EAAE,CAAC;AACvBvK,MAAAA,IAAI,EAAEtD;AADiB,KAAD,CA5Bf;AA8BP8N,IAAAA,oBAAoB,EAAE,CAAC;AACvBxK,MAAAA,IAAI,EAAEtD;AADiB,KAAD,CA9Bf;AAgCP+N,IAAAA,eAAe,EAAE,CAAC;AAClBzK,MAAAA,IAAI,EAAEtD;AADY,KAAD,CAhCV;AAkCPwH,IAAAA,cAAc,EAAE,CAAC;AACjBlE,MAAAA,IAAI,EAAEtD;AADW,KAAD,CAlCT;AAoCPwL,IAAAA,YAAY,EAAE,CAAC;AACflI,MAAAA,IAAI,EAAEtD;AADS,KAAD,CApCP;AAsCPgO,IAAAA,MAAM,EAAE,CAAC;AACT1K,MAAAA,IAAI,EAAEtD;AADG,KAAD,CAtCD;AAwCPiO,IAAAA,cAAc,EAAE,CAAC;AACjB3K,MAAAA,IAAI,EAAEtD;AADW,KAAD,CAxCT;AA0CPkO,IAAAA,cAAc,EAAE,CAAC;AACjB5K,MAAAA,IAAI,EAAEtD;AADW,KAAD,CA1CT;AA4CPmO,IAAAA,aAAa,EAAE,CAAC;AAChB7K,MAAAA,IAAI,EAAEtD;AADU,KAAD,CA5CR;AA8CPyH,IAAAA,aAAa,EAAE,CAAC;AAChBnE,MAAAA,IAAI,EAAEtD;AADU,KAAD,CA9CR;AAgDPyQ,IAAAA,YAAY,EAAE,CAAC;AACfnN,MAAAA,IAAI,EAAEtD;AADS,KAAD,CAhDP;AAkDP0T,IAAAA,mBAAmB,EAAE,CAAC;AACtBpQ,MAAAA,IAAI,EAAE9C,YADgB;AAEtB+C,MAAAA,IAAI,EAAE,CAAC,gBAAD,EAAmB;AAAEoQ,QAAAA,MAAM,EAAE;AAAV,OAAnB;AAFgB,KAAD,CAlDd;AAqDPC,IAAAA,wBAAwB,EAAE,CAAC;AAC3BtQ,MAAAA,IAAI,EAAE7C,SADqB;AAE3B8C,MAAAA,IAAI,EAAE,CAAC9D,wBAAD,EAA2B;AAAEoU,QAAAA,IAAI,EAAEpU;AAAR,OAA3B;AAFqB,KAAD,CArDnB;AAwDP8O,IAAAA,oBAAoB,EAAE,CAAC;AACvBjL,MAAAA,IAAI,EAAElD;AADiB,KAAD,CAxDf;AA0DPoO,IAAAA,oBAAoB,EAAE,CAAC;AACvBlL,MAAAA,IAAI,EAAElD;AADiB,KAAD,CA1Df;AA4DPqO,IAAAA,mBAAmB,EAAE,CAAC;AACtBnL,MAAAA,IAAI,EAAElD;AADgB,KAAD,CA5Dd;AA8DPsO,IAAAA,mBAAmB,EAAE,CAAC;AACtBpL,MAAAA,IAAI,EAAElD;AADgB,KAAD,CA9Dd;AAgEPuH,IAAAA,OAAO,EAAE,CAAC;AACVrE,MAAAA,IAAI,EAAElD;AADI,KAAD,CAhEF;AAkEPwH,IAAAA,UAAU,EAAE,CAAC;AACbtE,MAAAA,IAAI,EAAElD;AADO,KAAD,CAlEL;AAoEPyH,IAAAA,aAAa,EAAE,CAAC;AAChBvE,MAAAA,IAAI,EAAElD;AADU,KAAD,CApER;AAsEP0H,IAAAA,gBAAgB,EAAE,CAAC;AACnBxE,MAAAA,IAAI,EAAElD;AADa,KAAD,CAtEX;AAwEP2H,IAAAA,cAAc,EAAE,CAAC;AACjBzE,MAAAA,IAAI,EAAElD;AADW,KAAD,CAxET;AA0EP4H,IAAAA,aAAa,EAAE,CAAC;AAChB1E,MAAAA,IAAI,EAAElD;AADU,KAAD,CA1ER;AA4EP6H,IAAAA,aAAa,EAAE,CAAC;AAChB3E,MAAAA,IAAI,EAAElD;AADU,KAAD,CA5ER;AA8EP8H,IAAAA,YAAY,EAAE,CAAC;AACf5E,MAAAA,IAAI,EAAElD;AADS,KAAD,CA9EP;AAgFP+H,IAAAA,aAAa,EAAE,CAAC;AAChB7E,MAAAA,IAAI,EAAElD;AADU,KAAD,CAhFR;AAkFPgI,IAAAA,QAAQ,EAAE,CAAC;AACX9E,MAAAA,IAAI,EAAElD;AADK,KAAD,CAlFH;AAoFPiI,IAAAA,WAAW,EAAE,CAAC;AACd/E,MAAAA,IAAI,EAAElD;AADQ,KAAD;AApFN,GA3HvB;AAAA;AAmNA;AACA;AACA;AACA;;;AACA,MAAM0T,YAAN,CAAmB;;AAEnBA,YAAY,CAAC3Q,IAAb;AAAA,mBAAyG2Q,YAAzG;AAAA;;AACAA,YAAY,CAACC,IAAb,kBAniD+GlU,EAmiD/G;AAAA,QAA0GiU;AAA1G;AAaAA,YAAY,CAACE,IAAb,kBAhjD+GnU,EAgjD/G;AAAA,YAAkI,CACtHN,UADsH,EAEtHK,YAFsH,EAGtHoB,cAHsH,EAItHE,YAJsH,EAKtHJ,mBALsH,EAMtHF,iBANsH,EAOtHlB,eAPsH,CAAlI;AAAA;;AASA;AAAA,qDAzjD+GG,EAyjD/G,mBAA2FiU,YAA3F,EAAqH,CAAC;AAC1GxQ,IAAAA,IAAI,EAAE5C,QADoG;AAE1G6C,IAAAA,IAAI,EAAE,CAAC;AACC0Q,MAAAA,OAAO,EAAE,CACL1U,UADK,EAELK,YAFK,EAGLoB,cAHK,EAILE,YAJK,EAKLJ,mBALK,EAMLF,iBANK,EAOLlB,eAPK,CADV;AAUCwU,MAAAA,YAAY,EAAE,CACV9G,eADU,EAEVvG,0BAFU,EAGV9C,qBAHU,EAIVe,2BAJU,EAKVL,kCALU,EAMVoB,wBANU,EAOV3D,4BAPU,CAVf;AAmBCiS,MAAAA,OAAO,EAAE,CAAC/G,eAAD,EAAkBvG,0BAAlB,EAA8C9C,qBAA9C;AAnBV,KAAD;AAFoG,GAAD,CAArH;AAAA;AAyBA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASqJ,eAAT,EAA0BrJ,qBAA1B,EAAiD+P,YAAjD,EAA+DrP,kCAA/D,EAAmGoC,0BAAnG,EAA+H/B,2BAA/H,EAA4Je,wBAA5J,EAAsLiH,aAAtL,EAAqME,oBAArM","sourcesContent":["import * as i3$1 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i5 from '@angular/cdk/scrolling';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Input, EventEmitter, Host, Optional, Output, Injectable, SkipSelf, forwardRef, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport * as i4 from 'ng-zorro-antd/core/highlight';\nimport { NzHighlightModule } from 'ng-zorro-antd/core/highlight';\nimport * as i4$1 from 'ng-zorro-antd/core/no-animation';\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport * as i2 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport * as i3 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { __decorate } from 'tslib';\nimport { Subject, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport * as i1 from 'ng-zorro-antd/core/tree';\nimport { NzTreeBaseService, NzTreeBase, flattenTreeData, NzTreeHigherOrderServiceToken } from 'ng-zorro-antd/core/tree';\nexport { NzTreeNode } from 'ng-zorro-antd/core/tree';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { treeCollapseMotion } from 'ng-zorro-antd/core/animation';\nimport * as i2$1 from 'ng-zorro-antd/core/config';\nimport { WithConfig } from 'ng-zorro-antd/core/config';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeDropIndicatorComponent {\n    constructor(cdr) {\n        this.cdr = cdr;\n        this.level = 1;\n        this.direction = 'ltr';\n        this.style = {};\n    }\n    ngOnChanges(_changes) {\n        this.renderIndicator(this.dropPosition, this.direction);\n    }\n    renderIndicator(dropPosition, direction = 'ltr') {\n        const offset = 4;\n        const startPosition = direction === 'ltr' ? 'left' : 'right';\n        const endPosition = direction === 'ltr' ? 'right' : 'left';\n        const style = {\n            [startPosition]: `${offset}px`,\n            [endPosition]: '0px'\n        };\n        switch (dropPosition) {\n            case -1:\n                style.top = `${-3}px`;\n                break;\n            case 1:\n                style.bottom = `${-3}px`;\n                break;\n            case 0:\n                // dropPosition === 0\n                style.bottom = `${-3}px`;\n                style[startPosition] = `${offset + 24}px`;\n                break;\n            default:\n                style.display = 'none';\n                break;\n        }\n        this.style = style;\n        this.cdr.markForCheck();\n    }\n}\nNzTreeDropIndicatorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeDropIndicatorComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nNzTreeDropIndicatorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeDropIndicatorComponent, selector: \"nz-tree-drop-indicator\", inputs: { dropPosition: \"dropPosition\", level: \"level\", direction: \"direction\" }, host: { properties: { \"class.ant-tree-drop-indicator\": \"true\", \"style\": \"style\" } }, exportAs: [\"NzTreeDropIndicator\"], usesOnChanges: true, ngImport: i0, template: ``, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeDropIndicatorComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'nz-tree-drop-indicator',\n                    exportAs: 'NzTreeDropIndicator',\n                    template: ``,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    preserveWhitespaces: false,\n                    host: {\n                        '[class.ant-tree-drop-indicator]': 'true',\n                        '[style]': 'style'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { dropPosition: [{\n                type: Input\n            }], level: [{\n                type: Input\n            }], direction: [{\n                type: Input\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeIndentComponent {\n    constructor() {\n        this.nzTreeLevel = 0;\n        this.nzIsStart = [];\n        this.nzIsEnd = [];\n        this.nzSelectMode = false;\n        this.listOfUnit = [];\n    }\n    ngOnChanges(changes) {\n        const { nzTreeLevel } = changes;\n        if (nzTreeLevel) {\n            this.listOfUnit = [...new Array(nzTreeLevel.currentValue || 0)];\n        }\n    }\n}\nNzTreeIndentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeIndentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nNzTreeIndentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeIndentComponent, selector: \"nz-tree-indent\", inputs: { nzTreeLevel: \"nzTreeLevel\", nzIsStart: \"nzIsStart\", nzIsEnd: \"nzIsEnd\", nzSelectMode: \"nzSelectMode\" }, host: { properties: { \"attr.aria-hidden\": \"true\", \"class.ant-tree-indent\": \"!nzSelectMode\", \"class.ant-select-tree-indent\": \"nzSelectMode\" } }, exportAs: [\"nzTreeIndent\"], usesOnChanges: true, ngImport: i0, template: `\n    <span\n      [class.ant-tree-indent-unit]=\"!nzSelectMode\"\n      [class.ant-select-tree-indent-unit]=\"nzSelectMode\"\n      [class.ant-select-tree-indent-unit-start]=\"nzSelectMode && nzIsStart[i]\"\n      [class.ant-tree-indent-unit-start]=\"!nzSelectMode && nzIsStart[i]\"\n      [class.ant-select-tree-indent-unit-end]=\"nzSelectMode && nzIsEnd[i]\"\n      [class.ant-tree-indent-unit-end]=\"!nzSelectMode && nzIsEnd[i]\"\n      *ngFor=\"let _ of listOfUnit; let i = index\"\n    ></span>\n  `, isInline: true, directives: [{ type: i7.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeIndentComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'nz-tree-indent',\n                    exportAs: 'nzTreeIndent',\n                    template: `\n    <span\n      [class.ant-tree-indent-unit]=\"!nzSelectMode\"\n      [class.ant-select-tree-indent-unit]=\"nzSelectMode\"\n      [class.ant-select-tree-indent-unit-start]=\"nzSelectMode && nzIsStart[i]\"\n      [class.ant-tree-indent-unit-start]=\"!nzSelectMode && nzIsStart[i]\"\n      [class.ant-select-tree-indent-unit-end]=\"nzSelectMode && nzIsEnd[i]\"\n      [class.ant-tree-indent-unit-end]=\"!nzSelectMode && nzIsEnd[i]\"\n      *ngFor=\"let _ of listOfUnit; let i = index\"\n    ></span>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    preserveWhitespaces: false,\n                    host: {\n                        '[attr.aria-hidden]': 'true',\n                        '[class.ant-tree-indent]': '!nzSelectMode',\n                        '[class.ant-select-tree-indent]': 'nzSelectMode'\n                    }\n                }]\n        }], propDecorators: { nzTreeLevel: [{\n                type: Input\n            }], nzIsStart: [{\n                type: Input\n            }], nzIsEnd: [{\n                type: Input\n            }], nzSelectMode: [{\n                type: Input\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNodeBuiltinCheckboxComponent {\n    constructor() {\n        this.nzSelectMode = false;\n    }\n}\nNzTreeNodeBuiltinCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeBuiltinCheckboxComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nNzTreeNodeBuiltinCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeNodeBuiltinCheckboxComponent, selector: \"nz-tree-node-checkbox[builtin]\", inputs: { nzSelectMode: \"nzSelectMode\", isChecked: \"isChecked\", isHalfChecked: \"isHalfChecked\", isDisabled: \"isDisabled\", isDisableCheckbox: \"isDisableCheckbox\" }, host: { properties: { \"class.ant-select-tree-checkbox\": \"nzSelectMode\", \"class.ant-select-tree-checkbox-checked\": \"nzSelectMode && isChecked\", \"class.ant-select-tree-checkbox-indeterminate\": \"nzSelectMode && isHalfChecked\", \"class.ant-select-tree-checkbox-disabled\": \"nzSelectMode && (isDisabled || isDisableCheckbox)\", \"class.ant-tree-checkbox\": \"!nzSelectMode\", \"class.ant-tree-checkbox-checked\": \"!nzSelectMode && isChecked\", \"class.ant-tree-checkbox-indeterminate\": \"!nzSelectMode && isHalfChecked\", \"class.ant-tree-checkbox-disabled\": \"!nzSelectMode && (isDisabled || isDisableCheckbox)\" } }, ngImport: i0, template: `\n    <span [class.ant-tree-checkbox-inner]=\"!nzSelectMode\" [class.ant-select-tree-checkbox-inner]=\"nzSelectMode\"></span>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeBuiltinCheckboxComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'nz-tree-node-checkbox[builtin]',\n                    template: `\n    <span [class.ant-tree-checkbox-inner]=\"!nzSelectMode\" [class.ant-select-tree-checkbox-inner]=\"nzSelectMode\"></span>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    preserveWhitespaces: false,\n                    host: {\n                        '[class.ant-select-tree-checkbox]': `nzSelectMode`,\n                        '[class.ant-select-tree-checkbox-checked]': `nzSelectMode && isChecked`,\n                        '[class.ant-select-tree-checkbox-indeterminate]': `nzSelectMode && isHalfChecked`,\n                        '[class.ant-select-tree-checkbox-disabled]': `nzSelectMode && (isDisabled || isDisableCheckbox)`,\n                        '[class.ant-tree-checkbox]': `!nzSelectMode`,\n                        '[class.ant-tree-checkbox-checked]': `!nzSelectMode && isChecked`,\n                        '[class.ant-tree-checkbox-indeterminate]': `!nzSelectMode && isHalfChecked`,\n                        '[class.ant-tree-checkbox-disabled]': `!nzSelectMode && (isDisabled || isDisableCheckbox)`\n                    }\n                }]\n        }], propDecorators: { nzSelectMode: [{\n                type: Input\n            }], isChecked: [{\n                type: Input\n            }], isHalfChecked: [{\n                type: Input\n            }], isDisabled: [{\n                type: Input\n            }], isDisableCheckbox: [{\n                type: Input\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNodeSwitcherComponent {\n    constructor() {\n        this.nzSelectMode = false;\n    }\n    get isShowLineIcon() {\n        return !this.isLeaf && !!this.nzShowLine;\n    }\n    get isShowSwitchIcon() {\n        return !this.isLeaf && !this.nzShowLine;\n    }\n    get isSwitcherOpen() {\n        return !!this.isExpanded && !this.isLeaf;\n    }\n    get isSwitcherClose() {\n        return !this.isExpanded && !this.isLeaf;\n    }\n}\nNzTreeNodeSwitcherComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeSwitcherComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nNzTreeNodeSwitcherComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeNodeSwitcherComponent, selector: \"nz-tree-node-switcher\", inputs: { nzShowExpand: \"nzShowExpand\", nzShowLine: \"nzShowLine\", nzExpandedIcon: \"nzExpandedIcon\", nzSelectMode: \"nzSelectMode\", context: \"context\", isLeaf: \"isLeaf\", isLoading: \"isLoading\", isExpanded: \"isExpanded\" }, host: { properties: { \"class.ant-select-tree-switcher\": \"nzSelectMode\", \"class.ant-select-tree-switcher-noop\": \"nzSelectMode && isLeaf\", \"class.ant-select-tree-switcher_open\": \"nzSelectMode && isSwitcherOpen\", \"class.ant-select-tree-switcher_close\": \"nzSelectMode && isSwitcherClose\", \"class.ant-tree-switcher\": \"!nzSelectMode\", \"class.ant-tree-switcher-noop\": \"!nzSelectMode && isLeaf\", \"class.ant-tree-switcher_open\": \"!nzSelectMode && isSwitcherOpen\", \"class.ant-tree-switcher_close\": \"!nzSelectMode && isSwitcherClose\" } }, ngImport: i0, template: `\n    <ng-container *ngIf=\"isShowSwitchIcon\">\n      <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n        <ng-container *nzStringTemplateOutlet=\"nzExpandedIcon; context: { $implicit: context, origin: context.origin }\">\n          <i\n            nz-icon\n            nzType=\"caret-down\"\n            [class.ant-select-tree-switcher-icon]=\"nzSelectMode\"\n            [class.ant-tree-switcher-icon]=\"!nzSelectMode\"\n          ></i>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"nzShowLine\">\n      <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n        <ng-container *nzStringTemplateOutlet=\"nzExpandedIcon; context: { $implicit: context, origin: context.origin }\">\n          <i\n            *ngIf=\"isShowLineIcon\"\n            nz-icon\n            [nzType]=\"isSwitcherOpen ? 'minus-square' : 'plus-square'\"\n            class=\"ant-tree-switcher-line-icon\"\n          ></i>\n          <i *ngIf=\"!isShowLineIcon\" nz-icon nzType=\"file\" class=\"ant-tree-switcher-line-icon\"></i>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n    <ng-template #loadingTemplate>\n      <i nz-icon nzType=\"loading\" [nzSpin]=\"true\" class=\"ant-tree-switcher-loading-icon\"></i>\n    </ng-template>\n  `, isInline: true, directives: [{ type: i7.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NzStringTemplateOutletDirective, selector: \"[nzStringTemplateOutlet]\", inputs: [\"nzStringTemplateOutletContext\", \"nzStringTemplateOutlet\"], exportAs: [\"nzStringTemplateOutlet\"] }, { type: i3.NzIconDirective, selector: \"[nz-icon]\", inputs: [\"nzSpin\", \"nzRotate\", \"nzType\", \"nzTheme\", \"nzTwotoneColor\", \"nzIconfont\"], exportAs: [\"nzIcon\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeSwitcherComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'nz-tree-node-switcher',\n                    template: `\n    <ng-container *ngIf=\"isShowSwitchIcon\">\n      <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n        <ng-container *nzStringTemplateOutlet=\"nzExpandedIcon; context: { $implicit: context, origin: context.origin }\">\n          <i\n            nz-icon\n            nzType=\"caret-down\"\n            [class.ant-select-tree-switcher-icon]=\"nzSelectMode\"\n            [class.ant-tree-switcher-icon]=\"!nzSelectMode\"\n          ></i>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"nzShowLine\">\n      <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n        <ng-container *nzStringTemplateOutlet=\"nzExpandedIcon; context: { $implicit: context, origin: context.origin }\">\n          <i\n            *ngIf=\"isShowLineIcon\"\n            nz-icon\n            [nzType]=\"isSwitcherOpen ? 'minus-square' : 'plus-square'\"\n            class=\"ant-tree-switcher-line-icon\"\n          ></i>\n          <i *ngIf=\"!isShowLineIcon\" nz-icon nzType=\"file\" class=\"ant-tree-switcher-line-icon\"></i>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n    <ng-template #loadingTemplate>\n      <i nz-icon nzType=\"loading\" [nzSpin]=\"true\" class=\"ant-tree-switcher-loading-icon\"></i>\n    </ng-template>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    preserveWhitespaces: false,\n                    host: {\n                        '[class.ant-select-tree-switcher]': 'nzSelectMode',\n                        '[class.ant-select-tree-switcher-noop]': 'nzSelectMode && isLeaf',\n                        '[class.ant-select-tree-switcher_open]': 'nzSelectMode && isSwitcherOpen',\n                        '[class.ant-select-tree-switcher_close]': 'nzSelectMode && isSwitcherClose',\n                        '[class.ant-tree-switcher]': '!nzSelectMode',\n                        '[class.ant-tree-switcher-noop]': '!nzSelectMode && isLeaf',\n                        '[class.ant-tree-switcher_open]': '!nzSelectMode && isSwitcherOpen',\n                        '[class.ant-tree-switcher_close]': '!nzSelectMode && isSwitcherClose'\n                    }\n                }]\n        }], propDecorators: { nzShowExpand: [{\n                type: Input\n            }], nzShowLine: [{\n                type: Input\n            }], nzExpandedIcon: [{\n                type: Input\n            }], nzSelectMode: [{\n                type: Input\n            }], context: [{\n                type: Input\n            }], isLeaf: [{\n                type: Input\n            }], isLoading: [{\n                type: Input\n            }], isExpanded: [{\n                type: Input\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNodeTitleComponent {\n    constructor(cdr) {\n        this.cdr = cdr;\n        this.treeTemplate = null;\n        this.selectMode = false;\n        // Drag indicator\n        this.showIndicator = true;\n    }\n    get canDraggable() {\n        return this.draggable && !this.isDisabled ? true : null;\n    }\n    get matchedValue() {\n        return this.isMatched ? this.searchValue : '';\n    }\n    get isSwitcherOpen() {\n        return this.isExpanded && !this.isLeaf;\n    }\n    get isSwitcherClose() {\n        return !this.isExpanded && !this.isLeaf;\n    }\n    ngOnChanges(changes) {\n        const { showIndicator, dragPosition } = changes;\n        if (showIndicator || dragPosition) {\n            this.cdr.markForCheck();\n        }\n    }\n}\nNzTreeNodeTitleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeTitleComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nNzTreeNodeTitleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeNodeTitleComponent, selector: \"nz-tree-node-title\", inputs: { searchValue: \"searchValue\", treeTemplate: \"treeTemplate\", draggable: \"draggable\", showIcon: \"showIcon\", selectMode: \"selectMode\", context: \"context\", icon: \"icon\", title: \"title\", isLoading: \"isLoading\", isSelected: \"isSelected\", isDisabled: \"isDisabled\", isMatched: \"isMatched\", isExpanded: \"isExpanded\", isLeaf: \"isLeaf\", showIndicator: \"showIndicator\", dragPosition: \"dragPosition\" }, host: { properties: { \"attr.title\": \"title\", \"attr.draggable\": \"canDraggable\", \"attr.aria-grabbed\": \"canDraggable\", \"class.draggable\": \"canDraggable\", \"class.ant-select-tree-node-content-wrapper\": \"selectMode\", \"class.ant-select-tree-node-content-wrapper-open\": \"selectMode && isSwitcherOpen\", \"class.ant-select-tree-node-content-wrapper-close\": \"selectMode && isSwitcherClose\", \"class.ant-select-tree-node-selected\": \"selectMode && isSelected\", \"class.ant-tree-node-content-wrapper\": \"!selectMode\", \"class.ant-tree-node-content-wrapper-open\": \"!selectMode && isSwitcherOpen\", \"class.ant-tree-node-content-wrapper-close\": \"!selectMode && isSwitcherClose\", \"class.ant-tree-node-selected\": \"!selectMode && isSelected\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <ng-template\n      [ngTemplateOutlet]=\"treeTemplate\"\n      [ngTemplateOutletContext]=\"{ $implicit: context, origin: context.origin }\"\n    ></ng-template>\n    <ng-container *ngIf=\"!treeTemplate\">\n      <span\n        *ngIf=\"icon && showIcon\"\n        [class.ant-tree-icon__open]=\"isSwitcherOpen\"\n        [class.ant-tree-icon__close]=\"isSwitcherClose\"\n        [class.ant-tree-icon_loading]=\"isLoading\"\n        [class.ant-select-tree-iconEle]=\"selectMode\"\n        [class.ant-tree-iconEle]=\"!selectMode\"\n      >\n        <span\n          [class.ant-select-tree-iconEle]=\"selectMode\"\n          [class.ant-select-tree-icon__customize]=\"selectMode\"\n          [class.ant-tree-iconEle]=\"!selectMode\"\n          [class.ant-tree-icon__customize]=\"!selectMode\"\n        >\n          <i nz-icon *ngIf=\"icon\" [nzType]=\"icon\"></i>\n        </span>\n      </span>\n      <span class=\"ant-tree-title\" [innerHTML]=\"title | nzHighlight: matchedValue:'i':'font-highlight'\"></span>\n      <nz-tree-drop-indicator\n        *ngIf=\"showIndicator\"\n        [dropPosition]=\"dragPosition\"\n        [level]=\"context.level\"\n      ></nz-tree-drop-indicator>\n    </ng-container>\n  `, isInline: true, components: [{ type: NzTreeDropIndicatorComponent, selector: \"nz-tree-drop-indicator\", inputs: [\"dropPosition\", \"level\", \"direction\"], exportAs: [\"NzTreeDropIndicator\"] }], directives: [{ type: i7.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i7.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NzIconDirective, selector: \"[nz-icon]\", inputs: [\"nzSpin\", \"nzRotate\", \"nzType\", \"nzTheme\", \"nzTwotoneColor\", \"nzIconfont\"], exportAs: [\"nzIcon\"] }], pipes: { \"nzHighlight\": i4.NzHighlightPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeTitleComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'nz-tree-node-title',\n                    template: `\n    <ng-template\n      [ngTemplateOutlet]=\"treeTemplate\"\n      [ngTemplateOutletContext]=\"{ $implicit: context, origin: context.origin }\"\n    ></ng-template>\n    <ng-container *ngIf=\"!treeTemplate\">\n      <span\n        *ngIf=\"icon && showIcon\"\n        [class.ant-tree-icon__open]=\"isSwitcherOpen\"\n        [class.ant-tree-icon__close]=\"isSwitcherClose\"\n        [class.ant-tree-icon_loading]=\"isLoading\"\n        [class.ant-select-tree-iconEle]=\"selectMode\"\n        [class.ant-tree-iconEle]=\"!selectMode\"\n      >\n        <span\n          [class.ant-select-tree-iconEle]=\"selectMode\"\n          [class.ant-select-tree-icon__customize]=\"selectMode\"\n          [class.ant-tree-iconEle]=\"!selectMode\"\n          [class.ant-tree-icon__customize]=\"!selectMode\"\n        >\n          <i nz-icon *ngIf=\"icon\" [nzType]=\"icon\"></i>\n        </span>\n      </span>\n      <span class=\"ant-tree-title\" [innerHTML]=\"title | nzHighlight: matchedValue:'i':'font-highlight'\"></span>\n      <nz-tree-drop-indicator\n        *ngIf=\"showIndicator\"\n        [dropPosition]=\"dragPosition\"\n        [level]=\"context.level\"\n      ></nz-tree-drop-indicator>\n    </ng-container>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    preserveWhitespaces: false,\n                    host: {\n                        '[attr.title]': 'title',\n                        '[attr.draggable]': 'canDraggable',\n                        '[attr.aria-grabbed]': 'canDraggable',\n                        '[class.draggable]': 'canDraggable',\n                        '[class.ant-select-tree-node-content-wrapper]': `selectMode`,\n                        '[class.ant-select-tree-node-content-wrapper-open]': `selectMode && isSwitcherOpen`,\n                        '[class.ant-select-tree-node-content-wrapper-close]': `selectMode && isSwitcherClose`,\n                        '[class.ant-select-tree-node-selected]': `selectMode && isSelected`,\n                        '[class.ant-tree-node-content-wrapper]': `!selectMode`,\n                        '[class.ant-tree-node-content-wrapper-open]': `!selectMode && isSwitcherOpen`,\n                        '[class.ant-tree-node-content-wrapper-close]': `!selectMode && isSwitcherClose`,\n                        '[class.ant-tree-node-selected]': `!selectMode && isSelected`\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { searchValue: [{\n                type: Input\n            }], treeTemplate: [{\n                type: Input\n            }], draggable: [{\n                type: Input\n            }], showIcon: [{\n                type: Input\n            }], selectMode: [{\n                type: Input\n            }], context: [{\n                type: Input\n            }], icon: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], isLoading: [{\n                type: Input\n            }], isSelected: [{\n                type: Input\n            }], isDisabled: [{\n                type: Input\n            }], isMatched: [{\n                type: Input\n            }], isExpanded: [{\n                type: Input\n            }], isLeaf: [{\n                type: Input\n            }], showIndicator: [{\n                type: Input\n            }], dragPosition: [{\n                type: Input\n            }] } });\n\nclass NzTreeNodeBuiltinComponent {\n    constructor(nzTreeService, ngZone, renderer, elementRef, cdr, noAnimation) {\n        this.nzTreeService = nzTreeService;\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.cdr = cdr;\n        this.noAnimation = noAnimation;\n        /**\n         * for global property\n         */\n        this.icon = '';\n        this.title = '';\n        this.isLoading = false;\n        this.isSelected = false;\n        this.isDisabled = false;\n        this.isMatched = false;\n        this.isStart = [];\n        this.isEnd = [];\n        this.nzHideUnMatched = false;\n        this.nzNoAnimation = false;\n        this.nzSelectMode = false;\n        this.nzShowIcon = false;\n        this.nzTreeTemplate = null;\n        this.nzSearchValue = '';\n        this.nzDraggable = false;\n        this.nzClick = new EventEmitter();\n        this.nzDblClick = new EventEmitter();\n        this.nzContextMenu = new EventEmitter();\n        this.nzCheckBoxChange = new EventEmitter();\n        this.nzExpandChange = new EventEmitter();\n        this.nzOnDragStart = new EventEmitter();\n        this.nzOnDragEnter = new EventEmitter();\n        this.nzOnDragOver = new EventEmitter();\n        this.nzOnDragLeave = new EventEmitter();\n        this.nzOnDrop = new EventEmitter();\n        this.nzOnDragEnd = new EventEmitter();\n        /**\n         * drag var\n         */\n        this.destroy$ = new Subject();\n        this.dragPos = 2;\n        this.dragPosClass = {\n            0: 'drag-over',\n            1: 'drag-over-gap-bottom',\n            '-1': 'drag-over-gap-top'\n        };\n        this.draggingKey = null;\n        this.showIndicator = false;\n    }\n    /**\n     * default set\n     */\n    get displayStyle() {\n        // to hide unmatched nodes\n        return this.nzSearchValue && this.nzHideUnMatched && !this.isMatched && !this.isExpanded && this.canHide\n            ? 'none'\n            : '';\n    }\n    get isSwitcherOpen() {\n        return this.isExpanded && !this.isLeaf;\n    }\n    get isSwitcherClose() {\n        return !this.isExpanded && !this.isLeaf;\n    }\n    /**\n     * collapse node\n     *\n     * @param event\n     */\n    clickExpand(event) {\n        event.preventDefault();\n        if (!this.isLoading && !this.isLeaf) {\n            // set async state\n            if (this.nzAsyncData && this.nzTreeNode.children.length === 0 && !this.isExpanded) {\n                this.nzTreeNode.isLoading = true;\n            }\n            this.nzTreeNode.setExpanded(!this.isExpanded);\n        }\n        this.nzTreeService.setExpandedNodeList(this.nzTreeNode);\n        const eventNext = this.nzTreeService.formatEvent('expand', this.nzTreeNode, event);\n        this.nzExpandChange.emit(eventNext);\n    }\n    clickSelect(event) {\n        event.preventDefault();\n        if (this.isSelectable && !this.isDisabled) {\n            this.nzTreeNode.isSelected = !this.nzTreeNode.isSelected;\n        }\n        this.nzTreeService.setSelectedNodeList(this.nzTreeNode);\n        const eventNext = this.nzTreeService.formatEvent('click', this.nzTreeNode, event);\n        this.nzClick.emit(eventNext);\n    }\n    dblClick(event) {\n        event.preventDefault();\n        const eventNext = this.nzTreeService.formatEvent('dblclick', this.nzTreeNode, event);\n        this.nzDblClick.emit(eventNext);\n    }\n    contextMenu(event) {\n        event.preventDefault();\n        const eventNext = this.nzTreeService.formatEvent('contextmenu', this.nzTreeNode, event);\n        this.nzContextMenu.emit(eventNext);\n    }\n    /**\n     * check node\n     *\n     * @param event\n     */\n    clickCheckBox(event) {\n        event.preventDefault();\n        // return if node is disabled\n        if (this.isDisabled || this.isDisableCheckbox) {\n            return;\n        }\n        this.nzTreeNode.isChecked = !this.nzTreeNode.isChecked;\n        this.nzTreeNode.isHalfChecked = false;\n        this.nzTreeService.setCheckedNodeList(this.nzTreeNode);\n        const eventNext = this.nzTreeService.formatEvent('check', this.nzTreeNode, event);\n        this.nzCheckBoxChange.emit(eventNext);\n    }\n    clearDragClass() {\n        const dragClass = ['drag-over-gap-top', 'drag-over-gap-bottom', 'drag-over', 'drop-target'];\n        dragClass.forEach(e => {\n            this.renderer.removeClass(this.elementRef.nativeElement, e);\n        });\n    }\n    /**\n     * drag event\n     *\n     * @param e\n     */\n    handleDragStart(e) {\n        try {\n            // ie throw error\n            // firefox-need-it\n            e.dataTransfer.setData('text/plain', this.nzTreeNode.key);\n        }\n        catch (error) {\n            // empty\n        }\n        this.nzTreeService.setSelectedNode(this.nzTreeNode);\n        this.draggingKey = this.nzTreeNode.key;\n        const eventNext = this.nzTreeService.formatEvent('dragstart', this.nzTreeNode, e);\n        this.nzOnDragStart.emit(eventNext);\n    }\n    handleDragEnter(e) {\n        var _a;\n        e.preventDefault();\n        // reset position\n        this.showIndicator = this.nzTreeNode.key !== ((_a = this.nzTreeService.getSelectedNode()) === null || _a === void 0 ? void 0 : _a.key);\n        this.renderIndicator(2);\n        this.ngZone.run(() => {\n            const eventNext = this.nzTreeService.formatEvent('dragenter', this.nzTreeNode, e);\n            this.nzOnDragEnter.emit(eventNext);\n        });\n    }\n    handleDragOver(e) {\n        e.preventDefault();\n        const dropPosition = this.nzTreeService.calcDropPosition(e);\n        if (this.dragPos !== dropPosition) {\n            this.clearDragClass();\n            this.renderIndicator(dropPosition);\n            // leaf node will pass\n            if (!(this.dragPos === 0 && this.isLeaf)) {\n                this.renderer.addClass(this.elementRef.nativeElement, this.dragPosClass[this.dragPos]);\n                this.renderer.addClass(this.elementRef.nativeElement, 'drop-target');\n            }\n        }\n        const eventNext = this.nzTreeService.formatEvent('dragover', this.nzTreeNode, e);\n        this.nzOnDragOver.emit(eventNext);\n    }\n    handleDragLeave(e) {\n        e.preventDefault();\n        this.renderIndicator(2);\n        this.clearDragClass();\n        const eventNext = this.nzTreeService.formatEvent('dragleave', this.nzTreeNode, e);\n        this.nzOnDragLeave.emit(eventNext);\n    }\n    handleDragDrop(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.ngZone.run(() => {\n            this.showIndicator = false;\n            this.clearDragClass();\n            const node = this.nzTreeService.getSelectedNode();\n            if (!node || (node && node.key === this.nzTreeNode.key) || (this.dragPos === 0 && this.isLeaf)) {\n                return;\n            }\n            // pass if node is leafNo\n            const dropEvent = this.nzTreeService.formatEvent('drop', this.nzTreeNode, e);\n            const dragEndEvent = this.nzTreeService.formatEvent('dragend', this.nzTreeNode, e);\n            if (this.nzBeforeDrop) {\n                this.nzBeforeDrop({\n                    dragNode: this.nzTreeService.getSelectedNode(),\n                    node: this.nzTreeNode,\n                    pos: this.dragPos\n                }).subscribe((canDrop) => {\n                    if (canDrop) {\n                        this.nzTreeService.dropAndApply(this.nzTreeNode, this.dragPos);\n                    }\n                    this.nzOnDrop.emit(dropEvent);\n                    this.nzOnDragEnd.emit(dragEndEvent);\n                });\n            }\n            else if (this.nzTreeNode) {\n                this.nzTreeService.dropAndApply(this.nzTreeNode, this.dragPos);\n                this.nzOnDrop.emit(dropEvent);\n            }\n        });\n    }\n    handleDragEnd(e) {\n        e.preventDefault();\n        this.ngZone.run(() => {\n            // if user do not custom beforeDrop\n            if (!this.nzBeforeDrop) {\n                // clear dragging state\n                this.draggingKey = null;\n                const eventNext = this.nzTreeService.formatEvent('dragend', this.nzTreeNode, e);\n                this.nzOnDragEnd.emit(eventNext);\n            }\n        });\n    }\n    /**\n     * Listening to dragging events.\n     */\n    handDragEvent() {\n        this.ngZone.runOutsideAngular(() => {\n            if (this.nzDraggable) {\n                const nativeElement = this.elementRef.nativeElement;\n                this.destroy$ = new Subject();\n                fromEvent(nativeElement, 'dragstart')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((e) => this.handleDragStart(e));\n                fromEvent(nativeElement, 'dragenter')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((e) => this.handleDragEnter(e));\n                fromEvent(nativeElement, 'dragover')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((e) => this.handleDragOver(e));\n                fromEvent(nativeElement, 'dragleave')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((e) => this.handleDragLeave(e));\n                fromEvent(nativeElement, 'drop')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((e) => this.handleDragDrop(e));\n                fromEvent(nativeElement, 'dragend')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((e) => this.handleDragEnd(e));\n            }\n            else {\n                this.destroy$.next();\n                this.destroy$.complete();\n            }\n        });\n    }\n    markForCheck() {\n        this.cdr.markForCheck();\n    }\n    ngOnInit() {\n        this.nzTreeNode.component = this;\n        this.ngZone.runOutsideAngular(() => {\n            fromEvent(this.elementRef.nativeElement, 'mousedown')\n                .pipe(takeUntil(this.destroy$))\n                .subscribe(event => {\n                if (this.nzSelectMode) {\n                    event.preventDefault();\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const { nzDraggable } = changes;\n        if (nzDraggable) {\n            this.handDragEvent();\n        }\n    }\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n    renderIndicator(dropPosition) {\n        this.ngZone.run(() => {\n            var _a;\n            this.showIndicator = dropPosition !== 2;\n            if (this.nzTreeNode.key === ((_a = this.nzTreeService.getSelectedNode()) === null || _a === void 0 ? void 0 : _a.key) || (dropPosition === 0 && this.isLeaf)) {\n                return;\n            }\n            this.dragPos = dropPosition;\n            this.cdr.markForCheck();\n        });\n    }\n}\nNzTreeNodeBuiltinComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeBuiltinComponent, deps: [{ token: i1.NzTreeBaseService }, { token: i0.NgZone }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i4$1.NzNoAnimationDirective, host: true, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nNzTreeNodeBuiltinComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeNodeBuiltinComponent, selector: \"nz-tree-node[builtin]\", inputs: { icon: \"icon\", title: \"title\", isLoading: \"isLoading\", isSelected: \"isSelected\", isDisabled: \"isDisabled\", isMatched: \"isMatched\", isExpanded: \"isExpanded\", isLeaf: \"isLeaf\", isChecked: \"isChecked\", isHalfChecked: \"isHalfChecked\", isDisableCheckbox: \"isDisableCheckbox\", isSelectable: \"isSelectable\", canHide: \"canHide\", isStart: \"isStart\", isEnd: \"isEnd\", nzTreeNode: \"nzTreeNode\", nzShowLine: \"nzShowLine\", nzShowExpand: \"nzShowExpand\", nzCheckable: \"nzCheckable\", nzAsyncData: \"nzAsyncData\", nzHideUnMatched: \"nzHideUnMatched\", nzNoAnimation: \"nzNoAnimation\", nzSelectMode: \"nzSelectMode\", nzShowIcon: \"nzShowIcon\", nzExpandedIcon: \"nzExpandedIcon\", nzTreeTemplate: \"nzTreeTemplate\", nzBeforeDrop: \"nzBeforeDrop\", nzSearchValue: \"nzSearchValue\", nzDraggable: \"nzDraggable\" }, outputs: { nzClick: \"nzClick\", nzDblClick: \"nzDblClick\", nzContextMenu: \"nzContextMenu\", nzCheckBoxChange: \"nzCheckBoxChange\", nzExpandChange: \"nzExpandChange\", nzOnDragStart: \"nzOnDragStart\", nzOnDragEnter: \"nzOnDragEnter\", nzOnDragOver: \"nzOnDragOver\", nzOnDragLeave: \"nzOnDragLeave\", nzOnDrop: \"nzOnDrop\", nzOnDragEnd: \"nzOnDragEnd\" }, host: { properties: { \"class.ant-select-tree-treenode\": \"nzSelectMode\", \"class.ant-select-tree-treenode-disabled\": \"nzSelectMode && isDisabled\", \"class.ant-select-tree-treenode-switcher-open\": \"nzSelectMode && isSwitcherOpen\", \"class.ant-select-tree-treenode-switcher-close\": \"nzSelectMode && isSwitcherClose\", \"class.ant-select-tree-treenode-checkbox-checked\": \"nzSelectMode && isChecked\", \"class.ant-select-tree-treenode-checkbox-indeterminate\": \"nzSelectMode && isHalfChecked\", \"class.ant-select-tree-treenode-selected\": \"nzSelectMode && isSelected\", \"class.ant-select-tree-treenode-loading\": \"nzSelectMode && isLoading\", \"class.ant-tree-treenode\": \"!nzSelectMode\", \"class.ant-tree-treenode-disabled\": \"!nzSelectMode && isDisabled\", \"class.ant-tree-treenode-switcher-open\": \"!nzSelectMode && isSwitcherOpen\", \"class.ant-tree-treenode-switcher-close\": \"!nzSelectMode && isSwitcherClose\", \"class.ant-tree-treenode-checkbox-checked\": \"!nzSelectMode && isChecked\", \"class.ant-tree-treenode-checkbox-indeterminate\": \"!nzSelectMode && isHalfChecked\", \"class.ant-tree-treenode-selected\": \"!nzSelectMode && isSelected\", \"class.ant-tree-treenode-loading\": \"!nzSelectMode && isLoading\", \"class.dragging\": \"draggingKey === nzTreeNode.key\", \"style.display\": \"displayStyle\" } }, exportAs: [\"nzTreeBuiltinNode\"], usesOnChanges: true, ngImport: i0, template: `\n    <nz-tree-indent\n      [nzTreeLevel]=\"nzTreeNode.level\"\n      [nzSelectMode]=\"nzSelectMode\"\n      [nzIsStart]=\"isStart\"\n      [nzIsEnd]=\"isEnd\"\n    ></nz-tree-indent>\n    <nz-tree-node-switcher\n      *ngIf=\"nzShowExpand\"\n      [nzShowExpand]=\"nzShowExpand\"\n      [nzShowLine]=\"nzShowLine\"\n      [nzExpandedIcon]=\"nzExpandedIcon\"\n      [nzSelectMode]=\"nzSelectMode\"\n      [context]=\"nzTreeNode\"\n      [isLeaf]=\"isLeaf\"\n      [isExpanded]=\"isExpanded\"\n      [isLoading]=\"isLoading\"\n      (click)=\"clickExpand($event)\"\n    ></nz-tree-node-switcher>\n    <nz-tree-node-checkbox\n      builtin\n      *ngIf=\"nzCheckable\"\n      (click)=\"clickCheckBox($event)\"\n      [nzSelectMode]=\"nzSelectMode\"\n      [isChecked]=\"isChecked\"\n      [isHalfChecked]=\"isHalfChecked\"\n      [isDisabled]=\"isDisabled\"\n      [isDisableCheckbox]=\"isDisableCheckbox\"\n    ></nz-tree-node-checkbox>\n    <nz-tree-node-title\n      [icon]=\"icon\"\n      [title]=\"title\"\n      [isLoading]=\"isLoading\"\n      [isSelected]=\"isSelected\"\n      [isDisabled]=\"isDisabled\"\n      [isMatched]=\"isMatched\"\n      [isExpanded]=\"isExpanded\"\n      [isLeaf]=\"isLeaf\"\n      [searchValue]=\"nzSearchValue\"\n      [treeTemplate]=\"nzTreeTemplate\"\n      [draggable]=\"nzDraggable\"\n      [showIcon]=\"nzShowIcon\"\n      [selectMode]=\"nzSelectMode\"\n      [context]=\"nzTreeNode\"\n      [showIndicator]=\"showIndicator\"\n      [dragPosition]=\"dragPos\"\n      (dblclick)=\"dblClick($event)\"\n      (click)=\"clickSelect($event)\"\n      (contextmenu)=\"contextMenu($event)\"\n    ></nz-tree-node-title>\n  `, isInline: true, components: [{ type: NzTreeIndentComponent, selector: \"nz-tree-indent\", inputs: [\"nzTreeLevel\", \"nzIsStart\", \"nzIsEnd\", \"nzSelectMode\"], exportAs: [\"nzTreeIndent\"] }, { type: NzTreeNodeSwitcherComponent, selector: \"nz-tree-node-switcher\", inputs: [\"nzShowExpand\", \"nzShowLine\", \"nzExpandedIcon\", \"nzSelectMode\", \"context\", \"isLeaf\", \"isLoading\", \"isExpanded\"] }, { type: NzTreeNodeBuiltinCheckboxComponent, selector: \"nz-tree-node-checkbox[builtin]\", inputs: [\"nzSelectMode\", \"isChecked\", \"isHalfChecked\", \"isDisabled\", \"isDisableCheckbox\"] }, { type: NzTreeNodeTitleComponent, selector: \"nz-tree-node-title\", inputs: [\"searchValue\", \"treeTemplate\", \"draggable\", \"showIcon\", \"selectMode\", \"context\", \"icon\", \"title\", \"isLoading\", \"isSelected\", \"isDisabled\", \"isMatched\", \"isExpanded\", \"isLeaf\", \"showIndicator\", \"dragPosition\"] }], directives: [{ type: i7.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\n__decorate([\n    InputBoolean()\n], NzTreeNodeBuiltinComponent.prototype, \"nzShowLine\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeNodeBuiltinComponent.prototype, \"nzShowExpand\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeNodeBuiltinComponent.prototype, \"nzCheckable\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeNodeBuiltinComponent.prototype, \"nzAsyncData\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeNodeBuiltinComponent.prototype, \"nzHideUnMatched\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeNodeBuiltinComponent.prototype, \"nzNoAnimation\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeNodeBuiltinComponent.prototype, \"nzSelectMode\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeNodeBuiltinComponent.prototype, \"nzShowIcon\", void 0);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeBuiltinComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'nz-tree-node[builtin]',\n                    exportAs: 'nzTreeBuiltinNode',\n                    template: `\n    <nz-tree-indent\n      [nzTreeLevel]=\"nzTreeNode.level\"\n      [nzSelectMode]=\"nzSelectMode\"\n      [nzIsStart]=\"isStart\"\n      [nzIsEnd]=\"isEnd\"\n    ></nz-tree-indent>\n    <nz-tree-node-switcher\n      *ngIf=\"nzShowExpand\"\n      [nzShowExpand]=\"nzShowExpand\"\n      [nzShowLine]=\"nzShowLine\"\n      [nzExpandedIcon]=\"nzExpandedIcon\"\n      [nzSelectMode]=\"nzSelectMode\"\n      [context]=\"nzTreeNode\"\n      [isLeaf]=\"isLeaf\"\n      [isExpanded]=\"isExpanded\"\n      [isLoading]=\"isLoading\"\n      (click)=\"clickExpand($event)\"\n    ></nz-tree-node-switcher>\n    <nz-tree-node-checkbox\n      builtin\n      *ngIf=\"nzCheckable\"\n      (click)=\"clickCheckBox($event)\"\n      [nzSelectMode]=\"nzSelectMode\"\n      [isChecked]=\"isChecked\"\n      [isHalfChecked]=\"isHalfChecked\"\n      [isDisabled]=\"isDisabled\"\n      [isDisableCheckbox]=\"isDisableCheckbox\"\n    ></nz-tree-node-checkbox>\n    <nz-tree-node-title\n      [icon]=\"icon\"\n      [title]=\"title\"\n      [isLoading]=\"isLoading\"\n      [isSelected]=\"isSelected\"\n      [isDisabled]=\"isDisabled\"\n      [isMatched]=\"isMatched\"\n      [isExpanded]=\"isExpanded\"\n      [isLeaf]=\"isLeaf\"\n      [searchValue]=\"nzSearchValue\"\n      [treeTemplate]=\"nzTreeTemplate\"\n      [draggable]=\"nzDraggable\"\n      [showIcon]=\"nzShowIcon\"\n      [selectMode]=\"nzSelectMode\"\n      [context]=\"nzTreeNode\"\n      [showIndicator]=\"showIndicator\"\n      [dragPosition]=\"dragPos\"\n      (dblclick)=\"dblClick($event)\"\n      (click)=\"clickSelect($event)\"\n      (contextmenu)=\"contextMenu($event)\"\n    ></nz-tree-node-title>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    preserveWhitespaces: false,\n                    host: {\n                        '[class.ant-select-tree-treenode]': `nzSelectMode`,\n                        '[class.ant-select-tree-treenode-disabled]': `nzSelectMode && isDisabled`,\n                        '[class.ant-select-tree-treenode-switcher-open]': `nzSelectMode && isSwitcherOpen`,\n                        '[class.ant-select-tree-treenode-switcher-close]': `nzSelectMode && isSwitcherClose`,\n                        '[class.ant-select-tree-treenode-checkbox-checked]': `nzSelectMode && isChecked`,\n                        '[class.ant-select-tree-treenode-checkbox-indeterminate]': `nzSelectMode && isHalfChecked`,\n                        '[class.ant-select-tree-treenode-selected]': `nzSelectMode && isSelected`,\n                        '[class.ant-select-tree-treenode-loading]': `nzSelectMode && isLoading`,\n                        '[class.ant-tree-treenode]': `!nzSelectMode`,\n                        '[class.ant-tree-treenode-disabled]': `!nzSelectMode && isDisabled`,\n                        '[class.ant-tree-treenode-switcher-open]': `!nzSelectMode && isSwitcherOpen`,\n                        '[class.ant-tree-treenode-switcher-close]': `!nzSelectMode && isSwitcherClose`,\n                        '[class.ant-tree-treenode-checkbox-checked]': `!nzSelectMode && isChecked`,\n                        '[class.ant-tree-treenode-checkbox-indeterminate]': `!nzSelectMode && isHalfChecked`,\n                        '[class.ant-tree-treenode-selected]': `!nzSelectMode && isSelected`,\n                        '[class.ant-tree-treenode-loading]': `!nzSelectMode && isLoading`,\n                        '[class.dragging]': `draggingKey === nzTreeNode.key`,\n                        '[style.display]': 'displayStyle'\n                    }\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i1.NzTreeBaseService }, { type: i0.NgZone }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i4$1.NzNoAnimationDirective, decorators: [{\n                        type: Host\n                    }, {\n                        type: Optional\n                    }] }];\n    }, propDecorators: { icon: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], isLoading: [{\n                type: Input\n            }], isSelected: [{\n                type: Input\n            }], isDisabled: [{\n                type: Input\n            }], isMatched: [{\n                type: Input\n            }], isExpanded: [{\n                type: Input\n            }], isLeaf: [{\n                type: Input\n            }], isChecked: [{\n                type: Input\n            }], isHalfChecked: [{\n                type: Input\n            }], isDisableCheckbox: [{\n                type: Input\n            }], isSelectable: [{\n                type: Input\n            }], canHide: [{\n                type: Input\n            }], isStart: [{\n                type: Input\n            }], isEnd: [{\n                type: Input\n            }], nzTreeNode: [{\n                type: Input\n            }], nzShowLine: [{\n                type: Input\n            }], nzShowExpand: [{\n                type: Input\n            }], nzCheckable: [{\n                type: Input\n            }], nzAsyncData: [{\n                type: Input\n            }], nzHideUnMatched: [{\n                type: Input\n            }], nzNoAnimation: [{\n                type: Input\n            }], nzSelectMode: [{\n                type: Input\n            }], nzShowIcon: [{\n                type: Input\n            }], nzExpandedIcon: [{\n                type: Input\n            }], nzTreeTemplate: [{\n                type: Input\n            }], nzBeforeDrop: [{\n                type: Input\n            }], nzSearchValue: [{\n                type: Input\n            }], nzDraggable: [{\n                type: Input\n            }], nzClick: [{\n                type: Output\n            }], nzDblClick: [{\n                type: Output\n            }], nzContextMenu: [{\n                type: Output\n            }], nzCheckBoxChange: [{\n                type: Output\n            }], nzExpandChange: [{\n                type: Output\n            }], nzOnDragStart: [{\n                type: Output\n            }], nzOnDragEnter: [{\n                type: Output\n            }], nzOnDragOver: [{\n                type: Output\n            }], nzOnDragLeave: [{\n                type: Output\n            }], nzOnDrop: [{\n                type: Output\n            }], nzOnDragEnd: [{\n                type: Output\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeService extends NzTreeBaseService {\n    constructor() {\n        super();\n    }\n}\nNzTreeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNzTreeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\nfunction NzTreeServiceFactory(higherOrderService, treeService) {\n    return higherOrderService ? higherOrderService : treeService;\n}\nconst NZ_CONFIG_MODULE_NAME = 'tree';\nclass NzTreeComponent extends NzTreeBase {\n    // Handle emit event end\n    constructor(nzTreeService, nzConfigService, cdr, directionality, noAnimation) {\n        super(nzTreeService);\n        this.nzConfigService = nzConfigService;\n        this.cdr = cdr;\n        this.directionality = directionality;\n        this.noAnimation = noAnimation;\n        this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n        this.nzShowIcon = false;\n        this.nzHideUnMatched = false;\n        this.nzBlockNode = false;\n        this.nzExpandAll = false;\n        this.nzSelectMode = false;\n        this.nzCheckStrictly = false;\n        this.nzShowExpand = true;\n        this.nzShowLine = false;\n        this.nzCheckable = false;\n        this.nzAsyncData = false;\n        this.nzDraggable = false;\n        this.nzMultiple = false;\n        this.nzVirtualItemSize = 28;\n        this.nzVirtualMaxBufferPx = 500;\n        this.nzVirtualMinBufferPx = 28;\n        this.nzVirtualHeight = null;\n        this.nzData = [];\n        this.nzExpandedKeys = [];\n        this.nzSelectedKeys = [];\n        this.nzCheckedKeys = [];\n        this.nzSearchValue = '';\n        this.nzFlattenNodes = [];\n        this.beforeInit = true;\n        this.dir = 'ltr';\n        this.nzExpandedKeysChange = new EventEmitter();\n        this.nzSelectedKeysChange = new EventEmitter();\n        this.nzCheckedKeysChange = new EventEmitter();\n        this.nzSearchValueChange = new EventEmitter();\n        this.nzClick = new EventEmitter();\n        this.nzDblClick = new EventEmitter();\n        this.nzContextMenu = new EventEmitter();\n        this.nzCheckBoxChange = new EventEmitter();\n        this.nzExpandChange = new EventEmitter();\n        this.nzOnDragStart = new EventEmitter();\n        this.nzOnDragEnter = new EventEmitter();\n        this.nzOnDragOver = new EventEmitter();\n        this.nzOnDragLeave = new EventEmitter();\n        this.nzOnDrop = new EventEmitter();\n        this.nzOnDragEnd = new EventEmitter();\n        this.HIDDEN_STYLE = {\n            width: 0,\n            height: 0,\n            display: 'flex',\n            overflow: 'hidden',\n            opacity: 0,\n            border: 0,\n            padding: 0,\n            margin: 0\n        };\n        this.HIDDEN_NODE_STYLE = {\n            position: 'absolute',\n            pointerEvents: 'none',\n            visibility: 'hidden',\n            height: 0,\n            overflow: 'hidden'\n        };\n        this.destroy$ = new Subject();\n        this.onChange = () => null;\n        this.onTouched = () => null;\n    }\n    writeValue(value) {\n        this.handleNzData(value);\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Render all properties of nzTree\n     *\n     * @param changes: all changes from @Input\n     */\n    renderTreeProperties(changes) {\n        let useDefaultExpandedKeys = false;\n        let expandAll = false;\n        const { nzData, nzExpandedKeys, nzSelectedKeys, nzCheckedKeys, nzCheckStrictly, nzExpandAll, nzMultiple, nzSearchValue } = changes;\n        if (nzExpandAll) {\n            useDefaultExpandedKeys = true;\n            expandAll = this.nzExpandAll;\n        }\n        if (nzMultiple) {\n            this.nzTreeService.isMultiple = this.nzMultiple;\n        }\n        if (nzCheckStrictly) {\n            this.nzTreeService.isCheckStrictly = this.nzCheckStrictly;\n        }\n        if (nzData) {\n            this.handleNzData(this.nzData);\n        }\n        if (nzCheckedKeys) {\n            this.handleCheckedKeys(this.nzCheckedKeys);\n        }\n        if (nzCheckStrictly) {\n            this.handleCheckedKeys(null);\n        }\n        if (nzExpandedKeys || nzExpandAll) {\n            useDefaultExpandedKeys = true;\n            this.handleExpandedKeys(expandAll || this.nzExpandedKeys);\n        }\n        if (nzSelectedKeys) {\n            this.handleSelectedKeys(this.nzSelectedKeys, this.nzMultiple);\n        }\n        if (nzSearchValue) {\n            if (!(nzSearchValue.firstChange && !this.nzSearchValue)) {\n                useDefaultExpandedKeys = false;\n                this.handleSearchValue(nzSearchValue.currentValue, this.nzSearchFunc);\n                this.nzSearchValueChange.emit(this.nzTreeService.formatEvent('search', null, null));\n            }\n        }\n        // flatten data\n        const currentExpandedKeys = this.getExpandedNodeList().map(v => v.key);\n        const newExpandedKeys = useDefaultExpandedKeys ? expandAll || this.nzExpandedKeys : currentExpandedKeys;\n        this.handleFlattenNodes(this.nzTreeService.rootNodes, newExpandedKeys);\n    }\n    trackByFlattenNode(_, node) {\n        return node.key;\n    }\n    // Deal with properties\n    /**\n     * nzData\n     *\n     * @param value\n     */\n    handleNzData(value) {\n        if (Array.isArray(value)) {\n            const data = this.coerceTreeNodes(value);\n            this.nzTreeService.initTree(data);\n        }\n    }\n    handleFlattenNodes(data, expandKeys = []) {\n        this.nzTreeService.flattenTreeData(data, expandKeys);\n    }\n    handleCheckedKeys(keys) {\n        this.nzTreeService.conductCheck(keys, this.nzCheckStrictly);\n    }\n    handleExpandedKeys(keys = []) {\n        this.nzTreeService.conductExpandedKeys(keys);\n    }\n    handleSelectedKeys(keys, isMulti) {\n        this.nzTreeService.conductSelectedKeys(keys, isMulti);\n    }\n    handleSearchValue(value, searchFunc) {\n        const dataList = flattenTreeData(this.nzTreeService.rootNodes, true).map(v => v.data);\n        const checkIfMatched = (node) => {\n            if (searchFunc) {\n                return searchFunc(node.origin);\n            }\n            return !value || !node.title.toLowerCase().includes(value.toLowerCase()) ? false : true;\n        };\n        dataList.forEach(v => {\n            v.isMatched = checkIfMatched(v);\n            v.canHide = !v.isMatched;\n            if (!v.isMatched) {\n                v.setExpanded(false);\n                this.nzTreeService.setExpandedNodeList(v);\n            }\n            else {\n                // expand\n                this.nzTreeService.expandNodeAllParentBySearch(v);\n            }\n            this.nzTreeService.setMatchedNodeList(v);\n        });\n    }\n    /**\n     * Handle emit event\n     *\n     * @param event\n     * handle each event\n     */\n    eventTriggerChanged(event) {\n        const node = event.node;\n        switch (event.eventName) {\n            case 'expand':\n                this.renderTree();\n                this.nzExpandChange.emit(event);\n                break;\n            case 'click':\n                this.nzClick.emit(event);\n                break;\n            case 'dblclick':\n                this.nzDblClick.emit(event);\n                break;\n            case 'contextmenu':\n                this.nzContextMenu.emit(event);\n                break;\n            case 'check':\n                // Render checked state with nodes' property `isChecked`\n                this.nzTreeService.setCheckedNodeList(node);\n                if (!this.nzCheckStrictly) {\n                    this.nzTreeService.conduct(node);\n                }\n                // Cause check method will rerender list, so we need recover it and next the new event to user\n                const eventNext = this.nzTreeService.formatEvent('check', node, event.event);\n                this.nzCheckBoxChange.emit(eventNext);\n                break;\n            case 'dragstart':\n                // if node is expanded\n                if (node.isExpanded) {\n                    node.setExpanded(!node.isExpanded);\n                    this.renderTree();\n                }\n                this.nzOnDragStart.emit(event);\n                break;\n            case 'dragenter':\n                const selectedNode = this.nzTreeService.getSelectedNode();\n                if (selectedNode && selectedNode.key !== node.key && !node.isExpanded && !node.isLeaf) {\n                    node.setExpanded(true);\n                    this.renderTree();\n                }\n                this.nzOnDragEnter.emit(event);\n                break;\n            case 'dragover':\n                this.nzOnDragOver.emit(event);\n                break;\n            case 'dragleave':\n                this.nzOnDragLeave.emit(event);\n                break;\n            case 'dragend':\n                this.nzOnDragEnd.emit(event);\n                break;\n            case 'drop':\n                this.renderTree();\n                this.nzOnDrop.emit(event);\n                break;\n        }\n    }\n    /**\n     * Click expand icon\n     */\n    renderTree() {\n        this.handleFlattenNodes(this.nzTreeService.rootNodes, this.getExpandedNodeList().map(v => v.key));\n        this.cdr.markForCheck();\n    }\n    ngOnInit() {\n        var _a;\n        this.nzTreeService.flattenNodes$.pipe(takeUntil(this.destroy$)).subscribe(data => {\n            this.nzFlattenNodes = data;\n            this.cdr.markForCheck();\n        });\n        this.dir = this.directionality.value;\n        (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe((direction) => {\n            this.dir = direction;\n            this.cdr.detectChanges();\n        });\n    }\n    ngOnChanges(changes) {\n        this.renderTreeProperties(changes);\n    }\n    ngAfterViewInit() {\n        this.beforeInit = false;\n    }\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\nNzTreeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeComponent, deps: [{ token: i1.NzTreeBaseService }, { token: i2$1.NzConfigService }, { token: i0.ChangeDetectorRef }, { token: i3$1.Directionality, optional: true }, { token: i4$1.NzNoAnimationDirective, host: true, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nNzTreeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeComponent, selector: \"nz-tree\", inputs: { nzShowIcon: \"nzShowIcon\", nzHideUnMatched: \"nzHideUnMatched\", nzBlockNode: \"nzBlockNode\", nzExpandAll: \"nzExpandAll\", nzSelectMode: \"nzSelectMode\", nzCheckStrictly: \"nzCheckStrictly\", nzShowExpand: \"nzShowExpand\", nzShowLine: \"nzShowLine\", nzCheckable: \"nzCheckable\", nzAsyncData: \"nzAsyncData\", nzDraggable: \"nzDraggable\", nzMultiple: \"nzMultiple\", nzExpandedIcon: \"nzExpandedIcon\", nzVirtualItemSize: \"nzVirtualItemSize\", nzVirtualMaxBufferPx: \"nzVirtualMaxBufferPx\", nzVirtualMinBufferPx: \"nzVirtualMinBufferPx\", nzVirtualHeight: \"nzVirtualHeight\", nzTreeTemplate: \"nzTreeTemplate\", nzBeforeDrop: \"nzBeforeDrop\", nzData: \"nzData\", nzExpandedKeys: \"nzExpandedKeys\", nzSelectedKeys: \"nzSelectedKeys\", nzCheckedKeys: \"nzCheckedKeys\", nzSearchValue: \"nzSearchValue\", nzSearchFunc: \"nzSearchFunc\" }, outputs: { nzExpandedKeysChange: \"nzExpandedKeysChange\", nzSelectedKeysChange: \"nzSelectedKeysChange\", nzCheckedKeysChange: \"nzCheckedKeysChange\", nzSearchValueChange: \"nzSearchValueChange\", nzClick: \"nzClick\", nzDblClick: \"nzDblClick\", nzContextMenu: \"nzContextMenu\", nzCheckBoxChange: \"nzCheckBoxChange\", nzExpandChange: \"nzExpandChange\", nzOnDragStart: \"nzOnDragStart\", nzOnDragEnter: \"nzOnDragEnter\", nzOnDragOver: \"nzOnDragOver\", nzOnDragLeave: \"nzOnDragLeave\", nzOnDrop: \"nzOnDrop\", nzOnDragEnd: \"nzOnDragEnd\" }, host: { properties: { \"class.ant-select-tree\": \"nzSelectMode\", \"class.ant-select-tree-show-line\": \"nzSelectMode && nzShowLine\", \"class.ant-select-tree-icon-hide\": \"nzSelectMode && !nzShowIcon\", \"class.ant-select-tree-block-node\": \"nzSelectMode && nzBlockNode\", \"class.ant-tree\": \"!nzSelectMode\", \"class.ant-tree-rtl\": \"dir === 'rtl'\", \"class.ant-tree-show-line\": \"!nzSelectMode && nzShowLine\", \"class.ant-tree-icon-hide\": \"!nzSelectMode && !nzShowIcon\", \"class.ant-tree-block-node\": \"!nzSelectMode && nzBlockNode\", \"class.draggable-tree\": \"nzDraggable\" } }, providers: [\n        NzTreeService,\n        {\n            provide: NzTreeBaseService,\n            useFactory: NzTreeServiceFactory,\n            deps: [[new SkipSelf(), new Optional(), NzTreeHigherOrderServiceToken], NzTreeService]\n        },\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => NzTreeComponent),\n            multi: true\n        }\n    ], queries: [{ propertyName: \"nzTreeTemplateChild\", first: true, predicate: [\"nzTreeTemplate\"], descendants: true, static: true }], viewQueries: [{ propertyName: \"cdkVirtualScrollViewport\", first: true, predicate: CdkVirtualScrollViewport, descendants: true, read: CdkVirtualScrollViewport }], exportAs: [\"nzTree\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\n    <div>\n      <input [ngStyle]=\"HIDDEN_STYLE\" />\n    </div>\n    <div class=\"ant-tree-treenode\" [ngStyle]=\"HIDDEN_NODE_STYLE\">\n      <div class=\"ant-tree-indent\">\n        <div class=\"ant-tree-indent-unit\"></div>\n      </div>\n    </div>\n    <div class=\"ant-tree-list\" [class.ant-select-tree-list]=\"nzSelectMode\" style=\"position: relative\">\n      <cdk-virtual-scroll-viewport\n        *ngIf=\"nzVirtualHeight\"\n        [class.ant-select-tree-list-holder-inner]=\"nzSelectMode\"\n        [class.ant-tree-list-holder-inner]=\"!nzSelectMode\"\n        [itemSize]=\"nzVirtualItemSize\"\n        [minBufferPx]=\"nzVirtualMinBufferPx\"\n        [maxBufferPx]=\"nzVirtualMaxBufferPx\"\n        [style.height]=\"nzVirtualHeight\"\n      >\n        <ng-container *cdkVirtualFor=\"let node of nzFlattenNodes; trackBy: trackByFlattenNode\">\n          <ng-template [ngTemplateOutlet]=\"nodeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n        </ng-container>\n      </cdk-virtual-scroll-viewport>\n\n      <div\n        *ngIf=\"!nzVirtualHeight\"\n        [class.ant-select-tree-list-holder-inner]=\"nzSelectMode\"\n        [class.ant-tree-list-holder-inner]=\"!nzSelectMode\"\n        [@.disabled]=\"beforeInit || noAnimation?.nzNoAnimation\"\n        [nzNoAnimation]=\"noAnimation?.nzNoAnimation\"\n        [@treeCollapseMotion]=\"nzFlattenNodes.length\"\n      >\n        <ng-container *ngFor=\"let node of nzFlattenNodes; trackBy: trackByFlattenNode\">\n          <ng-template [ngTemplateOutlet]=\"nodeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n        </ng-container>\n      </div>\n    </div>\n    <ng-template #nodeTemplate let-treeNode>\n      <nz-tree-node\n        builtin\n        [icon]=\"treeNode.icon\"\n        [title]=\"treeNode.title\"\n        [isLoading]=\"treeNode.isLoading\"\n        [isSelected]=\"treeNode.isSelected\"\n        [isDisabled]=\"treeNode.isDisabled\"\n        [isMatched]=\"treeNode.isMatched\"\n        [isExpanded]=\"treeNode.isExpanded\"\n        [isLeaf]=\"treeNode.isLeaf\"\n        [isStart]=\"treeNode.isStart\"\n        [isEnd]=\"treeNode.isEnd\"\n        [isChecked]=\"treeNode.isChecked\"\n        [isHalfChecked]=\"treeNode.isHalfChecked\"\n        [isDisableCheckbox]=\"treeNode.isDisableCheckbox\"\n        [isSelectable]=\"treeNode.isSelectable\"\n        [canHide]=\"treeNode.canHide\"\n        [nzTreeNode]=\"treeNode\"\n        [nzSelectMode]=\"nzSelectMode\"\n        [nzShowLine]=\"nzShowLine\"\n        [nzExpandedIcon]=\"nzExpandedIcon\"\n        [nzDraggable]=\"nzDraggable\"\n        [nzCheckable]=\"nzCheckable\"\n        [nzShowExpand]=\"nzShowExpand\"\n        [nzAsyncData]=\"nzAsyncData\"\n        [nzSearchValue]=\"nzSearchValue\"\n        [nzHideUnMatched]=\"nzHideUnMatched\"\n        [nzBeforeDrop]=\"nzBeforeDrop\"\n        [nzShowIcon]=\"nzShowIcon\"\n        [nzTreeTemplate]=\"nzTreeTemplate || nzTreeTemplateChild\"\n        (nzExpandChange)=\"eventTriggerChanged($event)\"\n        (nzClick)=\"eventTriggerChanged($event)\"\n        (nzDblClick)=\"eventTriggerChanged($event)\"\n        (nzContextMenu)=\"eventTriggerChanged($event)\"\n        (nzCheckBoxChange)=\"eventTriggerChanged($event)\"\n        (nzOnDragStart)=\"eventTriggerChanged($event)\"\n        (nzOnDragEnter)=\"eventTriggerChanged($event)\"\n        (nzOnDragOver)=\"eventTriggerChanged($event)\"\n        (nzOnDragLeave)=\"eventTriggerChanged($event)\"\n        (nzOnDragEnd)=\"eventTriggerChanged($event)\"\n        (nzOnDrop)=\"eventTriggerChanged($event)\"\n      ></nz-tree-node>\n    </ng-template>\n  `, isInline: true, components: [{ type: i5.CdkVirtualScrollViewport, selector: \"cdk-virtual-scroll-viewport\", inputs: [\"orientation\", \"appendOnly\"], outputs: [\"scrolledIndexChange\"] }, { type: NzTreeNodeBuiltinComponent, selector: \"nz-tree-node[builtin]\", inputs: [\"icon\", \"title\", \"isLoading\", \"isSelected\", \"isDisabled\", \"isMatched\", \"isExpanded\", \"isLeaf\", \"isChecked\", \"isHalfChecked\", \"isDisableCheckbox\", \"isSelectable\", \"canHide\", \"isStart\", \"isEnd\", \"nzTreeNode\", \"nzShowLine\", \"nzShowExpand\", \"nzCheckable\", \"nzAsyncData\", \"nzHideUnMatched\", \"nzNoAnimation\", \"nzSelectMode\", \"nzShowIcon\", \"nzExpandedIcon\", \"nzTreeTemplate\", \"nzBeforeDrop\", \"nzSearchValue\", \"nzDraggable\"], outputs: [\"nzClick\", \"nzDblClick\", \"nzContextMenu\", \"nzCheckBoxChange\", \"nzExpandChange\", \"nzOnDragStart\", \"nzOnDragEnter\", \"nzOnDragOver\", \"nzOnDragLeave\", \"nzOnDrop\", \"nzOnDragEnd\"], exportAs: [\"nzTreeBuiltinNode\"] }], directives: [{ type: i7.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i7.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i5.CdkFixedSizeVirtualScroll, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: [\"itemSize\", \"minBufferPx\", \"maxBufferPx\"] }, { type: i5.CdkVirtualForOf, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: [\"cdkVirtualForOf\", \"cdkVirtualForTrackBy\", \"cdkVirtualForTemplate\", \"cdkVirtualForTemplateCacheSize\"] }, { type: i7.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i4$1.NzNoAnimationDirective, selector: \"[nzNoAnimation]\", inputs: [\"nzNoAnimation\"], exportAs: [\"nzNoAnimation\"] }, { type: i7.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [treeCollapseMotion], changeDetection: i0.ChangeDetectionStrategy.OnPush });\n__decorate([\n    InputBoolean(),\n    WithConfig()\n], NzTreeComponent.prototype, \"nzShowIcon\", void 0);\n__decorate([\n    InputBoolean(),\n    WithConfig()\n], NzTreeComponent.prototype, \"nzHideUnMatched\", void 0);\n__decorate([\n    InputBoolean(),\n    WithConfig()\n], NzTreeComponent.prototype, \"nzBlockNode\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeComponent.prototype, \"nzExpandAll\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeComponent.prototype, \"nzSelectMode\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeComponent.prototype, \"nzCheckStrictly\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeComponent.prototype, \"nzShowExpand\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeComponent.prototype, \"nzShowLine\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeComponent.prototype, \"nzCheckable\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeComponent.prototype, \"nzAsyncData\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeComponent.prototype, \"nzDraggable\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeComponent.prototype, \"nzMultiple\", void 0);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'nz-tree',\n                    exportAs: 'nzTree',\n                    animations: [treeCollapseMotion],\n                    template: `\n    <div>\n      <input [ngStyle]=\"HIDDEN_STYLE\" />\n    </div>\n    <div class=\"ant-tree-treenode\" [ngStyle]=\"HIDDEN_NODE_STYLE\">\n      <div class=\"ant-tree-indent\">\n        <div class=\"ant-tree-indent-unit\"></div>\n      </div>\n    </div>\n    <div class=\"ant-tree-list\" [class.ant-select-tree-list]=\"nzSelectMode\" style=\"position: relative\">\n      <cdk-virtual-scroll-viewport\n        *ngIf=\"nzVirtualHeight\"\n        [class.ant-select-tree-list-holder-inner]=\"nzSelectMode\"\n        [class.ant-tree-list-holder-inner]=\"!nzSelectMode\"\n        [itemSize]=\"nzVirtualItemSize\"\n        [minBufferPx]=\"nzVirtualMinBufferPx\"\n        [maxBufferPx]=\"nzVirtualMaxBufferPx\"\n        [style.height]=\"nzVirtualHeight\"\n      >\n        <ng-container *cdkVirtualFor=\"let node of nzFlattenNodes; trackBy: trackByFlattenNode\">\n          <ng-template [ngTemplateOutlet]=\"nodeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n        </ng-container>\n      </cdk-virtual-scroll-viewport>\n\n      <div\n        *ngIf=\"!nzVirtualHeight\"\n        [class.ant-select-tree-list-holder-inner]=\"nzSelectMode\"\n        [class.ant-tree-list-holder-inner]=\"!nzSelectMode\"\n        [@.disabled]=\"beforeInit || noAnimation?.nzNoAnimation\"\n        [nzNoAnimation]=\"noAnimation?.nzNoAnimation\"\n        [@treeCollapseMotion]=\"nzFlattenNodes.length\"\n      >\n        <ng-container *ngFor=\"let node of nzFlattenNodes; trackBy: trackByFlattenNode\">\n          <ng-template [ngTemplateOutlet]=\"nodeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n        </ng-container>\n      </div>\n    </div>\n    <ng-template #nodeTemplate let-treeNode>\n      <nz-tree-node\n        builtin\n        [icon]=\"treeNode.icon\"\n        [title]=\"treeNode.title\"\n        [isLoading]=\"treeNode.isLoading\"\n        [isSelected]=\"treeNode.isSelected\"\n        [isDisabled]=\"treeNode.isDisabled\"\n        [isMatched]=\"treeNode.isMatched\"\n        [isExpanded]=\"treeNode.isExpanded\"\n        [isLeaf]=\"treeNode.isLeaf\"\n        [isStart]=\"treeNode.isStart\"\n        [isEnd]=\"treeNode.isEnd\"\n        [isChecked]=\"treeNode.isChecked\"\n        [isHalfChecked]=\"treeNode.isHalfChecked\"\n        [isDisableCheckbox]=\"treeNode.isDisableCheckbox\"\n        [isSelectable]=\"treeNode.isSelectable\"\n        [canHide]=\"treeNode.canHide\"\n        [nzTreeNode]=\"treeNode\"\n        [nzSelectMode]=\"nzSelectMode\"\n        [nzShowLine]=\"nzShowLine\"\n        [nzExpandedIcon]=\"nzExpandedIcon\"\n        [nzDraggable]=\"nzDraggable\"\n        [nzCheckable]=\"nzCheckable\"\n        [nzShowExpand]=\"nzShowExpand\"\n        [nzAsyncData]=\"nzAsyncData\"\n        [nzSearchValue]=\"nzSearchValue\"\n        [nzHideUnMatched]=\"nzHideUnMatched\"\n        [nzBeforeDrop]=\"nzBeforeDrop\"\n        [nzShowIcon]=\"nzShowIcon\"\n        [nzTreeTemplate]=\"nzTreeTemplate || nzTreeTemplateChild\"\n        (nzExpandChange)=\"eventTriggerChanged($event)\"\n        (nzClick)=\"eventTriggerChanged($event)\"\n        (nzDblClick)=\"eventTriggerChanged($event)\"\n        (nzContextMenu)=\"eventTriggerChanged($event)\"\n        (nzCheckBoxChange)=\"eventTriggerChanged($event)\"\n        (nzOnDragStart)=\"eventTriggerChanged($event)\"\n        (nzOnDragEnter)=\"eventTriggerChanged($event)\"\n        (nzOnDragOver)=\"eventTriggerChanged($event)\"\n        (nzOnDragLeave)=\"eventTriggerChanged($event)\"\n        (nzOnDragEnd)=\"eventTriggerChanged($event)\"\n        (nzOnDrop)=\"eventTriggerChanged($event)\"\n      ></nz-tree-node>\n    </ng-template>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    providers: [\n                        NzTreeService,\n                        {\n                            provide: NzTreeBaseService,\n                            useFactory: NzTreeServiceFactory,\n                            deps: [[new SkipSelf(), new Optional(), NzTreeHigherOrderServiceToken], NzTreeService]\n                        },\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => NzTreeComponent),\n                            multi: true\n                        }\n                    ],\n                    host: {\n                        '[class.ant-select-tree]': `nzSelectMode`,\n                        '[class.ant-select-tree-show-line]': `nzSelectMode && nzShowLine`,\n                        '[class.ant-select-tree-icon-hide]': `nzSelectMode && !nzShowIcon`,\n                        '[class.ant-select-tree-block-node]': `nzSelectMode && nzBlockNode`,\n                        '[class.ant-tree]': `!nzSelectMode`,\n                        '[class.ant-tree-rtl]': `dir === 'rtl'`,\n                        '[class.ant-tree-show-line]': `!nzSelectMode && nzShowLine`,\n                        '[class.ant-tree-icon-hide]': `!nzSelectMode && !nzShowIcon`,\n                        '[class.ant-tree-block-node]': `!nzSelectMode && nzBlockNode`,\n                        '[class.draggable-tree]': `nzDraggable`\n                    }\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i1.NzTreeBaseService }, { type: i2$1.NzConfigService }, { type: i0.ChangeDetectorRef }, { type: i3$1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i4$1.NzNoAnimationDirective, decorators: [{\n                        type: Host\n                    }, {\n                        type: Optional\n                    }] }];\n    }, propDecorators: { nzShowIcon: [{\n                type: Input\n            }], nzHideUnMatched: [{\n                type: Input\n            }], nzBlockNode: [{\n                type: Input\n            }], nzExpandAll: [{\n                type: Input\n            }], nzSelectMode: [{\n                type: Input\n            }], nzCheckStrictly: [{\n                type: Input\n            }], nzShowExpand: [{\n                type: Input\n            }], nzShowLine: [{\n                type: Input\n            }], nzCheckable: [{\n                type: Input\n            }], nzAsyncData: [{\n                type: Input\n            }], nzDraggable: [{\n                type: Input\n            }], nzMultiple: [{\n                type: Input\n            }], nzExpandedIcon: [{\n                type: Input\n            }], nzVirtualItemSize: [{\n                type: Input\n            }], nzVirtualMaxBufferPx: [{\n                type: Input\n            }], nzVirtualMinBufferPx: [{\n                type: Input\n            }], nzVirtualHeight: [{\n                type: Input\n            }], nzTreeTemplate: [{\n                type: Input\n            }], nzBeforeDrop: [{\n                type: Input\n            }], nzData: [{\n                type: Input\n            }], nzExpandedKeys: [{\n                type: Input\n            }], nzSelectedKeys: [{\n                type: Input\n            }], nzCheckedKeys: [{\n                type: Input\n            }], nzSearchValue: [{\n                type: Input\n            }], nzSearchFunc: [{\n                type: Input\n            }], nzTreeTemplateChild: [{\n                type: ContentChild,\n                args: ['nzTreeTemplate', { static: true }]\n            }], cdkVirtualScrollViewport: [{\n                type: ViewChild,\n                args: [CdkVirtualScrollViewport, { read: CdkVirtualScrollViewport }]\n            }], nzExpandedKeysChange: [{\n                type: Output\n            }], nzSelectedKeysChange: [{\n                type: Output\n            }], nzCheckedKeysChange: [{\n                type: Output\n            }], nzSearchValueChange: [{\n                type: Output\n            }], nzClick: [{\n                type: Output\n            }], nzDblClick: [{\n                type: Output\n            }], nzContextMenu: [{\n                type: Output\n            }], nzCheckBoxChange: [{\n                type: Output\n            }], nzExpandChange: [{\n                type: Output\n            }], nzOnDragStart: [{\n                type: Output\n            }], nzOnDragEnter: [{\n                type: Output\n            }], nzOnDragOver: [{\n                type: Output\n            }], nzOnDragLeave: [{\n                type: Output\n            }], nzOnDrop: [{\n                type: Output\n            }], nzOnDragEnd: [{\n                type: Output\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeModule {\n}\nNzTreeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNzTreeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeModule, declarations: [NzTreeComponent,\n        NzTreeNodeBuiltinComponent,\n        NzTreeIndentComponent,\n        NzTreeNodeSwitcherComponent,\n        NzTreeNodeBuiltinCheckboxComponent,\n        NzTreeNodeTitleComponent,\n        NzTreeDropIndicatorComponent], imports: [BidiModule,\n        CommonModule,\n        NzOutletModule,\n        NzIconModule,\n        NzNoAnimationModule,\n        NzHighlightModule,\n        ScrollingModule], exports: [NzTreeComponent, NzTreeNodeBuiltinComponent, NzTreeIndentComponent] });\nNzTreeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeModule, imports: [[\n            BidiModule,\n            CommonModule,\n            NzOutletModule,\n            NzIconModule,\n            NzNoAnimationModule,\n            NzHighlightModule,\n            ScrollingModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        BidiModule,\n                        CommonModule,\n                        NzOutletModule,\n                        NzIconModule,\n                        NzNoAnimationModule,\n                        NzHighlightModule,\n                        ScrollingModule\n                    ],\n                    declarations: [\n                        NzTreeComponent,\n                        NzTreeNodeBuiltinComponent,\n                        NzTreeIndentComponent,\n                        NzTreeNodeSwitcherComponent,\n                        NzTreeNodeBuiltinCheckboxComponent,\n                        NzTreeNodeTitleComponent,\n                        NzTreeDropIndicatorComponent\n                    ],\n                    exports: [NzTreeComponent, NzTreeNodeBuiltinComponent, NzTreeIndentComponent]\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzTreeComponent, NzTreeIndentComponent, NzTreeModule, NzTreeNodeBuiltinCheckboxComponent, NzTreeNodeBuiltinComponent, NzTreeNodeSwitcherComponent, NzTreeNodeTitleComponent, NzTreeService, NzTreeServiceFactory };\n"]},"metadata":{},"sourceType":"module"}