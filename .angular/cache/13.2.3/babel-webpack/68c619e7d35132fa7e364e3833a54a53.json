{"ast":null,"code":"import { __decorate } from 'tslib';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, BACKSPACE, ESCAPE } from '@angular/cdk/keycodes';\nimport * as i8 from '@angular/cdk/overlay';\nimport { CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Injectable, EventEmitter, forwardRef, Optional, Host, ViewChild, ViewChildren, Output, HostListener, NgModule } from '@angular/core';\nimport * as i10 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { BehaviorSubject, Subject, fromEvent } from 'rxjs';\nimport { takeUntil, startWith } from 'rxjs/operators';\nimport { slideMotion } from 'ng-zorro-antd/core/animation';\nimport * as i2$1 from 'ng-zorro-antd/core/config';\nimport { WithConfig } from 'ng-zorro-antd/core/config';\nimport * as i12 from 'ng-zorro-antd/core/overlay';\nimport { DEFAULT_CASCADER_POSITIONS, NzOverlayModule } from 'ng-zorro-antd/core/overlay';\nimport { isNotNil, arraysEqual, toArray, InputBoolean } from 'ng-zorro-antd/core/util';\nimport * as i9 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport * as i3 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport * as i4 from 'ng-zorro-antd/core/highlight';\nimport { NzHighlightModule } from 'ng-zorro-antd/core/highlight';\nimport * as i3$1 from 'ng-zorro-antd/i18n';\nimport * as i4$1 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i5 from 'ng-zorro-antd/core/no-animation';\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport * as i6 from 'ng-zorro-antd/empty';\nimport { NzEmptyModule } from 'ng-zorro-antd/empty';\nimport { NzInputModule } from 'ng-zorro-antd/input';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nconst _c0 = [\"nz-cascader-option\", \"\"];\n\nfunction NzCascaderOptionComponent_ng_container_0_ng_template_1_Template(rf, ctx) {}\n\nconst _c1 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    index: a1\n  };\n};\n\nfunction NzCascaderOptionComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzCascaderOptionComponent_ng_container_0_ng_template_1_Template, 0, 0, \"ng-template\", 3);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.optionTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c1, ctx_r0.option, ctx_r0.columnIndex));\n  }\n}\n\nfunction NzCascaderOptionComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 4);\n    i0.ɵɵpipe(1, \"nzHighlight\");\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind4(1, 1, ctx_r2.optionLabel, ctx_r2.highlightText, \"g\", \"ant-cascader-menu-item-keyword\"), i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction NzCascaderOptionComponent_div_3_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 8);\n  }\n}\n\nfunction NzCascaderOptionComponent_div_3_ng_template_2_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"i\", 10);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"nzType\", ctx_r8.expandIcon);\n  }\n}\n\nfunction NzCascaderOptionComponent_div_3_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NzCascaderOptionComponent_div_3_ng_template_2_ng_container_0_Template, 2, 1, \"ng-container\", 9);\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r7.expandIcon);\n  }\n}\n\nfunction NzCascaderOptionComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtemplate(1, NzCascaderOptionComponent_div_3_i_1_Template, 1, 0, \"i\", 6);\n    i0.ɵɵtemplate(2, NzCascaderOptionComponent_div_3_ng_template_2_Template, 1, 1, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r6 = i0.ɵɵreference(3);\n\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.option.loading)(\"ngIfElse\", _r6);\n  }\n}\n\nconst _c2 = [\"selectContainer\"];\nconst _c3 = [\"input\"];\nconst _c4 = [\"menu\"];\n\nfunction NzCascaderComponent_ng_container_3_span_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r10.labelRenderText);\n  }\n}\n\nfunction NzCascaderComponent_ng_container_3_span_6_ng_template_2_ng_template_0_Template(rf, ctx) {}\n\nfunction NzCascaderComponent_ng_container_3_span_6_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NzCascaderComponent_ng_container_3_span_6_ng_template_2_ng_template_0_Template, 0, 0, \"ng-template\", 16);\n  }\n\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r12.nzLabelRender)(\"ngTemplateOutletContext\", ctx_r12.labelRenderContext);\n  }\n}\n\nfunction NzCascaderComponent_ng_container_3_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 13);\n    i0.ɵɵtemplate(1, NzCascaderComponent_ng_container_3_span_6_ng_container_1_Template, 2, 1, \"ng-container\", 14);\n    i0.ɵɵtemplate(2, NzCascaderComponent_ng_container_3_span_6_ng_template_2_Template, 1, 2, \"ng-template\", null, 15, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r11 = i0.ɵɵreference(3);\n\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"title\", ctx_r6.labelRenderText);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r6.isLabelRenderTemplate)(\"ngIfElse\", _r11);\n  }\n}\n\nfunction NzCascaderComponent_ng_container_3_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"visibility\", !ctx_r7.inputValue ? \"visible\" : \"hidden\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r7.showPlaceholder ? ctx_r7.nzPlaceHolder || (ctx_r7.locale == null ? null : ctx_r7.locale.placeholder) : null);\n  }\n}\n\nfunction NzCascaderComponent_ng_container_3_span_8_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 21);\n  }\n\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(3);\n    i0.ɵɵclassProp(\"ant-cascader-picker-arrow-expand\", ctx_r14.menuVisible);\n    i0.ɵɵproperty(\"nzType\", ctx_r14.nzSuffixIcon);\n  }\n}\n\nfunction NzCascaderComponent_ng_container_3_span_8_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 22);\n  }\n}\n\nfunction NzCascaderComponent_ng_container_3_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 18);\n    i0.ɵɵtemplate(1, NzCascaderComponent_ng_container_3_span_8_i_1_Template, 1, 3, \"i\", 19);\n    i0.ɵɵtemplate(2, NzCascaderComponent_ng_container_3_span_8_i_2_Template, 1, 0, \"i\", 20);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"ant-select-arrow-loading\", ctx_r8.isLoading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r8.isLoading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.isLoading);\n  }\n}\n\nfunction NzCascaderComponent_ng_container_3_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵelementStart(1, \"i\", 24);\n    i0.ɵɵlistener(\"click\", function NzCascaderComponent_ng_container_3_span_9_Template_i_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.clearSelection($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction NzCascaderComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 4, 5);\n    i0.ɵɵelementStart(3, \"span\", 6);\n    i0.ɵɵelementStart(4, \"input\", 7, 8);\n    i0.ɵɵlistener(\"ngModelChange\", function NzCascaderComponent_ng_container_3_Template_input_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.inputValue = $event;\n    })(\"blur\", function NzCascaderComponent_ng_container_3_Template_input_blur_4_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.handleInputBlur();\n    })(\"focus\", function NzCascaderComponent_ng_container_3_Template_input_focus_4_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.handleInputFocus();\n    })(\"change\", function NzCascaderComponent_ng_container_3_Template_input_change_4_listener($event) {\n      return $event.stopPropagation();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, NzCascaderComponent_ng_container_3_span_6_Template, 4, 3, \"span\", 9);\n    i0.ɵɵtemplate(7, NzCascaderComponent_ng_container_3_span_7_Template, 2, 3, \"span\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, NzCascaderComponent_ng_container_3_span_8_Template, 3, 4, \"span\", 11);\n    i0.ɵɵtemplate(9, NzCascaderComponent_ng_container_3_span_9_Template, 2, 0, \"span\", 12);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵstyleProp(\"opacity\", ctx_r2.nzShowSearch ? \"\" : \"0\");\n    i0.ɵɵproperty(\"readonly\", !ctx_r2.nzShowSearch)(\"disabled\", ctx_r2.nzDisabled)(\"ngModel\", ctx_r2.inputValue);\n    i0.ɵɵattribute(\"autoComplete\", \"off\")(\"expanded\", ctx_r2.menuVisible)(\"autofocus\", ctx_r2.nzAutoFocus ? \"autofocus\" : null);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showLabelRender);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.showLabelRender);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.nzShowArrow);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.clearIconVisible);\n  }\n}\n\nfunction NzCascaderComponent_ng_template_5_ul_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 30);\n    i0.ɵɵelementStart(1, \"li\", 31);\n    i0.ɵɵelement(2, \"nz-embed-empty\", 32);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r24 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"width\", ctx_r24.dropdownWidthStyle)(\"height\", ctx_r24.dropdownHeightStyle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"nzComponentName\", \"cascader\")(\"specificContent\", ctx_r24.nzNotFoundContent);\n  }\n}\n\nfunction NzCascaderComponent_ng_template_5_ng_template_4_ul_0_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r33 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 36);\n    i0.ɵɵlistener(\"mouseenter\", function NzCascaderComponent_ng_template_5_ng_template_4_ul_0_li_1_Template_li_mouseenter_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r33);\n      const option_r31 = restoredCtx.$implicit;\n      const i_r29 = i0.ɵɵnextContext().index;\n      const ctx_r32 = i0.ɵɵnextContext(3);\n      return ctx_r32.onOptionMouseEnter(option_r31, i_r29, $event);\n    })(\"mouseleave\", function NzCascaderComponent_ng_template_5_ng_template_4_ul_0_li_1_Template_li_mouseleave_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r33);\n      const option_r31 = restoredCtx.$implicit;\n      const i_r29 = i0.ɵɵnextContext().index;\n      const ctx_r35 = i0.ɵɵnextContext(3);\n      return ctx_r35.onOptionMouseLeave(option_r31, i_r29, $event);\n    })(\"click\", function NzCascaderComponent_ng_template_5_ng_template_4_ul_0_li_1_Template_li_click_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r33);\n      const option_r31 = restoredCtx.$implicit;\n      const i_r29 = i0.ɵɵnextContext().index;\n      const ctx_r37 = i0.ɵɵnextContext(3);\n      return ctx_r37.onOptionClick(option_r31, i_r29, $event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r31 = ctx.$implicit;\n    const i_r29 = i0.ɵɵnextContext().index;\n    const ctx_r30 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"expandIcon\", ctx_r30.nzExpandIcon)(\"columnIndex\", i_r29)(\"nzLabelProperty\", ctx_r30.nzLabelProperty)(\"optionTemplate\", ctx_r30.nzOptionRender)(\"activated\", ctx_r30.isOptionActivated(option_r31, i_r29))(\"highlightText\", ctx_r30.inSearchingMode ? ctx_r30.inputValue : \"\")(\"option\", option_r31)(\"dir\", ctx_r30.dir);\n  }\n}\n\nfunction NzCascaderComponent_ng_template_5_ng_template_4_ul_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 34);\n    i0.ɵɵtemplate(1, NzCascaderComponent_ng_template_5_ng_template_4_ul_0_li_1_Template, 1, 8, \"li\", 35);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const options_r28 = ctx.$implicit;\n    const ctx_r27 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"height\", ctx_r27.dropdownHeightStyle)(\"width\", ctx_r27.dropdownWidthStyle);\n    i0.ɵɵproperty(\"ngClass\", ctx_r27.menuColumnCls);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", options_r28);\n  }\n}\n\nfunction NzCascaderComponent_ng_template_5_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NzCascaderComponent_ng_template_5_ng_template_4_ul_0_Template, 2, 6, \"ul\", 33);\n  }\n\n  if (rf & 2) {\n    const ctx_r26 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r26.cascaderService.columns);\n  }\n}\n\nfunction NzCascaderComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r41 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵlistener(\"mouseleave\", function NzCascaderComponent_ng_template_5_Template_div_mouseleave_0_listener($event) {\n      i0.ɵɵrestoreView(_r41);\n      const ctx_r40 = i0.ɵɵnextContext();\n      return ctx_r40.onTriggerMouseLeave($event);\n    });\n    i0.ɵɵelementStart(1, \"div\", 26, 27);\n    i0.ɵɵtemplate(3, NzCascaderComponent_ng_template_5_ul_3_Template, 3, 6, \"ul\", 28);\n    i0.ɵɵtemplate(4, NzCascaderComponent_ng_template_5_ng_template_4_Template, 1, 1, \"ng-template\", null, 29, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r25 = i0.ɵɵreference(5);\n\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"ant-cascader-dropdown-rtl\", ctx_r3.dir === \"rtl\");\n    i0.ɵɵproperty(\"@slideMotion\", \"enter\")(\"@.disabled\", ctx_r3.noAnimation == null ? null : ctx_r3.noAnimation.nzNoAnimation)(\"nzNoAnimation\", ctx_r3.noAnimation == null ? null : ctx_r3.noAnimation.nzNoAnimation);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"ant-cascader-rtl\", ctx_r3.dir === \"rtl\")(\"ant-cascader-menus-hidden\", !ctx_r3.menuVisible)(\"ant-cascader-menu-empty\", ctx_r3.shouldShowEmpty);\n    i0.ɵɵproperty(\"ngClass\", ctx_r3.menuCls)(\"ngStyle\", ctx_r3.nzMenuStyle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.shouldShowEmpty)(\"ngIfElse\", _r25);\n  }\n}\n\nconst _c5 = [\"*\"];\n\nfunction isShowSearchObject(options) {\n  return typeof options !== 'boolean';\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nfunction isChildOption(o) {\n  return o.isLeaf || !o.children || !o.children.length;\n}\n\nfunction isParentOption(o) {\n  return !!o.children && !!o.children.length && !o.isLeaf;\n}\n\nlet NzCascaderOptionComponent = /*#__PURE__*/(() => {\n  class NzCascaderOptionComponent {\n    constructor(cdr, elementRef, renderer) {\n      this.cdr = cdr;\n      this.optionTemplate = null;\n      this.activated = false;\n      this.nzLabelProperty = 'label';\n      this.expandIcon = '';\n      this.dir = 'ltr';\n      renderer.addClass(elementRef.nativeElement, 'ant-cascader-menu-item');\n      renderer.addClass(elementRef.nativeElement, 'ant-cascader-menu-item-expanded');\n      this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngOnInit() {\n      if (this.expandIcon === '' && this.dir === 'rtl') {\n        this.expandIcon = 'left';\n      } else if (this.expandIcon === '') {\n        this.expandIcon = 'right';\n      }\n    }\n\n    get optionLabel() {\n      return this.option[this.nzLabelProperty];\n    }\n\n    markForCheck() {\n      this.cdr.markForCheck();\n    }\n\n  }\n\n  NzCascaderOptionComponent.ɵfac = function NzCascaderOptionComponent_Factory(t) {\n    return new (t || NzCascaderOptionComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  NzCascaderOptionComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzCascaderOptionComponent,\n    selectors: [[\"\", \"nz-cascader-option\", \"\"]],\n    hostVars: 7,\n    hostBindings: function NzCascaderOptionComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"title\", ctx.option.title || ctx.optionLabel);\n        i0.ɵɵclassProp(\"ant-cascader-menu-item-active\", ctx.activated)(\"ant-cascader-menu-item-expand\", !ctx.option.isLeaf)(\"ant-cascader-menu-item-disabled\", ctx.option.disabled);\n      }\n    },\n    inputs: {\n      optionTemplate: \"optionTemplate\",\n      option: \"option\",\n      activated: \"activated\",\n      highlightText: \"highlightText\",\n      nzLabelProperty: \"nzLabelProperty\",\n      columnIndex: \"columnIndex\",\n      expandIcon: \"expandIcon\",\n      dir: \"dir\"\n    },\n    exportAs: [\"nzCascaderOption\"],\n    attrs: _c0,\n    decls: 4,\n    vars: 3,\n    consts: [[4, \"ngIf\", \"ngIfElse\"], [\"defaultOptionTemplate\", \"\"], [\"class\", \"ant-cascader-menu-item-expand-icon\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"ant-cascader-menu-item-content\", 3, \"innerHTML\"], [1, \"ant-cascader-menu-item-expand-icon\"], [\"nz-icon\", \"\", \"nzType\", \"loading\", 4, \"ngIf\", \"ngIfElse\"], [\"icon\", \"\"], [\"nz-icon\", \"\", \"nzType\", \"loading\"], [4, \"nzStringTemplateOutlet\"], [\"nz-icon\", \"\", 3, \"nzType\"]],\n    template: function NzCascaderOptionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NzCascaderOptionComponent_ng_container_0_Template, 2, 5, \"ng-container\", 0);\n        i0.ɵɵtemplate(1, NzCascaderOptionComponent_ng_template_1_Template, 2, 6, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(3, NzCascaderOptionComponent_div_3_Template, 4, 2, \"div\", 2);\n      }\n\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(2);\n\n        i0.ɵɵproperty(\"ngIf\", ctx.optionTemplate)(\"ngIfElse\", _r1);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", !ctx.option.isLeaf || (ctx.option.children == null ? null : ctx.option.children.length) || ctx.option.loading);\n      }\n    },\n    directives: [i9.NgIf, i9.NgTemplateOutlet, i2.NzIconDirective, i3.NzStringTemplateOutletDirective],\n    pipes: [i4.NzHighlightPipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzCascaderOptionComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * All data is stored and parsed in NzCascaderService.\n */\n\n\nlet NzCascaderService = /*#__PURE__*/(() => {\n  class NzCascaderService {\n    constructor() {\n      /** Activated options in each column. */\n      this.activatedOptions = [];\n      /** An array to store cascader items arranged in different layers. */\n\n      this.columns = [];\n      /** If user has entered searching mode. */\n\n      this.inSearchingMode = false;\n      /** Selected options would be output to user. */\n\n      this.selectedOptions = [];\n      this.values = [];\n      this.$loading = new BehaviorSubject(false);\n      /**\n       * Emit an event to notify cascader it needs to redraw because activated or\n       * selected options are changed.\n       */\n\n      this.$redraw = new Subject();\n      /**\n       * Emit an event when an option gets selected.\n       * Emit true if a leaf options is selected.\n       */\n\n      this.$optionSelected = new Subject();\n      /**\n       * Emit an event to notify cascader it needs to quit searching mode.\n       * Only emit when user do select a searching option.\n       */\n\n      this.$quitSearching = new Subject();\n      /** To hold columns before entering searching mode. */\n\n      this.columnsSnapshot = [[]];\n      /** To hold activated options before entering searching mode. */\n\n      this.activatedOptionsSnapshot = [];\n    }\n    /** Return cascader options in the first layer. */\n\n\n    get nzOptions() {\n      return this.columns[0];\n    }\n\n    ngOnDestroy() {\n      this.$redraw.complete();\n      this.$quitSearching.complete();\n      this.$optionSelected.complete();\n      this.$loading.complete();\n    }\n    /**\n     * Make sure that value matches what is displayed in the dropdown.\n     */\n\n\n    syncOptions(first = false) {\n      const values = this.values;\n      const hasValue = values && values.length;\n      const lastColumnIndex = values.length - 1;\n\n      const initColumnWithIndex = columnIndex => {\n        const activatedOptionSetter = () => {\n          const currentValue = values[columnIndex];\n\n          if (!isNotNil(currentValue)) {\n            this.$redraw.next();\n            return;\n          }\n\n          const option = this.findOptionWithValue(columnIndex, values[columnIndex]) || (typeof currentValue === 'object' ? currentValue : {\n            [`${this.cascaderComponent.nzValueProperty}`]: currentValue,\n            [`${this.cascaderComponent.nzLabelProperty}`]: currentValue\n          });\n          this.setOptionActivated(option, columnIndex, false, false);\n\n          if (columnIndex < lastColumnIndex) {\n            initColumnWithIndex(columnIndex + 1);\n          } else {\n            this.dropBehindColumns(columnIndex);\n            this.selectedOptions = [...this.activatedOptions];\n            this.$redraw.next();\n          }\n        };\n\n        if (this.isLoaded(columnIndex) || !this.cascaderComponent.nzLoadData) {\n          activatedOptionSetter();\n        } else {\n          const option = this.activatedOptions[columnIndex - 1] || {};\n          this.loadChildren(option, columnIndex - 1, activatedOptionSetter);\n        }\n      };\n\n      this.activatedOptions = [];\n      this.selectedOptions = [];\n\n      if (first && this.cascaderComponent.nzLoadData && !hasValue) {\n        // Should also notify the component that value changes. Fix #3480.\n        this.$redraw.next();\n        return;\n      } else {\n        initColumnWithIndex(0);\n      }\n    }\n    /**\n     * Bind cascader component so this service could use inputs.\n     */\n\n\n    withComponent(cascaderComponent) {\n      this.cascaderComponent = cascaderComponent;\n    }\n    /**\n     * Reset all options. Rebuild searching options if in searching mode.\n     */\n\n\n    withOptions(options) {\n      this.columnsSnapshot = this.columns = options && options.length ? [options] : [];\n\n      if (this.inSearchingMode) {\n        this.prepareSearchOptions(this.cascaderComponent.inputValue);\n      } else if (this.columns.length) {\n        this.syncOptions();\n      }\n    }\n    /**\n     * Try to set a option as activated.\n     *\n     * @param option Cascader option\n     * @param columnIndex Of which column this option is in\n     * @param performSelect Select\n     * @param loadingChildren Try to load children asynchronously.\n     */\n\n\n    setOptionActivated(option, columnIndex, performSelect = false, loadingChildren = true) {\n      if (option.disabled) {\n        return;\n      }\n\n      this.activatedOptions[columnIndex] = option;\n      this.trackAncestorActivatedOptions(columnIndex);\n      this.dropBehindActivatedOptions(columnIndex);\n      const isParent = isParentOption(option);\n\n      if (isParent) {\n        // Parent option that has children.\n        this.setColumnData(option.children, columnIndex + 1, option);\n      } else if (!option.isLeaf && loadingChildren) {\n        // Parent option that should try to load children asynchronously.\n        this.loadChildren(option, columnIndex);\n      } else if (option.isLeaf) {\n        // Leaf option.\n        this.dropBehindColumns(columnIndex);\n      } // Actually perform selection to make an options not only activated but also selected.\n\n\n      if (performSelect) {\n        this.setOptionSelected(option, columnIndex);\n      }\n\n      this.$redraw.next();\n    }\n\n    setOptionSelected(option, index) {\n      const changeOn = this.cascaderComponent.nzChangeOn;\n\n      const shouldPerformSelection = (o, i) => typeof changeOn === 'function' ? changeOn(o, i) : false;\n\n      if (option.isLeaf || this.cascaderComponent.nzChangeOnSelect || shouldPerformSelection(option, index)) {\n        this.selectedOptions = [...this.activatedOptions];\n        this.prepareEmitValue();\n        this.$redraw.next();\n        this.$optionSelected.next({\n          option,\n          index\n        });\n      }\n    }\n\n    setOptionDeactivatedSinceColumn(column) {\n      this.dropBehindActivatedOptions(column - 1);\n      this.dropBehindColumns(column);\n      this.$redraw.next();\n    }\n    /**\n     * Set a searching option as selected, finishing up things.\n     *\n     * @param option\n     */\n\n\n    setSearchOptionSelected(option) {\n      this.activatedOptions = [option];\n      this.selectedOptions = [...option.path];\n      this.prepareEmitValue();\n      this.$redraw.next();\n      this.$optionSelected.next({\n        option,\n        index: 0\n      });\n      setTimeout(() => {\n        // Reset data and tell UI only to remove input and reset dropdown width style.\n        this.$quitSearching.next();\n        this.$redraw.next();\n        this.inSearchingMode = false;\n        this.columns = [...this.columnsSnapshot];\n        this.activatedOptions = [...this.selectedOptions];\n      }, 200);\n    }\n    /**\n     * Filter cascader options to reset `columns`.\n     *\n     * @param searchValue The string user wants to search.\n     */\n\n\n    prepareSearchOptions(searchValue) {\n      const results = []; // Search results only have one layer.\n\n      const path = [];\n\n      const defaultFilter = (i, p) => p.some(o => {\n        const label = this.getOptionLabel(o);\n        return !!label && label.indexOf(i) !== -1;\n      });\n\n      const showSearch = this.cascaderComponent.nzShowSearch;\n      const filter = isShowSearchObject(showSearch) && showSearch.filter ? showSearch.filter : defaultFilter;\n      const sorter = isShowSearchObject(showSearch) && showSearch.sorter ? showSearch.sorter : null;\n\n      const loopChild = (node, forceDisabled = false) => {\n        path.push(node);\n        const cPath = Array.from(path);\n\n        if (filter(searchValue, cPath)) {\n          const disabled = forceDisabled || node.disabled;\n          const option = {\n            disabled,\n            isLeaf: true,\n            path: cPath,\n            [this.cascaderComponent.nzLabelProperty]: cPath.map(p => this.getOptionLabel(p)).join(' / ')\n          };\n          results.push(option);\n        }\n\n        path.pop();\n      };\n\n      const loopParent = (node, forceDisabled = false) => {\n        const disabled = forceDisabled || node.disabled;\n        path.push(node);\n        node.children.forEach(sNode => {\n          if (!sNode.parent) {\n            sNode.parent = node;\n          }\n\n          if (!sNode.isLeaf) {\n            loopParent(sNode, disabled);\n          }\n\n          if (sNode.isLeaf || !sNode.children || !sNode.children.length) {\n            loopChild(sNode, disabled);\n          }\n        });\n        path.pop();\n      };\n\n      if (!this.columnsSnapshot.length) {\n        this.columns = [[]];\n        return;\n      }\n\n      this.columnsSnapshot[0].forEach(o => isChildOption(o) ? loopChild(o) : loopParent(o));\n\n      if (sorter) {\n        results.sort((a, b) => sorter(a.path, b.path, searchValue));\n      }\n\n      this.columns = [results];\n      this.$redraw.next(); // Search results may be empty, so should redraw.\n    }\n    /**\n     * Toggle searching mode by UI. It deals with things not directly related to UI.\n     *\n     * @param toSearching If this cascader is entering searching mode\n     */\n\n\n    toggleSearchingMode(toSearching) {\n      this.inSearchingMode = toSearching;\n\n      if (toSearching) {\n        this.activatedOptionsSnapshot = [...this.activatedOptions];\n        this.activatedOptions = [];\n        this.selectedOptions = [];\n        this.$redraw.next();\n      } else {\n        // User quit searching mode without selecting an option.\n        this.activatedOptions = [...this.activatedOptionsSnapshot];\n        this.selectedOptions = [...this.activatedOptions];\n        this.columns = [...this.columnsSnapshot];\n        this.syncOptions();\n        this.$redraw.next();\n      }\n    }\n    /**\n     * Clear selected options.\n     */\n\n\n    clear() {\n      this.values = [];\n      this.selectedOptions = [];\n      this.activatedOptions = [];\n      this.dropBehindColumns(0);\n      this.$redraw.next();\n      this.$optionSelected.next(null);\n    }\n\n    getOptionLabel(o) {\n      return o[this.cascaderComponent.nzLabelProperty || 'label'];\n    }\n\n    getOptionValue(o) {\n      return o[this.cascaderComponent.nzValueProperty || 'value'];\n    }\n    /**\n     * Try to insert options into a column.\n     *\n     * @param options Options to insert\n     * @param columnIndex Position\n     */\n\n\n    setColumnData(options, columnIndex, parent) {\n      const existingOptions = this.columns[columnIndex];\n\n      if (!arraysEqual(existingOptions, options)) {\n        options.forEach(o => o.parent = parent);\n        this.columns[columnIndex] = options;\n        this.dropBehindColumns(columnIndex);\n      }\n    }\n    /**\n     * Set all ancestor options as activated.\n     */\n\n\n    trackAncestorActivatedOptions(startIndex) {\n      for (let i = startIndex - 1; i >= 0; i--) {\n        if (!this.activatedOptions[i]) {\n          this.activatedOptions[i] = this.activatedOptions[i + 1].parent;\n        }\n      }\n    }\n\n    dropBehindActivatedOptions(lastReserveIndex) {\n      this.activatedOptions = this.activatedOptions.splice(0, lastReserveIndex + 1);\n    }\n\n    dropBehindColumns(lastReserveIndex) {\n      if (lastReserveIndex < this.columns.length - 1) {\n        this.columns = this.columns.slice(0, lastReserveIndex + 1);\n      }\n    }\n    /**\n     * Load children of an option asynchronously.\n     */\n\n\n    loadChildren(option, columnIndex, success, failure) {\n      const loadFn = this.cascaderComponent.nzLoadData;\n\n      if (loadFn) {\n        // If there isn't any option in columns.\n        this.$loading.next(columnIndex < 0);\n\n        if (typeof option === 'object') {\n          option.loading = true;\n        }\n\n        loadFn(option, columnIndex).then(() => {\n          option.loading = false;\n\n          if (option.children) {\n            this.setColumnData(option.children, columnIndex + 1, option);\n          }\n\n          if (success) {\n            success();\n          }\n\n          this.$loading.next(false);\n          this.$redraw.next();\n        }, () => {\n          option.loading = false;\n          option.isLeaf = true;\n\n          if (failure) {\n            failure();\n          }\n\n          this.$redraw.next();\n        });\n      }\n    }\n\n    isLoaded(index) {\n      return this.columns[index] && this.columns[index].length > 0;\n    }\n    /**\n     * Find a option that has a given value in a given column.\n     */\n\n\n    findOptionWithValue(columnIndex, value) {\n      const targetColumn = this.columns[columnIndex];\n\n      if (targetColumn) {\n        const v = typeof value === 'object' ? this.getOptionValue(value) : value;\n        return targetColumn.find(o => v === this.getOptionValue(o));\n      }\n\n      return null;\n    }\n\n    prepareEmitValue() {\n      this.values = this.selectedOptions.map(o => this.getOptionValue(o));\n    }\n\n  }\n\n  NzCascaderService.ɵfac = function NzCascaderService_Factory(t) {\n    return new (t || NzCascaderService)();\n  };\n\n  NzCascaderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NzCascaderService,\n    factory: NzCascaderService.ɵfac\n  });\n  return NzCascaderService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst NZ_CONFIG_MODULE_NAME = 'cascader';\n\nconst defaultDisplayRender = labels => labels.join(' / ');\n\nlet NzCascaderComponent = /*#__PURE__*/(() => {\n  class NzCascaderComponent {\n    constructor(cascaderService, nzConfigService, ngZone, cdr, i18nService, elementRef, renderer, directionality, noAnimation) {\n      this.cascaderService = cascaderService;\n      this.nzConfigService = nzConfigService;\n      this.ngZone = ngZone;\n      this.cdr = cdr;\n      this.i18nService = i18nService;\n      this.directionality = directionality;\n      this.noAnimation = noAnimation;\n      this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n      this.nzOptionRender = null;\n      this.nzShowInput = true;\n      this.nzShowArrow = true;\n      this.nzAllowClear = true;\n      this.nzAutoFocus = false;\n      this.nzChangeOnSelect = false;\n      this.nzDisabled = false;\n      this.nzExpandTrigger = 'click';\n      this.nzValueProperty = 'value';\n      this.nzLabelRender = null;\n      this.nzLabelProperty = 'label';\n      this.nzSize = 'default';\n      this.nzBackdrop = false;\n      this.nzShowSearch = false;\n      this.nzPlaceHolder = '';\n      this.nzMenuStyle = null;\n      this.nzMouseEnterDelay = 150; // ms\n\n      this.nzMouseLeaveDelay = 150; // ms\n\n      this.nzTriggerAction = ['click']; // TODO: RTL\n\n      this.nzSuffixIcon = 'down';\n      this.nzExpandIcon = '';\n      this.nzVisibleChange = new EventEmitter();\n      this.nzSelectionChange = new EventEmitter();\n      this.nzSelect = new EventEmitter();\n      this.nzClear = new EventEmitter();\n      /**\n       * If the dropdown should show the empty content.\n       * `true` if there's no options.\n       */\n\n      this.shouldShowEmpty = false;\n      this.menuVisible = false;\n      this.isLoading = false;\n      this.labelRenderContext = {};\n      this.onChange = Function.prototype;\n      this.onTouched = Function.prototype;\n      this.positions = [...DEFAULT_CASCADER_POSITIONS];\n      this.dropdownHeightStyle = '';\n      this.isFocused = false;\n      this.dir = 'ltr';\n      this.destroy$ = new Subject();\n      this.inputString = '';\n      this.isOpening = false;\n      this.delayMenuTimer = null;\n      this.delaySelectTimer = null;\n      this.el = elementRef.nativeElement;\n      this.cascaderService.withComponent(this);\n      renderer.addClass(elementRef.nativeElement, 'ant-select');\n      renderer.addClass(elementRef.nativeElement, 'ant-cascader');\n    }\n\n    get nzOptions() {\n      return this.cascaderService.nzOptions;\n    }\n\n    set nzOptions(options) {\n      this.cascaderService.withOptions(options);\n    }\n\n    get inSearchingMode() {\n      return this.cascaderService.inSearchingMode;\n    }\n\n    set inputValue(inputValue) {\n      this.inputString = inputValue;\n      this.toggleSearchingMode(!!inputValue);\n    }\n\n    get inputValue() {\n      return this.inputString;\n    }\n\n    get menuCls() {\n      return {\n        [`${this.nzMenuClassName}`]: !!this.nzMenuClassName\n      };\n    }\n\n    get menuColumnCls() {\n      return {\n        [`${this.nzColumnClassName}`]: !!this.nzColumnClassName\n      };\n    }\n\n    get hasInput() {\n      return !!this.inputValue;\n    }\n\n    get hasValue() {\n      return this.cascaderService.values && this.cascaderService.values.length > 0;\n    }\n\n    get showLabelRender() {\n      return this.hasValue;\n    }\n\n    get showPlaceholder() {\n      return !(this.hasInput || this.hasValue);\n    }\n\n    get clearIconVisible() {\n      return this.nzAllowClear && !this.nzDisabled && (this.hasValue || this.hasInput);\n    }\n\n    get isLabelRenderTemplate() {\n      return !!this.nzLabelRender;\n    }\n\n    ngOnInit() {\n      const srv = this.cascaderService;\n      srv.$redraw.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        // These operations would not mutate data.\n        this.checkChildren();\n        this.setDisplayLabel();\n        this.reposition();\n        this.setDropdownStyles();\n        this.cdr.markForCheck();\n      });\n      srv.$loading.pipe(takeUntil(this.destroy$)).subscribe(loading => {\n        this.isLoading = loading;\n      });\n      srv.$optionSelected.pipe(takeUntil(this.destroy$)).subscribe(data => {\n        if (!data) {\n          this.onChange([]);\n          this.nzSelect.emit(null);\n          this.nzSelectionChange.emit([]);\n        } else {\n          const {\n            option,\n            index\n          } = data;\n          const shouldClose = option.isLeaf || this.nzChangeOnSelect && this.nzExpandTrigger === 'hover';\n\n          if (shouldClose) {\n            this.delaySetMenuVisible(false);\n          }\n\n          this.onChange(this.cascaderService.values);\n          this.nzSelectionChange.emit(this.cascaderService.selectedOptions);\n          this.nzSelect.emit({\n            option,\n            index\n          });\n          this.cdr.markForCheck();\n        }\n      });\n      srv.$quitSearching.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        this.inputString = '';\n        this.dropdownWidthStyle = '';\n      });\n      this.i18nService.localeChange.pipe(startWith(), takeUntil(this.destroy$)).subscribe(() => {\n        this.setLocale();\n      });\n      this.nzConfigService.getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME).pipe(takeUntil(this.destroy$)).subscribe(() => {\n        this.cdr.markForCheck();\n      });\n      this.dir = this.directionality.value;\n      this.directionality.change.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        this.dir = this.directionality.value;\n        srv.$redraw.next();\n      });\n      this.setupKeydownListener();\n    }\n\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n      this.clearDelayMenuTimer();\n      this.clearDelaySelectTimer();\n    }\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    writeValue(value) {\n      this.cascaderService.values = toArray(value);\n      this.cascaderService.syncOptions(true);\n    }\n\n    delaySetMenuVisible(visible, delay = 100, setOpening = false) {\n      this.clearDelayMenuTimer();\n\n      if (delay) {\n        if (visible && setOpening) {\n          this.isOpening = true;\n        }\n\n        this.delayMenuTimer = setTimeout(() => {\n          this.setMenuVisible(visible);\n          this.cdr.detectChanges();\n          this.clearDelayMenuTimer();\n\n          if (visible) {\n            setTimeout(() => {\n              this.isOpening = false;\n            }, 100);\n          }\n        }, delay);\n      } else {\n        this.setMenuVisible(visible);\n      }\n    }\n\n    setMenuVisible(visible) {\n      if (this.nzDisabled || this.menuVisible === visible) {\n        return;\n      }\n\n      if (visible) {\n        this.cascaderService.syncOptions();\n        this.scrollToActivatedOptions();\n      }\n\n      if (!visible) {\n        this.inputValue = '';\n      }\n\n      this.menuVisible = visible;\n      this.nzVisibleChange.emit(visible);\n      this.cdr.detectChanges();\n    }\n\n    clearDelayMenuTimer() {\n      if (this.delayMenuTimer) {\n        clearTimeout(this.delayMenuTimer);\n        this.delayMenuTimer = null;\n      }\n    }\n\n    clearSelection(event) {\n      if (event) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      this.labelRenderText = '';\n      this.labelRenderContext = {};\n      this.inputValue = '';\n      this.setMenuVisible(false);\n      this.cascaderService.clear();\n      this.nzClear.emit();\n    }\n\n    getSubmitValue() {\n      return this.cascaderService.selectedOptions.map(o => this.cascaderService.getOptionValue(o));\n    }\n\n    focus() {\n      if (!this.isFocused) {\n        (this.input ? this.input.nativeElement : this.el).focus();\n        this.isFocused = true;\n      }\n    }\n\n    blur() {\n      if (this.isFocused) {\n        (this.input ? this.input.nativeElement : this.el).blur();\n        this.isFocused = false;\n      }\n    }\n\n    handleInputBlur() {\n      this.menuVisible ? this.focus() : this.blur();\n    }\n\n    handleInputFocus() {\n      this.focus();\n    }\n\n    onTriggerClick() {\n      if (this.nzDisabled) {\n        return;\n      }\n\n      if (this.nzShowSearch) {\n        this.focus();\n      }\n\n      if (this.isActionTrigger('click')) {\n        this.delaySetMenuVisible(!this.menuVisible, 100);\n      }\n\n      this.onTouched();\n    }\n\n    onTriggerMouseEnter() {\n      if (this.nzDisabled || !this.isActionTrigger('hover')) {\n        return;\n      }\n\n      this.delaySetMenuVisible(true, this.nzMouseEnterDelay, true);\n    }\n\n    onTriggerMouseLeave(event) {\n      if (this.nzDisabled || !this.menuVisible || this.isOpening || !this.isActionTrigger('hover')) {\n        event.preventDefault();\n        return;\n      }\n\n      const mouseTarget = event.relatedTarget;\n      const hostEl = this.el;\n      const menuEl = this.menu && this.menu.nativeElement;\n\n      if (hostEl.contains(mouseTarget) || menuEl && menuEl.contains(mouseTarget)) {\n        return;\n      }\n\n      this.delaySetMenuVisible(false, this.nzMouseLeaveDelay);\n    }\n\n    onOptionMouseEnter(option, columnIndex, event) {\n      event.preventDefault();\n\n      if (this.nzExpandTrigger === 'hover') {\n        if (!option.isLeaf) {\n          this.delaySetOptionActivated(option, columnIndex, false);\n        } else {\n          this.cascaderService.setOptionDeactivatedSinceColumn(columnIndex);\n        }\n      }\n    }\n\n    onOptionMouseLeave(option, _columnIndex, event) {\n      event.preventDefault();\n\n      if (this.nzExpandTrigger === 'hover' && !option.isLeaf) {\n        this.clearDelaySelectTimer();\n      }\n    }\n\n    onOptionClick(option, columnIndex, event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      if (option && option.disabled) {\n        return;\n      }\n\n      this.el.focus();\n      this.inSearchingMode ? this.cascaderService.setSearchOptionSelected(option) : this.cascaderService.setOptionActivated(option, columnIndex, true);\n    }\n\n    onClickOutside(event) {\n      if (!this.el.contains(event.target)) {\n        this.closeMenu();\n      }\n    }\n\n    isActionTrigger(action) {\n      return typeof this.nzTriggerAction === 'string' ? this.nzTriggerAction === action : this.nzTriggerAction.indexOf(action) !== -1;\n    }\n\n    onEnter() {\n      const columnIndex = Math.max(this.cascaderService.activatedOptions.length - 1, 0);\n      const option = this.cascaderService.activatedOptions[columnIndex];\n\n      if (option && !option.disabled) {\n        this.inSearchingMode ? this.cascaderService.setSearchOptionSelected(option) : this.cascaderService.setOptionActivated(option, columnIndex, true);\n      }\n    }\n\n    moveUpOrDown(isUp) {\n      const columnIndex = Math.max(this.cascaderService.activatedOptions.length - 1, 0);\n      const activeOption = this.cascaderService.activatedOptions[columnIndex];\n      const options = this.cascaderService.columns[columnIndex] || [];\n      const length = options.length;\n      let nextIndex = -1;\n\n      if (!activeOption) {\n        // Not selected options in this column\n        nextIndex = isUp ? length : -1;\n      } else {\n        nextIndex = options.indexOf(activeOption);\n      }\n\n      while (true) {\n        nextIndex = isUp ? nextIndex - 1 : nextIndex + 1;\n\n        if (nextIndex < 0 || nextIndex >= length) {\n          break;\n        }\n\n        const nextOption = options[nextIndex];\n\n        if (!nextOption || nextOption.disabled) {\n          continue;\n        }\n\n        this.cascaderService.setOptionActivated(nextOption, columnIndex);\n        break;\n      }\n    }\n\n    moveLeft() {\n      const options = this.cascaderService.activatedOptions;\n\n      if (options.length) {\n        options.pop(); // Remove the last one\n      }\n    }\n\n    moveRight() {\n      const length = this.cascaderService.activatedOptions.length;\n      const options = this.cascaderService.columns[length];\n\n      if (options && options.length) {\n        const nextOpt = options.find(o => !o.disabled);\n\n        if (nextOpt) {\n          this.cascaderService.setOptionActivated(nextOpt, length);\n        }\n      }\n    }\n\n    clearDelaySelectTimer() {\n      if (this.delaySelectTimer) {\n        clearTimeout(this.delaySelectTimer);\n        this.delaySelectTimer = null;\n      }\n    }\n\n    delaySetOptionActivated(option, columnIndex, performSelect) {\n      this.clearDelaySelectTimer();\n      this.delaySelectTimer = setTimeout(() => {\n        this.cascaderService.setOptionActivated(option, columnIndex, performSelect);\n        this.delaySelectTimer = null;\n      }, 150);\n    }\n\n    toggleSearchingMode(toSearching) {\n      if (this.inSearchingMode !== toSearching) {\n        this.cascaderService.toggleSearchingMode(toSearching);\n      }\n\n      if (this.inSearchingMode) {\n        this.cascaderService.prepareSearchOptions(this.inputValue);\n      }\n    }\n\n    isOptionActivated(option, index) {\n      const activeOpt = this.cascaderService.activatedOptions[index];\n      return activeOpt === option;\n    }\n\n    setDisabledState(isDisabled) {\n      if (isDisabled) {\n        this.closeMenu();\n      }\n\n      this.nzDisabled = isDisabled;\n    }\n\n    closeMenu() {\n      this.blur();\n      this.clearDelayMenuTimer();\n      this.setMenuVisible(false);\n    }\n    /**\n     * Reposition the cascader panel. When a menu opens, the cascader expands\n     * and may exceed the boundary of browser's window.\n     */\n\n\n    reposition() {\n      if (this.overlay && this.overlay.overlayRef && this.menuVisible) {\n        Promise.resolve().then(() => {\n          this.overlay.overlayRef.updatePosition();\n        });\n      }\n    }\n    /**\n     * When a cascader options is changed, a child needs to know that it should re-render.\n     */\n\n\n    checkChildren() {\n      if (this.cascaderItems) {\n        this.cascaderItems.forEach(item => item.markForCheck());\n      }\n    }\n\n    setDisplayLabel() {\n      const selectedOptions = this.cascaderService.selectedOptions;\n      const labels = selectedOptions.map(o => this.cascaderService.getOptionLabel(o));\n\n      if (this.isLabelRenderTemplate) {\n        this.labelRenderContext = {\n          labels,\n          selectedOptions\n        };\n      } else {\n        this.labelRenderText = defaultDisplayRender.call(this, labels);\n      }\n    }\n\n    setDropdownStyles() {\n      const firstColumn = this.cascaderService.columns[0];\n      this.shouldShowEmpty = this.inSearchingMode && (!firstColumn || !firstColumn.length) || // Should show empty when there's no searching result\n      !(this.nzOptions && this.nzOptions.length) && !this.nzLoadData; // Should show when there's no options and developer does not use nzLoadData\n\n      this.dropdownHeightStyle = this.shouldShowEmpty ? 'auto' : '';\n\n      if (this.input) {\n        this.dropdownWidthStyle = this.inSearchingMode || this.shouldShowEmpty ? `${this.selectContainer.nativeElement.offsetWidth}px` : '';\n      }\n    }\n\n    setLocale() {\n      this.locale = this.i18nService.getLocaleData('global');\n      this.cdr.markForCheck();\n    }\n\n    scrollToActivatedOptions() {\n      // The `scrollIntoView` is a native DOM API, which doesn't require Angular to run\n      // a change detection when a promise microtask is resolved.\n      this.ngZone.runOutsideAngular(() => {\n        Promise.resolve().then(() => {\n          // scroll only until option menu view is ready\n          this.cascaderItems.toArray().filter(e => e.activated).forEach(e => {\n            e.nativeElement.scrollIntoView({\n              block: 'start',\n              inline: 'nearest'\n            });\n          });\n        });\n      });\n    }\n\n    setupKeydownListener() {\n      this.ngZone.runOutsideAngular(() => {\n        fromEvent(this.el, 'keydown').pipe(takeUntil(this.destroy$)).subscribe(event => {\n          const keyCode = event.keyCode;\n\n          if (keyCode !== DOWN_ARROW && keyCode !== UP_ARROW && keyCode !== LEFT_ARROW && keyCode !== RIGHT_ARROW && keyCode !== ENTER && keyCode !== BACKSPACE && keyCode !== ESCAPE) {\n            return;\n          } // Press any keys above to reopen menu.\n\n\n          if (!this.menuVisible && keyCode !== BACKSPACE && keyCode !== ESCAPE) {\n            // The `setMenuVisible` runs `detectChanges()`, so we don't need to run `markForCheck()` additionally.\n            return this.ngZone.run(() => this.setMenuVisible(true));\n          } // Make these keys work as default in searching mode.\n\n\n          if (this.inSearchingMode && (keyCode === BACKSPACE || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW)) {\n            return;\n          }\n\n          if (!this.menuVisible) {\n            return;\n          }\n\n          event.preventDefault();\n          this.ngZone.run(() => {\n            // Interact with the component.\n            if (keyCode === DOWN_ARROW) {\n              this.moveUpOrDown(false);\n            } else if (keyCode === UP_ARROW) {\n              this.moveUpOrDown(true);\n            } else if (keyCode === LEFT_ARROW) {\n              this.moveLeft();\n            } else if (keyCode === RIGHT_ARROW) {\n              this.moveRight();\n            } else if (keyCode === ENTER) {\n              this.onEnter();\n            } // `@HostListener`s run `markForCheck()` internally before calling the actual handler so\n            // we call `markForCheck()` to be backwards-compatible.\n\n\n            this.cdr.markForCheck();\n          });\n        });\n      });\n    }\n\n  }\n\n  NzCascaderComponent.ɵfac = function NzCascaderComponent_Factory(t) {\n    return new (t || NzCascaderComponent)(i0.ɵɵdirectiveInject(NzCascaderService), i0.ɵɵdirectiveInject(i2$1.NzConfigService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3$1.NzI18nService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i4$1.Directionality, 8), i0.ɵɵdirectiveInject(i5.NzNoAnimationDirective, 9));\n  };\n\n  NzCascaderComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzCascaderComponent,\n    selectors: [[\"nz-cascader\"], [\"\", \"nz-cascader\", \"\"]],\n    viewQuery: function NzCascaderComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n        i0.ɵɵviewQuery(_c4, 5);\n        i0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n        i0.ɵɵviewQuery(NzCascaderOptionComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectContainer = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.input = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menu = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.overlay = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cascaderItems = _t);\n      }\n    },\n    hostVars: 21,\n    hostBindings: function NzCascaderComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function NzCascaderComponent_click_HostBindingHandler() {\n          return ctx.onTriggerClick();\n        })(\"mouseenter\", function NzCascaderComponent_mouseenter_HostBindingHandler() {\n          return ctx.onTriggerMouseEnter();\n        })(\"mouseleave\", function NzCascaderComponent_mouseleave_HostBindingHandler($event) {\n          return ctx.onTriggerMouseLeave($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"tabIndex\", \"0\");\n        i0.ɵɵclassProp(\"ant-select-lg\", ctx.nzSize === \"large\")(\"ant-select-sm\", ctx.nzSize === \"small\")(\"ant-select-allow-clear\", ctx.nzAllowClear)(\"ant-select-show-arrow\", ctx.nzShowArrow)(\"ant-select-show-search\", !!ctx.nzShowSearch)(\"ant-select-disabled\", ctx.nzDisabled)(\"ant-select-open\", ctx.menuVisible)(\"ant-select-focused\", ctx.isFocused)(\"ant-select-single\", true)(\"ant-select-rtl\", ctx.dir === \"rtl\");\n      }\n    },\n    inputs: {\n      nzOptionRender: \"nzOptionRender\",\n      nzShowInput: \"nzShowInput\",\n      nzShowArrow: \"nzShowArrow\",\n      nzAllowClear: \"nzAllowClear\",\n      nzAutoFocus: \"nzAutoFocus\",\n      nzChangeOnSelect: \"nzChangeOnSelect\",\n      nzDisabled: \"nzDisabled\",\n      nzColumnClassName: \"nzColumnClassName\",\n      nzExpandTrigger: \"nzExpandTrigger\",\n      nzValueProperty: \"nzValueProperty\",\n      nzLabelRender: \"nzLabelRender\",\n      nzLabelProperty: \"nzLabelProperty\",\n      nzNotFoundContent: \"nzNotFoundContent\",\n      nzSize: \"nzSize\",\n      nzBackdrop: \"nzBackdrop\",\n      nzShowSearch: \"nzShowSearch\",\n      nzPlaceHolder: \"nzPlaceHolder\",\n      nzMenuClassName: \"nzMenuClassName\",\n      nzMenuStyle: \"nzMenuStyle\",\n      nzMouseEnterDelay: \"nzMouseEnterDelay\",\n      nzMouseLeaveDelay: \"nzMouseLeaveDelay\",\n      nzTriggerAction: \"nzTriggerAction\",\n      nzChangeOn: \"nzChangeOn\",\n      nzLoadData: \"nzLoadData\",\n      nzSuffixIcon: \"nzSuffixIcon\",\n      nzExpandIcon: \"nzExpandIcon\",\n      nzOptions: \"nzOptions\"\n    },\n    outputs: {\n      nzVisibleChange: \"nzVisibleChange\",\n      nzSelectionChange: \"nzSelectionChange\",\n      nzSelect: \"nzSelect\",\n      nzClear: \"nzClear\"\n    },\n    exportAs: [\"nzCascader\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NzCascaderComponent),\n      multi: true\n    }, NzCascaderService])],\n    ngContentSelectors: _c5,\n    decls: 6,\n    vars: 6,\n    consts: [[\"cdkOverlayOrigin\", \"\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [4, \"ngIf\"], [\"cdkConnectedOverlay\", \"\", \"nzConnectedOverlay\", \"\", 3, \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayOpen\", \"overlayOutsideClick\", \"detach\"], [1, \"ant-select-selector\"], [\"selectContainer\", \"\"], [1, \"ant-select-selection-search\"], [\"type\", \"search\", 1, \"ant-select-selection-search-input\", 3, \"readonly\", \"disabled\", \"ngModel\", \"ngModelChange\", \"blur\", \"focus\", \"change\"], [\"input\", \"\"], [\"class\", \"ant-select-selection-item\", 3, \"title\", 4, \"ngIf\"], [\"class\", \"ant-select-selection-placeholder\", 3, \"visibility\", 4, \"ngIf\"], [\"class\", \"ant-select-arrow\", 3, \"ant-select-arrow-loading\", 4, \"ngIf\"], [\"class\", \"ant-select-clear\", 4, \"ngIf\"], [1, \"ant-select-selection-item\", 3, \"title\"], [4, \"ngIf\", \"ngIfElse\"], [\"labelTemplate\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"ant-select-selection-placeholder\"], [1, \"ant-select-arrow\"], [\"nz-icon\", \"\", 3, \"nzType\", \"ant-cascader-picker-arrow-expand\", 4, \"ngIf\"], [\"nz-icon\", \"\", \"nzType\", \"loading\", 4, \"ngIf\"], [\"nz-icon\", \"\", 3, \"nzType\"], [\"nz-icon\", \"\", \"nzType\", \"loading\"], [1, \"ant-select-clear\"], [\"nz-icon\", \"\", \"nzType\", \"close-circle\", \"nzTheme\", \"fill\", 3, \"click\"], [1, \"ant-select-dropdown\", \"ant-cascader-dropdown\", \"ant-select-dropdown-placement-bottomLeft\", 3, \"nzNoAnimation\", \"mouseleave\"], [1, \"ant-cascader-menus\", 3, \"ngClass\", \"ngStyle\"], [\"menu\", \"\"], [\"class\", \"ant-cascader-menu\", 3, \"width\", \"height\", 4, \"ngIf\", \"ngIfElse\"], [\"hasOptionsTemplate\", \"\"], [1, \"ant-cascader-menu\"], [1, \"ant-cascader-menu-item\", \"ant-cascader-menu-item-disabled\"], [1, \"ant-cascader-menu-item-content\", 3, \"nzComponentName\", \"specificContent\"], [\"class\", \"ant-cascader-menu\", \"role\", \"menuitemcheckbox\", 3, \"ngClass\", \"height\", \"width\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"menuitemcheckbox\", 1, \"ant-cascader-menu\", 3, \"ngClass\"], [\"nz-cascader-option\", \"\", 3, \"expandIcon\", \"columnIndex\", \"nzLabelProperty\", \"optionTemplate\", \"activated\", \"highlightText\", \"option\", \"dir\", \"mouseenter\", \"mouseleave\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"nz-cascader-option\", \"\", 3, \"expandIcon\", \"columnIndex\", \"nzLabelProperty\", \"optionTemplate\", \"activated\", \"highlightText\", \"option\", \"dir\", \"mouseenter\", \"mouseleave\", \"click\"]],\n    template: function NzCascaderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵtemplate(3, NzCascaderComponent_ng_container_3_Template, 10, 12, \"ng-container\", 2);\n        i0.ɵɵprojection(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, NzCascaderComponent_ng_template_5_Template, 6, 15, \"ng-template\", 3);\n        i0.ɵɵlistener(\"overlayOutsideClick\", function NzCascaderComponent_Template_ng_template_overlayOutsideClick_5_listener($event) {\n          return ctx.onClickOutside($event);\n        })(\"detach\", function NzCascaderComponent_Template_ng_template_detach_5_listener() {\n          return ctx.closeMenu();\n        });\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.nzShowInput);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"cdkConnectedOverlayHasBackdrop\", ctx.nzBackdrop)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayPositions\", ctx.positions)(\"cdkConnectedOverlayTransformOriginOn\", \".ant-cascader-dropdown\")(\"cdkConnectedOverlayOpen\", ctx.menuVisible);\n      }\n    },\n    directives: [i6.NzEmbedEmptyComponent, NzCascaderOptionComponent, i8.CdkOverlayOrigin, i9.NgIf, i10.DefaultValueAccessor, i10.NgControlStatus, i10.NgModel, i9.NgTemplateOutlet, i2.NzIconDirective, i8.CdkConnectedOverlay, i12.NzConnectedOverlayDirective, i5.NzNoAnimationDirective, i9.NgClass, i9.NgStyle, i9.NgForOf, i4$1.Dir],\n    encapsulation: 2,\n    data: {\n      animation: [slideMotion]\n    },\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean()], NzCascaderComponent.prototype, \"nzShowInput\", void 0);\n\n  __decorate([InputBoolean()], NzCascaderComponent.prototype, \"nzShowArrow\", void 0);\n\n  __decorate([InputBoolean()], NzCascaderComponent.prototype, \"nzAllowClear\", void 0);\n\n  __decorate([InputBoolean()], NzCascaderComponent.prototype, \"nzAutoFocus\", void 0);\n\n  __decorate([InputBoolean()], NzCascaderComponent.prototype, \"nzChangeOnSelect\", void 0);\n\n  __decorate([InputBoolean()], NzCascaderComponent.prototype, \"nzDisabled\", void 0);\n\n  __decorate([WithConfig()], NzCascaderComponent.prototype, \"nzSize\", void 0);\n\n  __decorate([WithConfig()], NzCascaderComponent.prototype, \"nzBackdrop\", void 0);\n\n  return NzCascaderComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nlet NzCascaderModule = /*#__PURE__*/(() => {\n  class NzCascaderModule {}\n\n  NzCascaderModule.ɵfac = function NzCascaderModule_Factory(t) {\n    return new (t || NzCascaderModule)();\n  };\n\n  NzCascaderModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NzCascaderModule\n  });\n  NzCascaderModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[BidiModule, CommonModule, FormsModule, OverlayModule, NzOutletModule, NzEmptyModule, NzHighlightModule, NzIconModule, NzInputModule, NzNoAnimationModule, NzOverlayModule]]\n  });\n  return NzCascaderModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzCascaderComponent, NzCascaderModule, NzCascaderOptionComponent, NzCascaderService, isChildOption, isParentOption, isShowSearchObject }; //# sourceMappingURL=ng-zorro-antd-cascader.mjs.map","map":null,"metadata":{},"sourceType":"module"}