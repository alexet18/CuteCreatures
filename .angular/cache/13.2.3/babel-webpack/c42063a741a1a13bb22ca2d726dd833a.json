{"ast":null,"code":"import * as i3$1 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i5 from '@angular/cdk/scrolling';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Input, EventEmitter, Host, Optional, Output, Injectable, SkipSelf, forwardRef, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport * as i4 from 'ng-zorro-antd/core/highlight';\nimport { NzHighlightModule } from 'ng-zorro-antd/core/highlight';\nimport * as i4$1 from 'ng-zorro-antd/core/no-animation';\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport * as i2 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport * as i3 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { __decorate } from 'tslib';\nimport { Subject, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport * as i1 from 'ng-zorro-antd/core/tree';\nimport { NzTreeBaseService, NzTreeBase, flattenTreeData, NzTreeHigherOrderServiceToken } from 'ng-zorro-antd/core/tree';\nexport { NzTreeNode } from 'ng-zorro-antd/core/tree';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { treeCollapseMotion } from 'ng-zorro-antd/core/animation';\nimport * as i2$1 from 'ng-zorro-antd/core/config';\nimport { WithConfig } from 'ng-zorro-antd/core/config';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nfunction NzTreeIndentComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\");\n  }\n\n  if (rf & 2) {\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"ant-tree-indent-unit\", !ctx_r0.nzSelectMode)(\"ant-select-tree-indent-unit\", ctx_r0.nzSelectMode)(\"ant-select-tree-indent-unit-start\", ctx_r0.nzSelectMode && ctx_r0.nzIsStart[i_r2])(\"ant-tree-indent-unit-start\", !ctx_r0.nzSelectMode && ctx_r0.nzIsStart[i_r2])(\"ant-select-tree-indent-unit-end\", ctx_r0.nzSelectMode && ctx_r0.nzIsEnd[i_r2])(\"ant-tree-indent-unit-end\", !ctx_r0.nzSelectMode && ctx_r0.nzIsEnd[i_r2]);\n  }\n}\n\nconst _c0 = [\"builtin\", \"\"];\n\nfunction NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"i\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"ant-select-tree-switcher-icon\", ctx_r5.nzSelectMode)(\"ant-tree-switcher-icon\", !ctx_r5.nzSelectMode);\n  }\n}\n\nconst _c1 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    origin: a1\n  };\n};\n\nfunction NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_ng_container_1_Template, 2, 4, \"ng-container\", 3);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r4.nzExpandedIcon)(\"nzStringTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c1, ctx_r4.context, ctx_r4.context.origin));\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_0_ng_container_1_Template, 2, 5, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n\n    const _r2 = i0.ɵɵreference(3);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isLoading)(\"ngIfElse\", _r2);\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"nzType\", ctx_r8.isSwitcherOpen ? \"minus-square\" : \"plus-square\");\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 8);\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_1_Template, 1, 1, \"i\", 5);\n    i0.ɵɵtemplate(2, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_i_2_Template, 1, 0, \"i\", 6);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.isShowLineIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.isShowLineIcon);\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_ng_container_1_Template, 3, 2, \"ng-container\", 3);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r6.nzExpandedIcon)(\"nzStringTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c1, ctx_r6.context, ctx_r6.context.origin));\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_ng_container_1_Template, 2, 5, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n\n    const _r2 = i0.ɵɵreference(3);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.isLoading)(\"ngIfElse\", _r2);\n  }\n}\n\nfunction NzTreeNodeSwitcherComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 9);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"nzSpin\", true);\n  }\n}\n\nfunction NzTreeNodeTitleComponent_ng_template_0_Template(rf, ctx) {}\n\nfunction NzTreeNodeTitleComponent_ng_container_1_span_1_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"nzType\", ctx_r4.icon);\n  }\n}\n\nfunction NzTreeNodeTitleComponent_ng_container_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtemplate(2, NzTreeNodeTitleComponent_ng_container_1_span_1_i_2_Template, 1, 1, \"i\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"ant-tree-icon__open\", ctx_r2.isSwitcherOpen)(\"ant-tree-icon__close\", ctx_r2.isSwitcherClose)(\"ant-tree-icon_loading\", ctx_r2.isLoading)(\"ant-select-tree-iconEle\", ctx_r2.selectMode)(\"ant-tree-iconEle\", !ctx_r2.selectMode);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"ant-select-tree-iconEle\", ctx_r2.selectMode)(\"ant-select-tree-icon__customize\", ctx_r2.selectMode)(\"ant-tree-iconEle\", !ctx_r2.selectMode)(\"ant-tree-icon__customize\", !ctx_r2.selectMode);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.icon);\n  }\n}\n\nfunction NzTreeNodeTitleComponent_ng_container_1_nz_tree_drop_indicator_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"nz-tree-drop-indicator\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"dropPosition\", ctx_r3.dragPosition)(\"level\", ctx_r3.context.level);\n  }\n}\n\nfunction NzTreeNodeTitleComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeNodeTitleComponent_ng_container_1_span_1_Template, 3, 19, \"span\", 2);\n    i0.ɵɵelement(2, \"span\", 3);\n    i0.ɵɵpipe(3, \"nzHighlight\");\n    i0.ɵɵtemplate(4, NzTreeNodeTitleComponent_ng_container_1_nz_tree_drop_indicator_4_Template, 1, 2, \"nz-tree-drop-indicator\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.icon && ctx_r1.showIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind4(3, 3, ctx_r1.title, ctx_r1.matchedValue, \"i\", \"font-highlight\"), i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.showIndicator);\n  }\n}\n\nfunction NzTreeNodeBuiltinComponent_nz_tree_node_switcher_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"nz-tree-node-switcher\", 4);\n    i0.ɵɵlistener(\"click\", function NzTreeNodeBuiltinComponent_nz_tree_node_switcher_1_Template_nz_tree_node_switcher_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.clickExpand($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"nzShowExpand\", ctx_r0.nzShowExpand)(\"nzShowLine\", ctx_r0.nzShowLine)(\"nzExpandedIcon\", ctx_r0.nzExpandedIcon)(\"nzSelectMode\", ctx_r0.nzSelectMode)(\"context\", ctx_r0.nzTreeNode)(\"isLeaf\", ctx_r0.isLeaf)(\"isExpanded\", ctx_r0.isExpanded)(\"isLoading\", ctx_r0.isLoading);\n  }\n}\n\nfunction NzTreeNodeBuiltinComponent_nz_tree_node_checkbox_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"nz-tree-node-checkbox\", 5);\n    i0.ɵɵlistener(\"click\", function NzTreeNodeBuiltinComponent_nz_tree_node_checkbox_2_Template_nz_tree_node_checkbox_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.clickCheckBox($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"nzSelectMode\", ctx_r1.nzSelectMode)(\"isChecked\", ctx_r1.isChecked)(\"isHalfChecked\", ctx_r1.isHalfChecked)(\"isDisabled\", ctx_r1.isDisabled)(\"isDisableCheckbox\", ctx_r1.isDisableCheckbox);\n  }\n}\n\nconst _c2 = [\"nzTreeTemplate\"];\n\nfunction NzTreeComponent_cdk_virtual_scroll_viewport_6_ng_container_1_ng_template_1_Template(rf, ctx) {}\n\nconst _c3 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction NzTreeComponent_cdk_virtual_scroll_viewport_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeComponent_cdk_virtual_scroll_viewport_6_ng_container_1_ng_template_1_Template, 0, 0, \"ng-template\", 10);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const node_r5 = ctx.$implicit;\n    i0.ɵɵnextContext(2);\n\n    const _r2 = i0.ɵɵreference(9);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r2)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c3, node_r5));\n  }\n}\n\nfunction NzTreeComponent_cdk_virtual_scroll_viewport_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"cdk-virtual-scroll-viewport\", 8);\n    i0.ɵɵtemplate(1, NzTreeComponent_cdk_virtual_scroll_viewport_6_ng_container_1_Template, 2, 4, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"height\", ctx_r0.nzVirtualHeight);\n    i0.ɵɵclassProp(\"ant-select-tree-list-holder-inner\", ctx_r0.nzSelectMode)(\"ant-tree-list-holder-inner\", !ctx_r0.nzSelectMode);\n    i0.ɵɵproperty(\"itemSize\", ctx_r0.nzVirtualItemSize)(\"minBufferPx\", ctx_r0.nzVirtualMinBufferPx)(\"maxBufferPx\", ctx_r0.nzVirtualMaxBufferPx);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"cdkVirtualForOf\", ctx_r0.nzFlattenNodes)(\"cdkVirtualForTrackBy\", ctx_r0.trackByFlattenNode);\n  }\n}\n\nfunction NzTreeComponent_div_7_ng_container_1_ng_template_1_Template(rf, ctx) {}\n\nfunction NzTreeComponent_div_7_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeComponent_div_7_ng_container_1_ng_template_1_Template, 0, 0, \"ng-template\", 10);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const node_r8 = ctx.$implicit;\n    i0.ɵɵnextContext(2);\n\n    const _r2 = i0.ɵɵreference(9);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r2)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c3, node_r8));\n  }\n}\n\nfunction NzTreeComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtemplate(1, NzTreeComponent_div_7_ng_container_1_Template, 2, 4, \"ng-container\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"ant-select-tree-list-holder-inner\", ctx_r1.nzSelectMode)(\"ant-tree-list-holder-inner\", !ctx_r1.nzSelectMode);\n    i0.ɵɵproperty(\"@.disabled\", ctx_r1.beforeInit || (ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation))(\"nzNoAnimation\", ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation)(\"@treeCollapseMotion\", ctx_r1.nzFlattenNodes.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.nzFlattenNodes)(\"ngForTrackBy\", ctx_r1.trackByFlattenNode);\n  }\n}\n\nfunction NzTreeComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"nz-tree-node\", 13);\n    i0.ɵɵlistener(\"nzExpandChange\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzExpandChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.eventTriggerChanged($event);\n    })(\"nzClick\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.eventTriggerChanged($event);\n    })(\"nzDblClick\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzDblClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.eventTriggerChanged($event);\n    })(\"nzContextMenu\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzContextMenu_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.eventTriggerChanged($event);\n    })(\"nzCheckBoxChange\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzCheckBoxChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.eventTriggerChanged($event);\n    })(\"nzOnDragStart\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDragStart_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.eventTriggerChanged($event);\n    })(\"nzOnDragEnter\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDragEnter_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.eventTriggerChanged($event);\n    })(\"nzOnDragOver\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDragOver_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.eventTriggerChanged($event);\n    })(\"nzOnDragLeave\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDragLeave_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.eventTriggerChanged($event);\n    })(\"nzOnDragEnd\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDragEnd_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.eventTriggerChanged($event);\n    })(\"nzOnDrop\", function NzTreeComponent_ng_template_8_Template_nz_tree_node_nzOnDrop_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.eventTriggerChanged($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const treeNode_r10 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"icon\", treeNode_r10.icon)(\"title\", treeNode_r10.title)(\"isLoading\", treeNode_r10.isLoading)(\"isSelected\", treeNode_r10.isSelected)(\"isDisabled\", treeNode_r10.isDisabled)(\"isMatched\", treeNode_r10.isMatched)(\"isExpanded\", treeNode_r10.isExpanded)(\"isLeaf\", treeNode_r10.isLeaf)(\"isStart\", treeNode_r10.isStart)(\"isEnd\", treeNode_r10.isEnd)(\"isChecked\", treeNode_r10.isChecked)(\"isHalfChecked\", treeNode_r10.isHalfChecked)(\"isDisableCheckbox\", treeNode_r10.isDisableCheckbox)(\"isSelectable\", treeNode_r10.isSelectable)(\"canHide\", treeNode_r10.canHide)(\"nzTreeNode\", treeNode_r10)(\"nzSelectMode\", ctx_r3.nzSelectMode)(\"nzShowLine\", ctx_r3.nzShowLine)(\"nzExpandedIcon\", ctx_r3.nzExpandedIcon)(\"nzDraggable\", ctx_r3.nzDraggable)(\"nzCheckable\", ctx_r3.nzCheckable)(\"nzShowExpand\", ctx_r3.nzShowExpand)(\"nzAsyncData\", ctx_r3.nzAsyncData)(\"nzSearchValue\", ctx_r3.nzSearchValue)(\"nzHideUnMatched\", ctx_r3.nzHideUnMatched)(\"nzBeforeDrop\", ctx_r3.nzBeforeDrop)(\"nzShowIcon\", ctx_r3.nzShowIcon)(\"nzTreeTemplate\", ctx_r3.nzTreeTemplate || ctx_r3.nzTreeTemplateChild);\n  }\n}\n\nlet NzTreeDropIndicatorComponent = /*#__PURE__*/(() => {\n  class NzTreeDropIndicatorComponent {\n    constructor(cdr) {\n      this.cdr = cdr;\n      this.level = 1;\n      this.direction = 'ltr';\n      this.style = {};\n    }\n\n    ngOnChanges(_changes) {\n      this.renderIndicator(this.dropPosition, this.direction);\n    }\n\n    renderIndicator(dropPosition, direction = 'ltr') {\n      const offset = 4;\n      const startPosition = direction === 'ltr' ? 'left' : 'right';\n      const endPosition = direction === 'ltr' ? 'right' : 'left';\n      const style = {\n        [startPosition]: `${offset}px`,\n        [endPosition]: '0px'\n      };\n\n      switch (dropPosition) {\n        case -1:\n          style.top = `${-3}px`;\n          break;\n\n        case 1:\n          style.bottom = `${-3}px`;\n          break;\n\n        case 0:\n          // dropPosition === 0\n          style.bottom = `${-3}px`;\n          style[startPosition] = `${offset + 24}px`;\n          break;\n\n        default:\n          style.display = 'none';\n          break;\n      }\n\n      this.style = style;\n      this.cdr.markForCheck();\n    }\n\n  }\n\n  NzTreeDropIndicatorComponent.ɵfac = function NzTreeDropIndicatorComponent_Factory(t) {\n    return new (t || NzTreeDropIndicatorComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  NzTreeDropIndicatorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzTreeDropIndicatorComponent,\n    selectors: [[\"nz-tree-drop-indicator\"]],\n    hostVars: 4,\n    hostBindings: function NzTreeDropIndicatorComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleMap(ctx.style);\n        i0.ɵɵclassProp(\"ant-tree-drop-indicator\", true);\n      }\n    },\n    inputs: {\n      dropPosition: \"dropPosition\",\n      level: \"level\",\n      direction: \"direction\"\n    },\n    exportAs: [\"NzTreeDropIndicator\"],\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function NzTreeDropIndicatorComponent_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzTreeDropIndicatorComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nlet NzTreeIndentComponent = /*#__PURE__*/(() => {\n  class NzTreeIndentComponent {\n    constructor() {\n      this.nzTreeLevel = 0;\n      this.nzIsStart = [];\n      this.nzIsEnd = [];\n      this.nzSelectMode = false;\n      this.listOfUnit = [];\n    }\n\n    ngOnChanges(changes) {\n      const {\n        nzTreeLevel\n      } = changes;\n\n      if (nzTreeLevel) {\n        this.listOfUnit = [...new Array(nzTreeLevel.currentValue || 0)];\n      }\n    }\n\n  }\n\n  NzTreeIndentComponent.ɵfac = function NzTreeIndentComponent_Factory(t) {\n    return new (t || NzTreeIndentComponent)();\n  };\n\n  NzTreeIndentComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzTreeIndentComponent,\n    selectors: [[\"nz-tree-indent\"]],\n    hostVars: 5,\n    hostBindings: function NzTreeIndentComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-hidden\", true);\n        i0.ɵɵclassProp(\"ant-tree-indent\", !ctx.nzSelectMode)(\"ant-select-tree-indent\", ctx.nzSelectMode);\n      }\n    },\n    inputs: {\n      nzTreeLevel: \"nzTreeLevel\",\n      nzIsStart: \"nzIsStart\",\n      nzIsEnd: \"nzIsEnd\",\n      nzSelectMode: \"nzSelectMode\"\n    },\n    exportAs: [\"nzTreeIndent\"],\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"ant-tree-indent-unit\", \"ant-select-tree-indent-unit\", \"ant-select-tree-indent-unit-start\", \"ant-tree-indent-unit-start\", \"ant-select-tree-indent-unit-end\", \"ant-tree-indent-unit-end\", 4, \"ngFor\", \"ngForOf\"]],\n    template: function NzTreeIndentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NzTreeIndentComponent_span_0_Template, 1, 12, \"span\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.listOfUnit);\n      }\n    },\n    directives: [i7.NgForOf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzTreeIndentComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nlet NzTreeNodeBuiltinCheckboxComponent = /*#__PURE__*/(() => {\n  class NzTreeNodeBuiltinCheckboxComponent {\n    constructor() {\n      this.nzSelectMode = false;\n    }\n\n  }\n\n  NzTreeNodeBuiltinCheckboxComponent.ɵfac = function NzTreeNodeBuiltinCheckboxComponent_Factory(t) {\n    return new (t || NzTreeNodeBuiltinCheckboxComponent)();\n  };\n\n  NzTreeNodeBuiltinCheckboxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzTreeNodeBuiltinCheckboxComponent,\n    selectors: [[\"nz-tree-node-checkbox\", \"builtin\", \"\"]],\n    hostVars: 16,\n    hostBindings: function NzTreeNodeBuiltinCheckboxComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"ant-select-tree-checkbox\", ctx.nzSelectMode)(\"ant-select-tree-checkbox-checked\", ctx.nzSelectMode && ctx.isChecked)(\"ant-select-tree-checkbox-indeterminate\", ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-select-tree-checkbox-disabled\", ctx.nzSelectMode && (ctx.isDisabled || ctx.isDisableCheckbox))(\"ant-tree-checkbox\", !ctx.nzSelectMode)(\"ant-tree-checkbox-checked\", !ctx.nzSelectMode && ctx.isChecked)(\"ant-tree-checkbox-indeterminate\", !ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-tree-checkbox-disabled\", !ctx.nzSelectMode && (ctx.isDisabled || ctx.isDisableCheckbox));\n      }\n    },\n    inputs: {\n      nzSelectMode: \"nzSelectMode\",\n      isChecked: \"isChecked\",\n      isHalfChecked: \"isHalfChecked\",\n      isDisabled: \"isDisabled\",\n      isDisableCheckbox: \"isDisableCheckbox\"\n    },\n    attrs: _c0,\n    decls: 1,\n    vars: 4,\n    template: function NzTreeNodeBuiltinCheckboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"span\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"ant-tree-checkbox-inner\", !ctx.nzSelectMode)(\"ant-select-tree-checkbox-inner\", ctx.nzSelectMode);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzTreeNodeBuiltinCheckboxComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nlet NzTreeNodeSwitcherComponent = /*#__PURE__*/(() => {\n  class NzTreeNodeSwitcherComponent {\n    constructor() {\n      this.nzSelectMode = false;\n    }\n\n    get isShowLineIcon() {\n      return !this.isLeaf && !!this.nzShowLine;\n    }\n\n    get isShowSwitchIcon() {\n      return !this.isLeaf && !this.nzShowLine;\n    }\n\n    get isSwitcherOpen() {\n      return !!this.isExpanded && !this.isLeaf;\n    }\n\n    get isSwitcherClose() {\n      return !this.isExpanded && !this.isLeaf;\n    }\n\n  }\n\n  NzTreeNodeSwitcherComponent.ɵfac = function NzTreeNodeSwitcherComponent_Factory(t) {\n    return new (t || NzTreeNodeSwitcherComponent)();\n  };\n\n  NzTreeNodeSwitcherComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzTreeNodeSwitcherComponent,\n    selectors: [[\"nz-tree-node-switcher\"]],\n    hostVars: 16,\n    hostBindings: function NzTreeNodeSwitcherComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"ant-select-tree-switcher\", ctx.nzSelectMode)(\"ant-select-tree-switcher-noop\", ctx.nzSelectMode && ctx.isLeaf)(\"ant-select-tree-switcher_open\", ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-select-tree-switcher_close\", ctx.nzSelectMode && ctx.isSwitcherClose)(\"ant-tree-switcher\", !ctx.nzSelectMode)(\"ant-tree-switcher-noop\", !ctx.nzSelectMode && ctx.isLeaf)(\"ant-tree-switcher_open\", !ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-tree-switcher_close\", !ctx.nzSelectMode && ctx.isSwitcherClose);\n      }\n    },\n    inputs: {\n      nzShowExpand: \"nzShowExpand\",\n      nzShowLine: \"nzShowLine\",\n      nzExpandedIcon: \"nzExpandedIcon\",\n      nzSelectMode: \"nzSelectMode\",\n      context: \"context\",\n      isLeaf: \"isLeaf\",\n      isLoading: \"isLoading\",\n      isExpanded: \"isExpanded\"\n    },\n    decls: 4,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [\"loadingTemplate\", \"\"], [4, \"ngIf\", \"ngIfElse\"], [4, \"nzStringTemplateOutlet\", \"nzStringTemplateOutletContext\"], [\"nz-icon\", \"\", \"nzType\", \"caret-down\"], [\"nz-icon\", \"\", \"class\", \"ant-tree-switcher-line-icon\", 3, \"nzType\", 4, \"ngIf\"], [\"nz-icon\", \"\", \"nzType\", \"file\", \"class\", \"ant-tree-switcher-line-icon\", 4, \"ngIf\"], [\"nz-icon\", \"\", 1, \"ant-tree-switcher-line-icon\", 3, \"nzType\"], [\"nz-icon\", \"\", \"nzType\", \"file\", 1, \"ant-tree-switcher-line-icon\"], [\"nz-icon\", \"\", \"nzType\", \"loading\", 1, \"ant-tree-switcher-loading-icon\", 3, \"nzSpin\"]],\n    template: function NzTreeNodeSwitcherComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NzTreeNodeSwitcherComponent_ng_container_0_Template, 2, 2, \"ng-container\", 0);\n        i0.ɵɵtemplate(1, NzTreeNodeSwitcherComponent_ng_container_1_Template, 2, 2, \"ng-container\", 0);\n        i0.ɵɵtemplate(2, NzTreeNodeSwitcherComponent_ng_template_2_Template, 1, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.isShowSwitchIcon);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.nzShowLine);\n      }\n    },\n    directives: [i7.NgIf, i2.NzStringTemplateOutletDirective, i3.NzIconDirective],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzTreeNodeSwitcherComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nlet NzTreeNodeTitleComponent = /*#__PURE__*/(() => {\n  class NzTreeNodeTitleComponent {\n    constructor(cdr) {\n      this.cdr = cdr;\n      this.treeTemplate = null;\n      this.selectMode = false; // Drag indicator\n\n      this.showIndicator = true;\n    }\n\n    get canDraggable() {\n      return this.draggable && !this.isDisabled ? true : null;\n    }\n\n    get matchedValue() {\n      return this.isMatched ? this.searchValue : '';\n    }\n\n    get isSwitcherOpen() {\n      return this.isExpanded && !this.isLeaf;\n    }\n\n    get isSwitcherClose() {\n      return !this.isExpanded && !this.isLeaf;\n    }\n\n    ngOnChanges(changes) {\n      const {\n        showIndicator,\n        dragPosition\n      } = changes;\n\n      if (showIndicator || dragPosition) {\n        this.cdr.markForCheck();\n      }\n    }\n\n  }\n\n  NzTreeNodeTitleComponent.ɵfac = function NzTreeNodeTitleComponent_Factory(t) {\n    return new (t || NzTreeNodeTitleComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  NzTreeNodeTitleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzTreeNodeTitleComponent,\n    selectors: [[\"nz-tree-node-title\"]],\n    hostVars: 21,\n    hostBindings: function NzTreeNodeTitleComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"title\", ctx.title)(\"draggable\", ctx.canDraggable)(\"aria-grabbed\", ctx.canDraggable);\n        i0.ɵɵclassProp(\"draggable\", ctx.canDraggable)(\"ant-select-tree-node-content-wrapper\", ctx.selectMode)(\"ant-select-tree-node-content-wrapper-open\", ctx.selectMode && ctx.isSwitcherOpen)(\"ant-select-tree-node-content-wrapper-close\", ctx.selectMode && ctx.isSwitcherClose)(\"ant-select-tree-node-selected\", ctx.selectMode && ctx.isSelected)(\"ant-tree-node-content-wrapper\", !ctx.selectMode)(\"ant-tree-node-content-wrapper-open\", !ctx.selectMode && ctx.isSwitcherOpen)(\"ant-tree-node-content-wrapper-close\", !ctx.selectMode && ctx.isSwitcherClose)(\"ant-tree-node-selected\", !ctx.selectMode && ctx.isSelected);\n      }\n    },\n    inputs: {\n      searchValue: \"searchValue\",\n      treeTemplate: \"treeTemplate\",\n      draggable: \"draggable\",\n      showIcon: \"showIcon\",\n      selectMode: \"selectMode\",\n      context: \"context\",\n      icon: \"icon\",\n      title: \"title\",\n      isLoading: \"isLoading\",\n      isSelected: \"isSelected\",\n      isDisabled: \"isDisabled\",\n      isMatched: \"isMatched\",\n      isExpanded: \"isExpanded\",\n      isLeaf: \"isLeaf\",\n      showIndicator: \"showIndicator\",\n      dragPosition: \"dragPosition\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 6,\n    consts: [[3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngIf\"], [3, \"ant-tree-icon__open\", \"ant-tree-icon__close\", \"ant-tree-icon_loading\", \"ant-select-tree-iconEle\", \"ant-tree-iconEle\", 4, \"ngIf\"], [1, \"ant-tree-title\", 3, \"innerHTML\"], [3, \"dropPosition\", \"level\", 4, \"ngIf\"], [\"nz-icon\", \"\", 3, \"nzType\", 4, \"ngIf\"], [\"nz-icon\", \"\", 3, \"nzType\"], [3, \"dropPosition\", \"level\"]],\n    template: function NzTreeNodeTitleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NzTreeNodeTitleComponent_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n        i0.ɵɵtemplate(1, NzTreeNodeTitleComponent_ng_container_1_Template, 5, 8, \"ng-container\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.treeTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(3, _c1, ctx.context, ctx.context.origin));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.treeTemplate);\n      }\n    },\n    directives: [NzTreeDropIndicatorComponent, i7.NgTemplateOutlet, i7.NgIf, i3.NzIconDirective],\n    pipes: [i4.NzHighlightPipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzTreeNodeTitleComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NzTreeNodeBuiltinComponent = /*#__PURE__*/(() => {\n  class NzTreeNodeBuiltinComponent {\n    constructor(nzTreeService, ngZone, renderer, elementRef, cdr, noAnimation) {\n      this.nzTreeService = nzTreeService;\n      this.ngZone = ngZone;\n      this.renderer = renderer;\n      this.elementRef = elementRef;\n      this.cdr = cdr;\n      this.noAnimation = noAnimation;\n      /**\n       * for global property\n       */\n\n      this.icon = '';\n      this.title = '';\n      this.isLoading = false;\n      this.isSelected = false;\n      this.isDisabled = false;\n      this.isMatched = false;\n      this.isStart = [];\n      this.isEnd = [];\n      this.nzHideUnMatched = false;\n      this.nzNoAnimation = false;\n      this.nzSelectMode = false;\n      this.nzShowIcon = false;\n      this.nzTreeTemplate = null;\n      this.nzSearchValue = '';\n      this.nzDraggable = false;\n      this.nzClick = new EventEmitter();\n      this.nzDblClick = new EventEmitter();\n      this.nzContextMenu = new EventEmitter();\n      this.nzCheckBoxChange = new EventEmitter();\n      this.nzExpandChange = new EventEmitter();\n      this.nzOnDragStart = new EventEmitter();\n      this.nzOnDragEnter = new EventEmitter();\n      this.nzOnDragOver = new EventEmitter();\n      this.nzOnDragLeave = new EventEmitter();\n      this.nzOnDrop = new EventEmitter();\n      this.nzOnDragEnd = new EventEmitter();\n      /**\n       * drag var\n       */\n\n      this.destroy$ = new Subject();\n      this.dragPos = 2;\n      this.dragPosClass = {\n        0: 'drag-over',\n        1: 'drag-over-gap-bottom',\n        '-1': 'drag-over-gap-top'\n      };\n      this.draggingKey = null;\n      this.showIndicator = false;\n    }\n    /**\n     * default set\n     */\n\n\n    get displayStyle() {\n      // to hide unmatched nodes\n      return this.nzSearchValue && this.nzHideUnMatched && !this.isMatched && !this.isExpanded && this.canHide ? 'none' : '';\n    }\n\n    get isSwitcherOpen() {\n      return this.isExpanded && !this.isLeaf;\n    }\n\n    get isSwitcherClose() {\n      return !this.isExpanded && !this.isLeaf;\n    }\n    /**\n     * collapse node\n     *\n     * @param event\n     */\n\n\n    clickExpand(event) {\n      event.preventDefault();\n\n      if (!this.isLoading && !this.isLeaf) {\n        // set async state\n        if (this.nzAsyncData && this.nzTreeNode.children.length === 0 && !this.isExpanded) {\n          this.nzTreeNode.isLoading = true;\n        }\n\n        this.nzTreeNode.setExpanded(!this.isExpanded);\n      }\n\n      this.nzTreeService.setExpandedNodeList(this.nzTreeNode);\n      const eventNext = this.nzTreeService.formatEvent('expand', this.nzTreeNode, event);\n      this.nzExpandChange.emit(eventNext);\n    }\n\n    clickSelect(event) {\n      event.preventDefault();\n\n      if (this.isSelectable && !this.isDisabled) {\n        this.nzTreeNode.isSelected = !this.nzTreeNode.isSelected;\n      }\n\n      this.nzTreeService.setSelectedNodeList(this.nzTreeNode);\n      const eventNext = this.nzTreeService.formatEvent('click', this.nzTreeNode, event);\n      this.nzClick.emit(eventNext);\n    }\n\n    dblClick(event) {\n      event.preventDefault();\n      const eventNext = this.nzTreeService.formatEvent('dblclick', this.nzTreeNode, event);\n      this.nzDblClick.emit(eventNext);\n    }\n\n    contextMenu(event) {\n      event.preventDefault();\n      const eventNext = this.nzTreeService.formatEvent('contextmenu', this.nzTreeNode, event);\n      this.nzContextMenu.emit(eventNext);\n    }\n    /**\n     * check node\n     *\n     * @param event\n     */\n\n\n    clickCheckBox(event) {\n      event.preventDefault(); // return if node is disabled\n\n      if (this.isDisabled || this.isDisableCheckbox) {\n        return;\n      }\n\n      this.nzTreeNode.isChecked = !this.nzTreeNode.isChecked;\n      this.nzTreeNode.isHalfChecked = false;\n      this.nzTreeService.setCheckedNodeList(this.nzTreeNode);\n      const eventNext = this.nzTreeService.formatEvent('check', this.nzTreeNode, event);\n      this.nzCheckBoxChange.emit(eventNext);\n    }\n\n    clearDragClass() {\n      const dragClass = ['drag-over-gap-top', 'drag-over-gap-bottom', 'drag-over', 'drop-target'];\n      dragClass.forEach(e => {\n        this.renderer.removeClass(this.elementRef.nativeElement, e);\n      });\n    }\n    /**\n     * drag event\n     *\n     * @param e\n     */\n\n\n    handleDragStart(e) {\n      try {\n        // ie throw error\n        // firefox-need-it\n        e.dataTransfer.setData('text/plain', this.nzTreeNode.key);\n      } catch (error) {// empty\n      }\n\n      this.nzTreeService.setSelectedNode(this.nzTreeNode);\n      this.draggingKey = this.nzTreeNode.key;\n      const eventNext = this.nzTreeService.formatEvent('dragstart', this.nzTreeNode, e);\n      this.nzOnDragStart.emit(eventNext);\n    }\n\n    handleDragEnter(e) {\n      var _a;\n\n      e.preventDefault(); // reset position\n\n      this.showIndicator = this.nzTreeNode.key !== ((_a = this.nzTreeService.getSelectedNode()) === null || _a === void 0 ? void 0 : _a.key);\n      this.renderIndicator(2);\n      this.ngZone.run(() => {\n        const eventNext = this.nzTreeService.formatEvent('dragenter', this.nzTreeNode, e);\n        this.nzOnDragEnter.emit(eventNext);\n      });\n    }\n\n    handleDragOver(e) {\n      e.preventDefault();\n      const dropPosition = this.nzTreeService.calcDropPosition(e);\n\n      if (this.dragPos !== dropPosition) {\n        this.clearDragClass();\n        this.renderIndicator(dropPosition); // leaf node will pass\n\n        if (!(this.dragPos === 0 && this.isLeaf)) {\n          this.renderer.addClass(this.elementRef.nativeElement, this.dragPosClass[this.dragPos]);\n          this.renderer.addClass(this.elementRef.nativeElement, 'drop-target');\n        }\n      }\n\n      const eventNext = this.nzTreeService.formatEvent('dragover', this.nzTreeNode, e);\n      this.nzOnDragOver.emit(eventNext);\n    }\n\n    handleDragLeave(e) {\n      e.preventDefault();\n      this.renderIndicator(2);\n      this.clearDragClass();\n      const eventNext = this.nzTreeService.formatEvent('dragleave', this.nzTreeNode, e);\n      this.nzOnDragLeave.emit(eventNext);\n    }\n\n    handleDragDrop(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.ngZone.run(() => {\n        this.showIndicator = false;\n        this.clearDragClass();\n        const node = this.nzTreeService.getSelectedNode();\n\n        if (!node || node && node.key === this.nzTreeNode.key || this.dragPos === 0 && this.isLeaf) {\n          return;\n        } // pass if node is leafNo\n\n\n        const dropEvent = this.nzTreeService.formatEvent('drop', this.nzTreeNode, e);\n        const dragEndEvent = this.nzTreeService.formatEvent('dragend', this.nzTreeNode, e);\n\n        if (this.nzBeforeDrop) {\n          this.nzBeforeDrop({\n            dragNode: this.nzTreeService.getSelectedNode(),\n            node: this.nzTreeNode,\n            pos: this.dragPos\n          }).subscribe(canDrop => {\n            if (canDrop) {\n              this.nzTreeService.dropAndApply(this.nzTreeNode, this.dragPos);\n            }\n\n            this.nzOnDrop.emit(dropEvent);\n            this.nzOnDragEnd.emit(dragEndEvent);\n          });\n        } else if (this.nzTreeNode) {\n          this.nzTreeService.dropAndApply(this.nzTreeNode, this.dragPos);\n          this.nzOnDrop.emit(dropEvent);\n        }\n      });\n    }\n\n    handleDragEnd(e) {\n      e.preventDefault();\n      this.ngZone.run(() => {\n        // if user do not custom beforeDrop\n        if (!this.nzBeforeDrop) {\n          // clear dragging state\n          this.draggingKey = null;\n          const eventNext = this.nzTreeService.formatEvent('dragend', this.nzTreeNode, e);\n          this.nzOnDragEnd.emit(eventNext);\n        }\n      });\n    }\n    /**\n     * Listening to dragging events.\n     */\n\n\n    handDragEvent() {\n      this.ngZone.runOutsideAngular(() => {\n        if (this.nzDraggable) {\n          const nativeElement = this.elementRef.nativeElement;\n          this.destroy$ = new Subject();\n          fromEvent(nativeElement, 'dragstart').pipe(takeUntil(this.destroy$)).subscribe(e => this.handleDragStart(e));\n          fromEvent(nativeElement, 'dragenter').pipe(takeUntil(this.destroy$)).subscribe(e => this.handleDragEnter(e));\n          fromEvent(nativeElement, 'dragover').pipe(takeUntil(this.destroy$)).subscribe(e => this.handleDragOver(e));\n          fromEvent(nativeElement, 'dragleave').pipe(takeUntil(this.destroy$)).subscribe(e => this.handleDragLeave(e));\n          fromEvent(nativeElement, 'drop').pipe(takeUntil(this.destroy$)).subscribe(e => this.handleDragDrop(e));\n          fromEvent(nativeElement, 'dragend').pipe(takeUntil(this.destroy$)).subscribe(e => this.handleDragEnd(e));\n        } else {\n          this.destroy$.next();\n          this.destroy$.complete();\n        }\n      });\n    }\n\n    markForCheck() {\n      this.cdr.markForCheck();\n    }\n\n    ngOnInit() {\n      this.nzTreeNode.component = this;\n      this.ngZone.runOutsideAngular(() => {\n        fromEvent(this.elementRef.nativeElement, 'mousedown').pipe(takeUntil(this.destroy$)).subscribe(event => {\n          if (this.nzSelectMode) {\n            event.preventDefault();\n          }\n        });\n      });\n    }\n\n    ngOnChanges(changes) {\n      const {\n        nzDraggable\n      } = changes;\n\n      if (nzDraggable) {\n        this.handDragEvent();\n      }\n    }\n\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n\n    renderIndicator(dropPosition) {\n      this.ngZone.run(() => {\n        var _a;\n\n        this.showIndicator = dropPosition !== 2;\n\n        if (this.nzTreeNode.key === ((_a = this.nzTreeService.getSelectedNode()) === null || _a === void 0 ? void 0 : _a.key) || dropPosition === 0 && this.isLeaf) {\n          return;\n        }\n\n        this.dragPos = dropPosition;\n        this.cdr.markForCheck();\n      });\n    }\n\n  }\n\n  NzTreeNodeBuiltinComponent.ɵfac = function NzTreeNodeBuiltinComponent_Factory(t) {\n    return new (t || NzTreeNodeBuiltinComponent)(i0.ɵɵdirectiveInject(i1.NzTreeBaseService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4$1.NzNoAnimationDirective, 9));\n  };\n\n  NzTreeNodeBuiltinComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzTreeNodeBuiltinComponent,\n    selectors: [[\"nz-tree-node\", \"builtin\", \"\"]],\n    hostVars: 36,\n    hostBindings: function NzTreeNodeBuiltinComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n        i0.ɵɵclassProp(\"ant-select-tree-treenode\", ctx.nzSelectMode)(\"ant-select-tree-treenode-disabled\", ctx.nzSelectMode && ctx.isDisabled)(\"ant-select-tree-treenode-switcher-open\", ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-select-tree-treenode-switcher-close\", ctx.nzSelectMode && ctx.isSwitcherClose)(\"ant-select-tree-treenode-checkbox-checked\", ctx.nzSelectMode && ctx.isChecked)(\"ant-select-tree-treenode-checkbox-indeterminate\", ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-select-tree-treenode-selected\", ctx.nzSelectMode && ctx.isSelected)(\"ant-select-tree-treenode-loading\", ctx.nzSelectMode && ctx.isLoading)(\"ant-tree-treenode\", !ctx.nzSelectMode)(\"ant-tree-treenode-disabled\", !ctx.nzSelectMode && ctx.isDisabled)(\"ant-tree-treenode-switcher-open\", !ctx.nzSelectMode && ctx.isSwitcherOpen)(\"ant-tree-treenode-switcher-close\", !ctx.nzSelectMode && ctx.isSwitcherClose)(\"ant-tree-treenode-checkbox-checked\", !ctx.nzSelectMode && ctx.isChecked)(\"ant-tree-treenode-checkbox-indeterminate\", !ctx.nzSelectMode && ctx.isHalfChecked)(\"ant-tree-treenode-selected\", !ctx.nzSelectMode && ctx.isSelected)(\"ant-tree-treenode-loading\", !ctx.nzSelectMode && ctx.isLoading)(\"dragging\", ctx.draggingKey === ctx.nzTreeNode.key);\n      }\n    },\n    inputs: {\n      icon: \"icon\",\n      title: \"title\",\n      isLoading: \"isLoading\",\n      isSelected: \"isSelected\",\n      isDisabled: \"isDisabled\",\n      isMatched: \"isMatched\",\n      isExpanded: \"isExpanded\",\n      isLeaf: \"isLeaf\",\n      isChecked: \"isChecked\",\n      isHalfChecked: \"isHalfChecked\",\n      isDisableCheckbox: \"isDisableCheckbox\",\n      isSelectable: \"isSelectable\",\n      canHide: \"canHide\",\n      isStart: \"isStart\",\n      isEnd: \"isEnd\",\n      nzTreeNode: \"nzTreeNode\",\n      nzShowLine: \"nzShowLine\",\n      nzShowExpand: \"nzShowExpand\",\n      nzCheckable: \"nzCheckable\",\n      nzAsyncData: \"nzAsyncData\",\n      nzHideUnMatched: \"nzHideUnMatched\",\n      nzNoAnimation: \"nzNoAnimation\",\n      nzSelectMode: \"nzSelectMode\",\n      nzShowIcon: \"nzShowIcon\",\n      nzExpandedIcon: \"nzExpandedIcon\",\n      nzTreeTemplate: \"nzTreeTemplate\",\n      nzBeforeDrop: \"nzBeforeDrop\",\n      nzSearchValue: \"nzSearchValue\",\n      nzDraggable: \"nzDraggable\"\n    },\n    outputs: {\n      nzClick: \"nzClick\",\n      nzDblClick: \"nzDblClick\",\n      nzContextMenu: \"nzContextMenu\",\n      nzCheckBoxChange: \"nzCheckBoxChange\",\n      nzExpandChange: \"nzExpandChange\",\n      nzOnDragStart: \"nzOnDragStart\",\n      nzOnDragEnter: \"nzOnDragEnter\",\n      nzOnDragOver: \"nzOnDragOver\",\n      nzOnDragLeave: \"nzOnDragLeave\",\n      nzOnDrop: \"nzOnDrop\",\n      nzOnDragEnd: \"nzOnDragEnd\"\n    },\n    exportAs: [\"nzTreeBuiltinNode\"],\n    features: [i0.ɵɵNgOnChangesFeature],\n    attrs: _c0,\n    decls: 4,\n    vars: 22,\n    consts: [[3, \"nzTreeLevel\", \"nzSelectMode\", \"nzIsStart\", \"nzIsEnd\"], [3, \"nzShowExpand\", \"nzShowLine\", \"nzExpandedIcon\", \"nzSelectMode\", \"context\", \"isLeaf\", \"isExpanded\", \"isLoading\", \"click\", 4, \"ngIf\"], [\"builtin\", \"\", 3, \"nzSelectMode\", \"isChecked\", \"isHalfChecked\", \"isDisabled\", \"isDisableCheckbox\", \"click\", 4, \"ngIf\"], [3, \"icon\", \"title\", \"isLoading\", \"isSelected\", \"isDisabled\", \"isMatched\", \"isExpanded\", \"isLeaf\", \"searchValue\", \"treeTemplate\", \"draggable\", \"showIcon\", \"selectMode\", \"context\", \"showIndicator\", \"dragPosition\", \"dblclick\", \"click\", \"contextmenu\"], [3, \"nzShowExpand\", \"nzShowLine\", \"nzExpandedIcon\", \"nzSelectMode\", \"context\", \"isLeaf\", \"isExpanded\", \"isLoading\", \"click\"], [\"builtin\", \"\", 3, \"nzSelectMode\", \"isChecked\", \"isHalfChecked\", \"isDisabled\", \"isDisableCheckbox\", \"click\"]],\n    template: function NzTreeNodeBuiltinComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"nz-tree-indent\", 0);\n        i0.ɵɵtemplate(1, NzTreeNodeBuiltinComponent_nz_tree_node_switcher_1_Template, 1, 8, \"nz-tree-node-switcher\", 1);\n        i0.ɵɵtemplate(2, NzTreeNodeBuiltinComponent_nz_tree_node_checkbox_2_Template, 1, 5, \"nz-tree-node-checkbox\", 2);\n        i0.ɵɵelementStart(3, \"nz-tree-node-title\", 3);\n        i0.ɵɵlistener(\"dblclick\", function NzTreeNodeBuiltinComponent_Template_nz_tree_node_title_dblclick_3_listener($event) {\n          return ctx.dblClick($event);\n        })(\"click\", function NzTreeNodeBuiltinComponent_Template_nz_tree_node_title_click_3_listener($event) {\n          return ctx.clickSelect($event);\n        })(\"contextmenu\", function NzTreeNodeBuiltinComponent_Template_nz_tree_node_title_contextmenu_3_listener($event) {\n          return ctx.contextMenu($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"nzTreeLevel\", ctx.nzTreeNode.level)(\"nzSelectMode\", ctx.nzSelectMode)(\"nzIsStart\", ctx.isStart)(\"nzIsEnd\", ctx.isEnd);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.nzShowExpand);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.nzCheckable);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"icon\", ctx.icon)(\"title\", ctx.title)(\"isLoading\", ctx.isLoading)(\"isSelected\", ctx.isSelected)(\"isDisabled\", ctx.isDisabled)(\"isMatched\", ctx.isMatched)(\"isExpanded\", ctx.isExpanded)(\"isLeaf\", ctx.isLeaf)(\"searchValue\", ctx.nzSearchValue)(\"treeTemplate\", ctx.nzTreeTemplate)(\"draggable\", ctx.nzDraggable)(\"showIcon\", ctx.nzShowIcon)(\"selectMode\", ctx.nzSelectMode)(\"context\", ctx.nzTreeNode)(\"showIndicator\", ctx.showIndicator)(\"dragPosition\", ctx.dragPos);\n      }\n    },\n    directives: [NzTreeIndentComponent, NzTreeNodeSwitcherComponent, NzTreeNodeBuiltinCheckboxComponent, NzTreeNodeTitleComponent, i7.NgIf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzShowLine\", void 0);\n\n  __decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzShowExpand\", void 0);\n\n  __decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzCheckable\", void 0);\n\n  __decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzAsyncData\", void 0);\n\n  __decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzHideUnMatched\", void 0);\n\n  __decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzNoAnimation\", void 0);\n\n  __decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzSelectMode\", void 0);\n\n  __decorate([InputBoolean()], NzTreeNodeBuiltinComponent.prototype, \"nzShowIcon\", void 0);\n\n  return NzTreeNodeBuiltinComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nlet NzTreeService = /*#__PURE__*/(() => {\n  class NzTreeService extends NzTreeBaseService {\n    constructor() {\n      super();\n    }\n\n  }\n\n  NzTreeService.ɵfac = function NzTreeService_Factory(t) {\n    return new (t || NzTreeService)();\n  };\n\n  NzTreeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NzTreeService,\n    factory: NzTreeService.ɵfac\n  });\n  return NzTreeService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction NzTreeServiceFactory(higherOrderService, treeService) {\n  return higherOrderService ? higherOrderService : treeService;\n}\n\nconst NZ_CONFIG_MODULE_NAME = 'tree';\nlet NzTreeComponent = /*#__PURE__*/(() => {\n  class NzTreeComponent extends NzTreeBase {\n    // Handle emit event end\n    constructor(nzTreeService, nzConfigService, cdr, directionality, noAnimation) {\n      super(nzTreeService);\n      this.nzConfigService = nzConfigService;\n      this.cdr = cdr;\n      this.directionality = directionality;\n      this.noAnimation = noAnimation;\n      this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n      this.nzShowIcon = false;\n      this.nzHideUnMatched = false;\n      this.nzBlockNode = false;\n      this.nzExpandAll = false;\n      this.nzSelectMode = false;\n      this.nzCheckStrictly = false;\n      this.nzShowExpand = true;\n      this.nzShowLine = false;\n      this.nzCheckable = false;\n      this.nzAsyncData = false;\n      this.nzDraggable = false;\n      this.nzMultiple = false;\n      this.nzVirtualItemSize = 28;\n      this.nzVirtualMaxBufferPx = 500;\n      this.nzVirtualMinBufferPx = 28;\n      this.nzVirtualHeight = null;\n      this.nzData = [];\n      this.nzExpandedKeys = [];\n      this.nzSelectedKeys = [];\n      this.nzCheckedKeys = [];\n      this.nzSearchValue = '';\n      this.nzFlattenNodes = [];\n      this.beforeInit = true;\n      this.dir = 'ltr';\n      this.nzExpandedKeysChange = new EventEmitter();\n      this.nzSelectedKeysChange = new EventEmitter();\n      this.nzCheckedKeysChange = new EventEmitter();\n      this.nzSearchValueChange = new EventEmitter();\n      this.nzClick = new EventEmitter();\n      this.nzDblClick = new EventEmitter();\n      this.nzContextMenu = new EventEmitter();\n      this.nzCheckBoxChange = new EventEmitter();\n      this.nzExpandChange = new EventEmitter();\n      this.nzOnDragStart = new EventEmitter();\n      this.nzOnDragEnter = new EventEmitter();\n      this.nzOnDragOver = new EventEmitter();\n      this.nzOnDragLeave = new EventEmitter();\n      this.nzOnDrop = new EventEmitter();\n      this.nzOnDragEnd = new EventEmitter();\n      this.HIDDEN_STYLE = {\n        width: 0,\n        height: 0,\n        display: 'flex',\n        overflow: 'hidden',\n        opacity: 0,\n        border: 0,\n        padding: 0,\n        margin: 0\n      };\n      this.HIDDEN_NODE_STYLE = {\n        position: 'absolute',\n        pointerEvents: 'none',\n        visibility: 'hidden',\n        height: 0,\n        overflow: 'hidden'\n      };\n      this.destroy$ = new Subject();\n\n      this.onChange = () => null;\n\n      this.onTouched = () => null;\n    }\n\n    writeValue(value) {\n      this.handleNzData(value);\n    }\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Render all properties of nzTree\n     *\n     * @param changes: all changes from @Input\n     */\n\n\n    renderTreeProperties(changes) {\n      let useDefaultExpandedKeys = false;\n      let expandAll = false;\n      const {\n        nzData,\n        nzExpandedKeys,\n        nzSelectedKeys,\n        nzCheckedKeys,\n        nzCheckStrictly,\n        nzExpandAll,\n        nzMultiple,\n        nzSearchValue\n      } = changes;\n\n      if (nzExpandAll) {\n        useDefaultExpandedKeys = true;\n        expandAll = this.nzExpandAll;\n      }\n\n      if (nzMultiple) {\n        this.nzTreeService.isMultiple = this.nzMultiple;\n      }\n\n      if (nzCheckStrictly) {\n        this.nzTreeService.isCheckStrictly = this.nzCheckStrictly;\n      }\n\n      if (nzData) {\n        this.handleNzData(this.nzData);\n      }\n\n      if (nzCheckedKeys) {\n        this.handleCheckedKeys(this.nzCheckedKeys);\n      }\n\n      if (nzCheckStrictly) {\n        this.handleCheckedKeys(null);\n      }\n\n      if (nzExpandedKeys || nzExpandAll) {\n        useDefaultExpandedKeys = true;\n        this.handleExpandedKeys(expandAll || this.nzExpandedKeys);\n      }\n\n      if (nzSelectedKeys) {\n        this.handleSelectedKeys(this.nzSelectedKeys, this.nzMultiple);\n      }\n\n      if (nzSearchValue) {\n        if (!(nzSearchValue.firstChange && !this.nzSearchValue)) {\n          useDefaultExpandedKeys = false;\n          this.handleSearchValue(nzSearchValue.currentValue, this.nzSearchFunc);\n          this.nzSearchValueChange.emit(this.nzTreeService.formatEvent('search', null, null));\n        }\n      } // flatten data\n\n\n      const currentExpandedKeys = this.getExpandedNodeList().map(v => v.key);\n      const newExpandedKeys = useDefaultExpandedKeys ? expandAll || this.nzExpandedKeys : currentExpandedKeys;\n      this.handleFlattenNodes(this.nzTreeService.rootNodes, newExpandedKeys);\n    }\n\n    trackByFlattenNode(_, node) {\n      return node.key;\n    } // Deal with properties\n\n    /**\n     * nzData\n     *\n     * @param value\n     */\n\n\n    handleNzData(value) {\n      if (Array.isArray(value)) {\n        const data = this.coerceTreeNodes(value);\n        this.nzTreeService.initTree(data);\n      }\n    }\n\n    handleFlattenNodes(data, expandKeys = []) {\n      this.nzTreeService.flattenTreeData(data, expandKeys);\n    }\n\n    handleCheckedKeys(keys) {\n      this.nzTreeService.conductCheck(keys, this.nzCheckStrictly);\n    }\n\n    handleExpandedKeys(keys = []) {\n      this.nzTreeService.conductExpandedKeys(keys);\n    }\n\n    handleSelectedKeys(keys, isMulti) {\n      this.nzTreeService.conductSelectedKeys(keys, isMulti);\n    }\n\n    handleSearchValue(value, searchFunc) {\n      const dataList = flattenTreeData(this.nzTreeService.rootNodes, true).map(v => v.data);\n\n      const checkIfMatched = node => {\n        if (searchFunc) {\n          return searchFunc(node.origin);\n        }\n\n        return !value || !node.title.toLowerCase().includes(value.toLowerCase()) ? false : true;\n      };\n\n      dataList.forEach(v => {\n        v.isMatched = checkIfMatched(v);\n        v.canHide = !v.isMatched;\n\n        if (!v.isMatched) {\n          v.setExpanded(false);\n          this.nzTreeService.setExpandedNodeList(v);\n        } else {\n          // expand\n          this.nzTreeService.expandNodeAllParentBySearch(v);\n        }\n\n        this.nzTreeService.setMatchedNodeList(v);\n      });\n    }\n    /**\n     * Handle emit event\n     *\n     * @param event\n     * handle each event\n     */\n\n\n    eventTriggerChanged(event) {\n      const node = event.node;\n\n      switch (event.eventName) {\n        case 'expand':\n          this.renderTree();\n          this.nzExpandChange.emit(event);\n          break;\n\n        case 'click':\n          this.nzClick.emit(event);\n          break;\n\n        case 'dblclick':\n          this.nzDblClick.emit(event);\n          break;\n\n        case 'contextmenu':\n          this.nzContextMenu.emit(event);\n          break;\n\n        case 'check':\n          // Render checked state with nodes' property `isChecked`\n          this.nzTreeService.setCheckedNodeList(node);\n\n          if (!this.nzCheckStrictly) {\n            this.nzTreeService.conduct(node);\n          } // Cause check method will rerender list, so we need recover it and next the new event to user\n\n\n          const eventNext = this.nzTreeService.formatEvent('check', node, event.event);\n          this.nzCheckBoxChange.emit(eventNext);\n          break;\n\n        case 'dragstart':\n          // if node is expanded\n          if (node.isExpanded) {\n            node.setExpanded(!node.isExpanded);\n            this.renderTree();\n          }\n\n          this.nzOnDragStart.emit(event);\n          break;\n\n        case 'dragenter':\n          const selectedNode = this.nzTreeService.getSelectedNode();\n\n          if (selectedNode && selectedNode.key !== node.key && !node.isExpanded && !node.isLeaf) {\n            node.setExpanded(true);\n            this.renderTree();\n          }\n\n          this.nzOnDragEnter.emit(event);\n          break;\n\n        case 'dragover':\n          this.nzOnDragOver.emit(event);\n          break;\n\n        case 'dragleave':\n          this.nzOnDragLeave.emit(event);\n          break;\n\n        case 'dragend':\n          this.nzOnDragEnd.emit(event);\n          break;\n\n        case 'drop':\n          this.renderTree();\n          this.nzOnDrop.emit(event);\n          break;\n      }\n    }\n    /**\n     * Click expand icon\n     */\n\n\n    renderTree() {\n      this.handleFlattenNodes(this.nzTreeService.rootNodes, this.getExpandedNodeList().map(v => v.key));\n      this.cdr.markForCheck();\n    }\n\n    ngOnInit() {\n      var _a;\n\n      this.nzTreeService.flattenNodes$.pipe(takeUntil(this.destroy$)).subscribe(data => {\n        this.nzFlattenNodes = data;\n        this.cdr.markForCheck();\n      });\n      this.dir = this.directionality.value;\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n      });\n    }\n\n    ngOnChanges(changes) {\n      this.renderTreeProperties(changes);\n    }\n\n    ngAfterViewInit() {\n      this.beforeInit = false;\n    }\n\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n\n  }\n\n  NzTreeComponent.ɵfac = function NzTreeComponent_Factory(t) {\n    return new (t || NzTreeComponent)(i0.ɵɵdirectiveInject(i1.NzTreeBaseService), i0.ɵɵdirectiveInject(i2$1.NzConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3$1.Directionality, 8), i0.ɵɵdirectiveInject(i4$1.NzNoAnimationDirective, 9));\n  };\n\n  NzTreeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzTreeComponent,\n    selectors: [[\"nz-tree\"]],\n    contentQueries: function NzTreeComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c2, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nzTreeTemplateChild = _t.first);\n      }\n    },\n    viewQuery: function NzTreeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(CdkVirtualScrollViewport, 5, CdkVirtualScrollViewport);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cdkVirtualScrollViewport = _t.first);\n      }\n    },\n    hostVars: 20,\n    hostBindings: function NzTreeComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"ant-select-tree\", ctx.nzSelectMode)(\"ant-select-tree-show-line\", ctx.nzSelectMode && ctx.nzShowLine)(\"ant-select-tree-icon-hide\", ctx.nzSelectMode && !ctx.nzShowIcon)(\"ant-select-tree-block-node\", ctx.nzSelectMode && ctx.nzBlockNode)(\"ant-tree\", !ctx.nzSelectMode)(\"ant-tree-rtl\", ctx.dir === \"rtl\")(\"ant-tree-show-line\", !ctx.nzSelectMode && ctx.nzShowLine)(\"ant-tree-icon-hide\", !ctx.nzSelectMode && !ctx.nzShowIcon)(\"ant-tree-block-node\", !ctx.nzSelectMode && ctx.nzBlockNode)(\"draggable-tree\", ctx.nzDraggable);\n      }\n    },\n    inputs: {\n      nzShowIcon: \"nzShowIcon\",\n      nzHideUnMatched: \"nzHideUnMatched\",\n      nzBlockNode: \"nzBlockNode\",\n      nzExpandAll: \"nzExpandAll\",\n      nzSelectMode: \"nzSelectMode\",\n      nzCheckStrictly: \"nzCheckStrictly\",\n      nzShowExpand: \"nzShowExpand\",\n      nzShowLine: \"nzShowLine\",\n      nzCheckable: \"nzCheckable\",\n      nzAsyncData: \"nzAsyncData\",\n      nzDraggable: \"nzDraggable\",\n      nzMultiple: \"nzMultiple\",\n      nzExpandedIcon: \"nzExpandedIcon\",\n      nzVirtualItemSize: \"nzVirtualItemSize\",\n      nzVirtualMaxBufferPx: \"nzVirtualMaxBufferPx\",\n      nzVirtualMinBufferPx: \"nzVirtualMinBufferPx\",\n      nzVirtualHeight: \"nzVirtualHeight\",\n      nzTreeTemplate: \"nzTreeTemplate\",\n      nzBeforeDrop: \"nzBeforeDrop\",\n      nzData: \"nzData\",\n      nzExpandedKeys: \"nzExpandedKeys\",\n      nzSelectedKeys: \"nzSelectedKeys\",\n      nzCheckedKeys: \"nzCheckedKeys\",\n      nzSearchValue: \"nzSearchValue\",\n      nzSearchFunc: \"nzSearchFunc\"\n    },\n    outputs: {\n      nzExpandedKeysChange: \"nzExpandedKeysChange\",\n      nzSelectedKeysChange: \"nzSelectedKeysChange\",\n      nzCheckedKeysChange: \"nzCheckedKeysChange\",\n      nzSearchValueChange: \"nzSearchValueChange\",\n      nzClick: \"nzClick\",\n      nzDblClick: \"nzDblClick\",\n      nzContextMenu: \"nzContextMenu\",\n      nzCheckBoxChange: \"nzCheckBoxChange\",\n      nzExpandChange: \"nzExpandChange\",\n      nzOnDragStart: \"nzOnDragStart\",\n      nzOnDragEnter: \"nzOnDragEnter\",\n      nzOnDragOver: \"nzOnDragOver\",\n      nzOnDragLeave: \"nzOnDragLeave\",\n      nzOnDrop: \"nzOnDrop\",\n      nzOnDragEnd: \"nzOnDragEnd\"\n    },\n    exportAs: [\"nzTree\"],\n    features: [i0.ɵɵProvidersFeature([NzTreeService, {\n      provide: NzTreeBaseService,\n      useFactory: NzTreeServiceFactory,\n      deps: [[new SkipSelf(), new Optional(), NzTreeHigherOrderServiceToken], NzTreeService]\n    }, {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NzTreeComponent),\n      multi: true\n    }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 10,\n    vars: 6,\n    consts: [[3, \"ngStyle\"], [1, \"ant-tree-treenode\", 3, \"ngStyle\"], [1, \"ant-tree-indent\"], [1, \"ant-tree-indent-unit\"], [1, \"ant-tree-list\", 2, \"position\", \"relative\"], [3, \"ant-select-tree-list-holder-inner\", \"ant-tree-list-holder-inner\", \"itemSize\", \"minBufferPx\", \"maxBufferPx\", \"height\", 4, \"ngIf\"], [3, \"ant-select-tree-list-holder-inner\", \"ant-tree-list-holder-inner\", \"nzNoAnimation\", 4, \"ngIf\"], [\"nodeTemplate\", \"\"], [3, \"itemSize\", \"minBufferPx\", \"maxBufferPx\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\", \"cdkVirtualForTrackBy\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"nzNoAnimation\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"builtin\", \"\", 3, \"icon\", \"title\", \"isLoading\", \"isSelected\", \"isDisabled\", \"isMatched\", \"isExpanded\", \"isLeaf\", \"isStart\", \"isEnd\", \"isChecked\", \"isHalfChecked\", \"isDisableCheckbox\", \"isSelectable\", \"canHide\", \"nzTreeNode\", \"nzSelectMode\", \"nzShowLine\", \"nzExpandedIcon\", \"nzDraggable\", \"nzCheckable\", \"nzShowExpand\", \"nzAsyncData\", \"nzSearchValue\", \"nzHideUnMatched\", \"nzBeforeDrop\", \"nzShowIcon\", \"nzTreeTemplate\", \"nzExpandChange\", \"nzClick\", \"nzDblClick\", \"nzContextMenu\", \"nzCheckBoxChange\", \"nzOnDragStart\", \"nzOnDragEnter\", \"nzOnDragOver\", \"nzOnDragLeave\", \"nzOnDragEnd\", \"nzOnDrop\"]],\n    template: function NzTreeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelement(1, \"input\", 0);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelement(4, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵtemplate(6, NzTreeComponent_cdk_virtual_scroll_viewport_6_Template, 2, 11, \"cdk-virtual-scroll-viewport\", 5);\n        i0.ɵɵtemplate(7, NzTreeComponent_div_7_Template, 2, 9, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, NzTreeComponent_ng_template_8_Template, 1, 28, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", ctx.HIDDEN_STYLE);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", ctx.HIDDEN_NODE_STYLE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵclassProp(\"ant-select-tree-list\", ctx.nzSelectMode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.nzVirtualHeight);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.nzVirtualHeight);\n      }\n    },\n    directives: [i5.CdkVirtualScrollViewport, NzTreeNodeBuiltinComponent, i7.NgStyle, i7.NgIf, i5.CdkFixedSizeVirtualScroll, i5.CdkVirtualForOf, i7.NgTemplateOutlet, i4$1.NzNoAnimationDirective, i7.NgForOf],\n    encapsulation: 2,\n    data: {\n      animation: [treeCollapseMotion]\n    },\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean(), WithConfig()], NzTreeComponent.prototype, \"nzShowIcon\", void 0);\n\n  __decorate([InputBoolean(), WithConfig()], NzTreeComponent.prototype, \"nzHideUnMatched\", void 0);\n\n  __decorate([InputBoolean(), WithConfig()], NzTreeComponent.prototype, \"nzBlockNode\", void 0);\n\n  __decorate([InputBoolean()], NzTreeComponent.prototype, \"nzExpandAll\", void 0);\n\n  __decorate([InputBoolean()], NzTreeComponent.prototype, \"nzSelectMode\", void 0);\n\n  __decorate([InputBoolean()], NzTreeComponent.prototype, \"nzCheckStrictly\", void 0);\n\n  __decorate([InputBoolean()], NzTreeComponent.prototype, \"nzShowExpand\", void 0);\n\n  __decorate([InputBoolean()], NzTreeComponent.prototype, \"nzShowLine\", void 0);\n\n  __decorate([InputBoolean()], NzTreeComponent.prototype, \"nzCheckable\", void 0);\n\n  __decorate([InputBoolean()], NzTreeComponent.prototype, \"nzAsyncData\", void 0);\n\n  __decorate([InputBoolean()], NzTreeComponent.prototype, \"nzDraggable\", void 0);\n\n  __decorate([InputBoolean()], NzTreeComponent.prototype, \"nzMultiple\", void 0);\n\n  return NzTreeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nlet NzTreeModule = /*#__PURE__*/(() => {\n  class NzTreeModule {}\n\n  NzTreeModule.ɵfac = function NzTreeModule_Factory(t) {\n    return new (t || NzTreeModule)();\n  };\n\n  NzTreeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NzTreeModule\n  });\n  NzTreeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[BidiModule, CommonModule, NzOutletModule, NzIconModule, NzNoAnimationModule, NzHighlightModule, ScrollingModule]]\n  });\n  return NzTreeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzTreeComponent, NzTreeIndentComponent, NzTreeModule, NzTreeNodeBuiltinCheckboxComponent, NzTreeNodeBuiltinComponent, NzTreeNodeSwitcherComponent, NzTreeNodeTitleComponent, NzTreeService, NzTreeServiceFactory }; //# sourceMappingURL=ng-zorro-antd-tree.mjs.map","map":null,"metadata":{},"sourceType":"module"}