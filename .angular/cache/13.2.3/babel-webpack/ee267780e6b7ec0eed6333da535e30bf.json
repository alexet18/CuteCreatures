{"ast":null,"code":"import * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i1$2 from '@angular/cdk/scrolling';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, Host, Optional, Directive, Inject, ViewEncapsulation, ViewChild, NgModule } from '@angular/core';\nimport * as i1 from 'ng-zorro-antd/core/no-animation';\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport { __decorate } from 'tslib';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject, animationFrameScheduler, asapScheduler, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, auditTime, take, map } from 'rxjs/operators';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeToggle, CdkTreeNodeDef, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet, CdkTreeNodePadding, CdkTreeNodeOutletContext } from '@angular/cdk/tree';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { treeCollapseMotion } from 'ng-zorro-antd/core/animation';\nimport { DataSource } from '@angular/cdk/collections';\n\nfunction NzTreeNodeIndentsComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 1);\n  }\n\n  if (rf & 2) {\n    const isEnd_r1 = ctx.$implicit;\n    i0.ɵɵclassProp(\"ant-tree-indent-unit-end\", !isEnd_r1);\n  }\n}\n\nfunction NzTreeNodeComponent_nz_tree_node_indents_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"nz-tree-node-indents\", 2);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"indents\", ctx_r0.indents);\n  }\n}\n\nfunction NzTreeNodeComponent_nz_tree_node_toggle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"nz-tree-node-toggle\", 3);\n    i0.ɵɵelement(1, \"span\", 4);\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = [[[\"nz-tree-node-toggle\"], [\"\", \"nz-tree-node-toggle\", \"\"]], [[\"nz-tree-node-checkbox\"]], [[\"nz-tree-node-option\"]], \"*\"];\nconst _c1 = [\"nz-tree-node-toggle, [nz-tree-node-toggle]\", \"nz-tree-node-checkbox\", \"nz-tree-node-option\", \"*\"];\nconst _c2 = [\"*\"];\n\nfunction NzTreeVirtualScrollViewComponent_ng_container_2_ng_template_1_Template(rf, ctx) {}\n\nfunction NzTreeVirtualScrollViewComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeVirtualScrollViewComponent_ng_container_2_ng_template_1_Template, 0, 0, \"ng-template\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"data\", item_r1);\n  }\n}\n\nclass NzTreeNodeCheckboxComponent {\n  constructor() {\n    this.nzClick = new EventEmitter();\n  }\n\n  onClick(e) {\n    if (!this.nzDisabled) {\n      this.nzClick.emit(e);\n    }\n  }\n\n}\n\nNzTreeNodeCheckboxComponent.ɵfac = function NzTreeNodeCheckboxComponent_Factory(t) {\n  return new (t || NzTreeNodeCheckboxComponent)();\n};\n\nNzTreeNodeCheckboxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeNodeCheckboxComponent,\n  selectors: [[\"nz-tree-node-checkbox\", 3, \"builtin\", \"\"]],\n  hostAttrs: [1, \"ant-tree-checkbox\"],\n  hostVars: 6,\n  hostBindings: function NzTreeNodeCheckboxComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function NzTreeNodeCheckboxComponent_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"ant-tree-checkbox-checked\", ctx.nzChecked)(\"ant-tree-checkbox-indeterminate\", ctx.nzIndeterminate)(\"ant-tree-checkbox-disabled\", ctx.nzDisabled);\n    }\n  },\n  inputs: {\n    nzChecked: \"nzChecked\",\n    nzIndeterminate: \"nzIndeterminate\",\n    nzDisabled: \"nzDisabled\"\n  },\n  outputs: {\n    nzClick: \"nzClick\"\n  },\n  decls: 1,\n  vars: 0,\n  consts: [[1, \"ant-tree-checkbox-inner\"]],\n  template: function NzTreeNodeCheckboxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"span\", 0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n__decorate([InputBoolean()], NzTreeNodeCheckboxComponent.prototype, \"nzDisabled\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeCheckboxComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-checkbox:not([builtin])',\n      template: ` <span class=\"ant-tree-checkbox-inner\"></span> `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        class: 'ant-tree-checkbox',\n        '[class.ant-tree-checkbox-checked]': `nzChecked`,\n        '[class.ant-tree-checkbox-indeterminate]': `nzIndeterminate`,\n        '[class.ant-tree-checkbox-disabled]': `nzDisabled`,\n        '(click)': 'onClick($event)'\n      }\n    }]\n  }], null, {\n    nzChecked: [{\n      type: Input\n    }],\n    nzIndeterminate: [{\n      type: Input\n    }],\n    nzDisabled: [{\n      type: Input\n    }],\n    nzClick: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nconst getParent = (nodes, node, getLevel) => {\n  let index = nodes.indexOf(node);\n\n  if (index < 0) {\n    return null;\n  }\n\n  const level = getLevel(node);\n\n  for (index--; index >= 0; index--) {\n    const preLevel = getLevel(nodes[index]);\n\n    if (preLevel + 1 === level) {\n      return nodes[index];\n    }\n\n    if (preLevel + 1 < level) {\n      return null;\n    }\n  }\n\n  return null;\n};\n\nconst getNextSibling = (nodes, node, getLevel, _index) => {\n  let index = typeof _index !== 'undefined' ? _index : nodes.indexOf(node);\n\n  if (index < 0) {\n    return null;\n  }\n\n  const level = getLevel(node);\n\n  for (index++; index < nodes.length; index++) {\n    const nextLevel = getLevel(nodes[index]);\n\n    if (nextLevel < level) {\n      return null;\n    }\n\n    if (nextLevel === level) {\n      return nodes[index];\n    }\n  }\n\n  return null;\n};\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzNodeBase extends CdkTreeNode {} // eslint-disable-next-line @angular-eslint/component-class-suffix\n\n\nclass NzTreeView extends CdkTree {\n  constructor(differs, changeDetectorRef, noAnimation, directionality) {\n    super(differs, changeDetectorRef);\n    this.differs = differs;\n    this.changeDetectorRef = changeDetectorRef;\n    this.noAnimation = noAnimation;\n    this.directionality = directionality;\n    this.destroy$ = new Subject();\n    this.dir = 'ltr';\n    this._dataSourceChanged = new Subject();\n    this.nzDirectoryTree = false;\n    this.nzBlockNode = false;\n  }\n\n  get dataSource() {\n    return super.dataSource;\n  }\n\n  set dataSource(dataSource) {\n    super.dataSource = dataSource;\n  }\n\n  ngOnInit() {\n    var _a;\n\n    super.ngOnInit();\n\n    if (this.directionality) {\n      this.dir = this.directionality.value;\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.changeDetectorRef.detectChanges();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  renderNodeChanges(data, dataDiffer, viewContainer, parentData) {\n    super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n    this._dataSourceChanged.next();\n  }\n\n}\n\nNzTreeView.ɵfac = function NzTreeView_Factory(t) {\n  return new (t || NzTreeView)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.NzNoAnimationDirective, 9), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n};\n\nNzTreeView.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeView,\n  selectors: [[\"ng-component\"]],\n  inputs: {\n    treeControl: [\"nzTreeControl\", \"treeControl\"],\n    dataSource: [\"nzDataSource\", \"dataSource\"],\n    nzDirectoryTree: \"nzDirectoryTree\",\n    nzBlockNode: \"nzBlockNode\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function NzTreeView_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\n__decorate([InputBoolean()], NzTreeView.prototype, \"nzDirectoryTree\", void 0);\n\n__decorate([InputBoolean()], NzTreeView.prototype, \"nzBlockNode\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeView, [{\n    type: Component,\n    args: [{\n      template: ''\n    }]\n  }], function () {\n    return [{\n      type: i0.IterableDiffers\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.NzNoAnimationDirective,\n      decorators: [{\n        type: Host\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: i2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    treeControl: [{\n      type: Input,\n      args: ['nzTreeControl']\n    }],\n    dataSource: [{\n      type: Input,\n      args: ['nzDataSource']\n    }],\n    nzDirectoryTree: [{\n      type: Input\n    }],\n    nzBlockNode: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * [true, false, false, true] => 1001\n */\n\n\nfunction booleanArrayToString(arr) {\n  return arr.map(i => i ? 1 : 0).join('');\n}\n\nconst BUILD_INDENTS_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n\nclass NzTreeNodeIndentsComponent {\n  constructor() {\n    this.indents = [];\n  }\n\n}\n\nNzTreeNodeIndentsComponent.ɵfac = function NzTreeNodeIndentsComponent_Factory(t) {\n  return new (t || NzTreeNodeIndentsComponent)();\n};\n\nNzTreeNodeIndentsComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeNodeIndentsComponent,\n  selectors: [[\"nz-tree-node-indents\"]],\n  hostAttrs: [1, \"ant-tree-indent\"],\n  inputs: {\n    indents: \"indents\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"ant-tree-indent-unit\", 3, \"ant-tree-indent-unit-end\", 4, \"ngFor\", \"ngForOf\"], [1, \"ant-tree-indent-unit\"]],\n  template: function NzTreeNodeIndentsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NzTreeNodeIndentsComponent_span_0_Template, 1, 2, \"span\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.indents);\n    }\n  },\n  directives: [i1$1.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeIndentsComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-indents',\n      template: `\n    <span class=\"ant-tree-indent-unit\" [class.ant-tree-indent-unit-end]=\"!isEnd\" *ngFor=\"let isEnd of indents\"></span>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'ant-tree-indent'\n      }\n    }]\n  }], null, {\n    indents: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NzTreeNodeIndentLineDirective {\n  constructor(treeNode, tree, cdr) {\n    this.treeNode = treeNode;\n    this.tree = tree;\n    this.cdr = cdr;\n    this.isLast = 'unset';\n    this.isLeaf = false;\n    this.preNodeRef = null;\n    this.nextNodeRef = null;\n    this.currentIndents = '';\n    this.buildIndents();\n    this.checkLast();\n    /**\n     * The dependent data (TreeControl.dataNodes) can be set after node instantiation,\n     * and setting the indents can cause frame rate loss if it is set too often.\n     */\n\n    this.changeSubscription = merge(this.treeNode._dataChanges, tree._dataSourceChanged).pipe(auditTime(0, BUILD_INDENTS_SCHEDULER)).subscribe(() => {\n      this.buildIndents();\n      this.checkAdjacent();\n      this.cdr.markForCheck();\n    });\n  }\n\n  getIndents() {\n    const indents = [];\n    const nodes = this.tree.treeControl.dataNodes;\n    const getLevel = this.tree.treeControl.getLevel;\n    let parent = getParent(nodes, this.treeNode.data, getLevel);\n\n    while (parent) {\n      const parentNextSibling = getNextSibling(nodes, parent, getLevel);\n\n      if (parentNextSibling) {\n        indents.unshift(true);\n      } else {\n        indents.unshift(false);\n      }\n\n      parent = getParent(nodes, parent, getLevel);\n    }\n\n    return indents;\n  }\n\n  buildIndents() {\n    if (this.treeNode.data) {\n      const indents = this.getIndents();\n      const diffString = booleanArrayToString(indents);\n\n      if (diffString !== this.currentIndents) {\n        this.treeNode.setIndents(this.getIndents());\n        this.currentIndents = diffString;\n      }\n    }\n  }\n  /**\n   * We need to add an class name for the last child node,\n   * this result can also be affected when the adjacent nodes are changed.\n   */\n\n\n  checkAdjacent() {\n    const nodes = this.tree.treeControl.dataNodes;\n    const index = nodes.indexOf(this.treeNode.data);\n    const preNode = nodes[index - 1] || null;\n    const nextNode = nodes[index + 1] || null;\n\n    if (this.nextNodeRef !== nextNode || this.preNodeRef !== preNode) {\n      this.checkLast(index);\n    }\n\n    this.preNodeRef = preNode;\n    this.nextNodeRef = nextNode;\n  }\n\n  checkLast(index) {\n    const nodes = this.tree.treeControl.dataNodes;\n    this.isLeaf = this.treeNode.isLeaf;\n    this.isLast = !getNextSibling(nodes, this.treeNode.data, this.tree.treeControl.getLevel, index);\n  }\n\n  ngOnDestroy() {\n    this.preNodeRef = null;\n    this.nextNodeRef = null;\n    this.changeSubscription.unsubscribe();\n  }\n\n}\n\nNzTreeNodeIndentLineDirective.ɵfac = function NzTreeNodeIndentLineDirective_Factory(t) {\n  return new (t || NzTreeNodeIndentLineDirective)(i0.ɵɵdirectiveInject(NzNodeBase), i0.ɵɵdirectiveInject(NzTreeView), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nNzTreeNodeIndentLineDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NzTreeNodeIndentLineDirective,\n  selectors: [[\"nz-tree-node\", \"nzTreeNodeIndentLine\", \"\"]],\n  hostAttrs: [1, \"ant-tree-show-line\"],\n  hostVars: 2,\n  hostBindings: function NzTreeNodeIndentLineDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"ant-tree-treenode-leaf-last\", ctx.isLast && ctx.isLeaf);\n    }\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeIndentLineDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'nz-tree-node[nzTreeNodeIndentLine]',\n      host: {\n        class: 'ant-tree-show-line',\n        '[class.ant-tree-treenode-leaf-last]': 'isLast && isLeaf'\n      }\n    }]\n  }], function () {\n    return [{\n      type: NzNodeBase\n    }, {\n      type: NzTreeView\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzTreeNodeNoopToggleDirective {}\n\nNzTreeNodeNoopToggleDirective.ɵfac = function NzTreeNodeNoopToggleDirective_Factory(t) {\n  return new (t || NzTreeNodeNoopToggleDirective)();\n};\n\nNzTreeNodeNoopToggleDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NzTreeNodeNoopToggleDirective,\n  selectors: [[\"nz-tree-node-toggle\", \"nzTreeNodeNoopToggle\", \"\"], [\"\", \"nzTreeNodeNoopToggle\", \"\"]],\n  hostAttrs: [1, \"ant-tree-switcher\", \"ant-tree-switcher-noop\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeNoopToggleDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'nz-tree-node-toggle[nzTreeNodeNoopToggle], [nzTreeNodeNoopToggle]',\n      host: {\n        class: 'ant-tree-switcher ant-tree-switcher-noop'\n      }\n    }]\n  }], null, null);\n})();\n\nclass NzTreeNodeToggleDirective extends CdkTreeNodeToggle {\n  get recursive() {\n    return this._recursive;\n  }\n\n  set recursive(value) {\n    this._recursive = coerceBooleanProperty(value);\n  }\n\n  get isExpanded() {\n    return this._treeNode.isExpanded;\n  }\n\n}\n\nNzTreeNodeToggleDirective.ɵfac = /* @__PURE__ */function () {\n  let ɵNzTreeNodeToggleDirective_BaseFactory;\n  return function NzTreeNodeToggleDirective_Factory(t) {\n    return (ɵNzTreeNodeToggleDirective_BaseFactory || (ɵNzTreeNodeToggleDirective_BaseFactory = i0.ɵɵgetInheritedFactory(NzTreeNodeToggleDirective)))(t || NzTreeNodeToggleDirective);\n  };\n}();\n\nNzTreeNodeToggleDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NzTreeNodeToggleDirective,\n  selectors: [[\"nz-tree-node-toggle\", 3, \"nzTreeNodeNoopToggle\", \"\"], [\"\", \"nzTreeNodeToggle\", \"\"]],\n  hostAttrs: [1, \"ant-tree-switcher\"],\n  hostVars: 4,\n  hostBindings: function NzTreeNodeToggleDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"ant-tree-switcher_open\", ctx.isExpanded)(\"ant-tree-switcher_close\", !ctx.isExpanded);\n    }\n  },\n  inputs: {\n    recursive: [\"nzTreeNodeToggleRecursive\", \"recursive\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeToggle,\n    useExisting: NzTreeNodeToggleDirective\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeToggleDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'nz-tree-node-toggle:not([nzTreeNodeNoopToggle]), [nzTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: NzTreeNodeToggleDirective\n      }],\n      host: {\n        class: 'ant-tree-switcher',\n        '[class.ant-tree-switcher_open]': 'isExpanded',\n        '[class.ant-tree-switcher_close]': '!isExpanded'\n      }\n    }]\n  }], null, {\n    recursive: [{\n      type: Input,\n      args: ['nzTreeNodeToggleRecursive']\n    }]\n  });\n})();\n\nclass NzTreeNodeToggleRotateIconDirective {}\n\nNzTreeNodeToggleRotateIconDirective.ɵfac = function NzTreeNodeToggleRotateIconDirective_Factory(t) {\n  return new (t || NzTreeNodeToggleRotateIconDirective)();\n};\n\nNzTreeNodeToggleRotateIconDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NzTreeNodeToggleRotateIconDirective,\n  selectors: [[\"\", \"nz-icon\", \"\", \"nzTreeNodeToggleRotateIcon\", \"\"]],\n  hostAttrs: [1, \"ant-tree-switcher-icon\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeToggleRotateIconDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nz-icon][nzTreeNodeToggleRotateIcon]',\n      host: {\n        class: 'ant-tree-switcher-icon'\n      }\n    }]\n  }], null, null);\n})();\n\nclass NzTreeNodeToggleActiveIconDirective {}\n\nNzTreeNodeToggleActiveIconDirective.ɵfac = function NzTreeNodeToggleActiveIconDirective_Factory(t) {\n  return new (t || NzTreeNodeToggleActiveIconDirective)();\n};\n\nNzTreeNodeToggleActiveIconDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NzTreeNodeToggleActiveIconDirective,\n  selectors: [[\"\", \"nz-icon\", \"\", \"nzTreeNodeToggleActiveIcon\", \"\"]],\n  hostAttrs: [1, \"ant-tree-switcher-loading-icon\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeToggleActiveIconDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nz-icon][nzTreeNodeToggleActiveIcon]',\n      host: {\n        class: 'ant-tree-switcher-loading-icon'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzTreeNodeComponent extends NzNodeBase {\n  constructor(elementRef, tree, renderer, cdr) {\n    super(elementRef, tree);\n    this.elementRef = elementRef;\n    this.tree = tree;\n    this.renderer = renderer;\n    this.cdr = cdr;\n    this.indents = [];\n    this.disabled = false;\n    this.selected = false;\n    this.isLeaf = false;\n\n    this._elementRef.nativeElement.classList.add('ant-tree-treenode');\n  }\n\n  ngOnInit() {\n    this.isLeaf = !this.tree.treeControl.isExpandable(this.data);\n  }\n\n  disable() {\n    this.disabled = true;\n    this.updateDisabledClass();\n  }\n\n  enable() {\n    this.disabled = false;\n    this.updateDisabledClass();\n  }\n\n  select() {\n    this.selected = true;\n    this.updateSelectedClass();\n  }\n\n  deselect() {\n    this.selected = false;\n    this.updateSelectedClass();\n  }\n\n  setIndents(indents) {\n    this.indents = indents;\n    this.cdr.markForCheck();\n  }\n\n  updateSelectedClass() {\n    if (this.selected) {\n      this.renderer.addClass(this.elementRef.nativeElement, 'ant-tree-treenode-selected');\n    } else {\n      this.renderer.removeClass(this.elementRef.nativeElement, 'ant-tree-treenode-selected');\n    }\n  }\n\n  updateDisabledClass() {\n    if (this.disabled) {\n      this.renderer.addClass(this.elementRef.nativeElement, 'ant-tree-treenode-disabled');\n    } else {\n      this.renderer.removeClass(this.elementRef.nativeElement, 'ant-tree-treenode-disabled');\n    }\n  }\n\n}\n\nNzTreeNodeComponent.ɵfac = function NzTreeNodeComponent_Factory(t) {\n  return new (t || NzTreeNodeComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NzTreeView), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nNzTreeNodeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeNodeComponent,\n  selectors: [[\"nz-tree-node\", 3, \"builtin\", \"\"]],\n  hostVars: 4,\n  hostBindings: function NzTreeNodeComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"ant-tree-treenode-switcher-open\", ctx.isExpanded)(\"ant-tree-treenode-switcher-close\", !ctx.isExpanded);\n    }\n  },\n  exportAs: [\"nzTreeNode\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: NzTreeNodeComponent\n  }, {\n    provide: NzNodeBase,\n    useExisting: NzTreeNodeComponent\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 2,\n  consts: [[3, \"indents\", 4, \"ngIf\"], [\"class\", \"nz-tree-leaf-line-icon\", \"nzTreeNodeNoopToggle\", \"\", 4, \"ngIf\"], [3, \"indents\"], [\"nzTreeNodeNoopToggle\", \"\", 1, \"nz-tree-leaf-line-icon\"], [1, \"ant-tree-switcher-leaf-line\"]],\n  template: function NzTreeNodeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c0);\n      i0.ɵɵtemplate(0, NzTreeNodeComponent_nz_tree_node_indents_0_Template, 1, 1, \"nz-tree-node-indents\", 0);\n      i0.ɵɵprojection(1);\n      i0.ɵɵtemplate(2, NzTreeNodeComponent_nz_tree_node_toggle_2_Template, 2, 0, \"nz-tree-node-toggle\", 1);\n      i0.ɵɵprojection(3, 1);\n      i0.ɵɵprojection(4, 2);\n      i0.ɵɵprojection(5, 3);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.indents.length);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.indents.length && ctx.isLeaf);\n    }\n  },\n  directives: [NzTreeNodeIndentsComponent, i1$1.NgIf, NzTreeNodeNoopToggleDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node:not([builtin])',\n      exportAs: 'nzTreeNode',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: NzTreeNodeComponent\n      }, {\n        provide: NzNodeBase,\n        useExisting: NzTreeNodeComponent\n      }],\n      template: `\n    <nz-tree-node-indents [indents]=\"indents\" *ngIf=\"indents.length\"></nz-tree-node-indents>\n    <ng-content select=\"nz-tree-node-toggle, [nz-tree-node-toggle]\"></ng-content>\n    <nz-tree-node-toggle class=\"nz-tree-leaf-line-icon\" *ngIf=\"indents.length && isLeaf\" nzTreeNodeNoopToggle>\n      <span class=\"ant-tree-switcher-leaf-line\"></span>\n    </nz-tree-node-toggle>\n    <ng-content select=\"nz-tree-node-checkbox\"></ng-content>\n    <ng-content select=\"nz-tree-node-option\"></ng-content>\n    <ng-content></ng-content>\n  `,\n      host: {\n        '[class.ant-tree-treenode-switcher-open]': 'isExpanded',\n        '[class.ant-tree-treenode-switcher-close]': '!isExpanded'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: NzTreeView\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n\nclass NzTreeNodeDefDirective extends CdkTreeNodeDef {}\n\nNzTreeNodeDefDirective.ɵfac = /* @__PURE__ */function () {\n  let ɵNzTreeNodeDefDirective_BaseFactory;\n  return function NzTreeNodeDefDirective_Factory(t) {\n    return (ɵNzTreeNodeDefDirective_BaseFactory || (ɵNzTreeNodeDefDirective_BaseFactory = i0.ɵɵgetInheritedFactory(NzTreeNodeDefDirective)))(t || NzTreeNodeDefDirective);\n  };\n}();\n\nNzTreeNodeDefDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NzTreeNodeDefDirective,\n  selectors: [[\"\", \"nzTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"nzTreeNodeDefWhen\", \"when\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeDef,\n    useExisting: NzTreeNodeDefDirective\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeDefDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzTreeNodeDef]',\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: NzTreeNodeDefDirective\n      }]\n    }]\n  }], null, {\n    when: [{\n      type: Input,\n      args: ['nzTreeNodeDefWhen']\n    }]\n  });\n})();\n\nclass NzTreeVirtualScrollNodeOutletDirective {\n  constructor(_viewContainerRef) {\n    this._viewContainerRef = _viewContainerRef;\n    this._viewRef = null;\n  }\n\n  ngOnChanges(changes) {\n    const recreateView = this.shouldRecreateView(changes);\n\n    if (recreateView) {\n      const viewContainerRef = this._viewContainerRef;\n\n      if (this._viewRef) {\n        viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));\n      }\n\n      this._viewRef = this.data ? viewContainerRef.createEmbeddedView(this.data.nodeDef.template, this.data.context) : null;\n\n      if (CdkTreeNode.mostRecentTreeNode && this._viewRef) {\n        CdkTreeNode.mostRecentTreeNode.data = this.data.data;\n      }\n    } else if (this._viewRef && this.data.context) {\n      this.updateExistingContext(this.data.context);\n    }\n  }\n\n  shouldRecreateView(changes) {\n    const ctxChange = changes.data;\n    return ctxChange && this.hasContextShapeChanged(ctxChange);\n  }\n\n  hasContextShapeChanged(ctxChange) {\n    var _a, _b;\n\n    const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n    const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n    if (prevCtxKeys.length === currCtxKeys.length) {\n      for (const propName of currCtxKeys) {\n        if (prevCtxKeys.indexOf(propName) === -1) {\n          return true;\n        }\n      }\n\n      return ((_a = ctxChange.previousValue) === null || _a === void 0 ? void 0 : _a.data) !== ((_b = ctxChange.currentValue) === null || _b === void 0 ? void 0 : _b.data);\n    }\n\n    return true;\n  }\n\n  updateExistingContext(ctx) {\n    for (const propName of Object.keys(ctx)) {\n      this._viewRef.context[propName] = this.data.context[propName];\n    }\n  }\n\n}\n\nNzTreeVirtualScrollNodeOutletDirective.ɵfac = function NzTreeVirtualScrollNodeOutletDirective_Factory(t) {\n  return new (t || NzTreeVirtualScrollNodeOutletDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n};\n\nNzTreeVirtualScrollNodeOutletDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NzTreeVirtualScrollNodeOutletDirective,\n  selectors: [[\"\", \"nzTreeVirtualScrollNodeOutlet\", \"\"]],\n  inputs: {\n    data: \"data\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeVirtualScrollNodeOutletDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzTreeVirtualScrollNodeOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NzTreeNodeOptionComponent {\n  constructor(treeNode) {\n    this.treeNode = treeNode;\n    this.nzSelected = false;\n    this.nzDisabled = false;\n    this.nzClick = new EventEmitter();\n  }\n\n  get isExpanded() {\n    return this.treeNode.isExpanded;\n  }\n\n  onClick(e) {\n    if (!this.nzDisabled) {\n      this.nzClick.emit(e);\n    }\n  }\n\n  ngOnChanges(changes) {\n    const {\n      nzDisabled,\n      nzSelected\n    } = changes;\n\n    if (nzDisabled) {\n      if (nzDisabled.currentValue) {\n        this.treeNode.disable();\n      } else {\n        this.treeNode.enable();\n      }\n    }\n\n    if (nzSelected) {\n      if (nzSelected.currentValue) {\n        this.treeNode.select();\n      } else {\n        this.treeNode.deselect();\n      }\n    }\n  }\n\n}\n\nNzTreeNodeOptionComponent.ɵfac = function NzTreeNodeOptionComponent_Factory(t) {\n  return new (t || NzTreeNodeOptionComponent)(i0.ɵɵdirectiveInject(NzTreeNodeComponent));\n};\n\nNzTreeNodeOptionComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeNodeOptionComponent,\n  selectors: [[\"nz-tree-node-option\"]],\n  hostAttrs: [1, \"ant-tree-node-content-wrapper\"],\n  hostVars: 4,\n  hostBindings: function NzTreeNodeOptionComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function NzTreeNodeOptionComponent_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"ant-tree-node-content-wrapper-open\", ctx.isExpanded)(\"ant-tree-node-selected\", ctx.nzSelected);\n    }\n  },\n  inputs: {\n    nzSelected: \"nzSelected\",\n    nzDisabled: \"nzDisabled\"\n  },\n  outputs: {\n    nzClick: \"nzClick\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c2,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"ant-tree-title\"]],\n  template: function NzTreeNodeOptionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"span\", 0);\n      i0.ɵɵprojection(1);\n      i0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n__decorate([InputBoolean()], NzTreeNodeOptionComponent.prototype, \"nzSelected\", void 0);\n\n__decorate([InputBoolean()], NzTreeNodeOptionComponent.prototype, \"nzDisabled\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeOptionComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-option',\n      template: ` <span class=\"ant-tree-title\"><ng-content></ng-content></span> `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'ant-tree-node-content-wrapper',\n        '[class.ant-tree-node-content-wrapper-open]': 'isExpanded',\n        '[class.ant-tree-node-selected]': 'nzSelected',\n        '(click)': 'onClick($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: NzTreeNodeComponent\n    }];\n  }, {\n    nzSelected: [{\n      type: Input\n    }],\n    nzDisabled: [{\n      type: Input\n    }],\n    nzClick: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzTreeNodeOutletDirective {\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n\n}\n\nNzTreeNodeOutletDirective.ɵfac = function NzTreeNodeOutletDirective_Factory(t) {\n  return new (t || NzTreeNodeOutletDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\n\nNzTreeNodeOutletDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NzTreeNodeOutletDirective,\n  selectors: [[\"\", \"nzTreeNodeOutlet\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeOutlet,\n    useExisting: NzTreeNodeOutletDirective\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeOutletDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzTreeNodeOutlet]',\n      providers: [{\n        provide: CdkTreeNodeOutlet,\n        useExisting: NzTreeNodeOutletDirective\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nclass NzTreeNodePaddingDirective extends CdkTreeNodePadding {\n  constructor() {\n    super(...arguments);\n    this._indent = 24;\n  }\n\n  get level() {\n    return this._level;\n  }\n\n  set level(value) {\n    this._setLevelInput(value);\n  }\n\n  get indent() {\n    return this._indent;\n  }\n\n  set indent(indent) {\n    this._setIndentInput(indent);\n  }\n\n}\n\nNzTreeNodePaddingDirective.ɵfac = /* @__PURE__ */function () {\n  let ɵNzTreeNodePaddingDirective_BaseFactory;\n  return function NzTreeNodePaddingDirective_Factory(t) {\n    return (ɵNzTreeNodePaddingDirective_BaseFactory || (ɵNzTreeNodePaddingDirective_BaseFactory = i0.ɵɵgetInheritedFactory(NzTreeNodePaddingDirective)))(t || NzTreeNodePaddingDirective);\n  };\n}();\n\nNzTreeNodePaddingDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NzTreeNodePaddingDirective,\n  selectors: [[\"\", \"nzTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"nzTreeNodePadding\", \"level\"],\n    indent: [\"nzTreeNodePaddingIndent\", \"indent\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodePadding,\n    useExisting: NzTreeNodePaddingDirective\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodePaddingDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: NzTreeNodePaddingDirective\n      }]\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: ['nzTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['nzTreeNodePaddingIndent']\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzTreeViewComponent extends NzTreeView {\n  constructor() {\n    super(...arguments);\n    this._afterViewInit = false;\n  }\n\n  ngAfterViewInit() {\n    Promise.resolve().then(() => {\n      this._afterViewInit = true;\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n\nNzTreeViewComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵNzTreeViewComponent_BaseFactory;\n  return function NzTreeViewComponent_Factory(t) {\n    return (ɵNzTreeViewComponent_BaseFactory || (ɵNzTreeViewComponent_BaseFactory = i0.ɵɵgetInheritedFactory(NzTreeViewComponent)))(t || NzTreeViewComponent);\n  };\n}();\n\nNzTreeViewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeViewComponent,\n  selectors: [[\"nz-tree-view\"]],\n  viewQuery: function NzTreeViewComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(NzTreeNodeOutletDirective, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [1, \"ant-tree\"],\n  hostVars: 6,\n  hostBindings: function NzTreeViewComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"ant-tree-block-node\", ctx.nzDirectoryTree || ctx.nzBlockNode)(\"ant-tree-directory\", ctx.nzDirectoryTree)(\"ant-tree-rtl\", ctx.dir === \"rtl\");\n    }\n  },\n  exportAs: [\"nzTreeView\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTree,\n    useExisting: NzTreeViewComponent\n  }, {\n    provide: NzTreeView,\n    useExisting: NzTreeViewComponent\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 2,\n  consts: [[1, \"ant-tree-list-holder\"], [1, \"ant-tree-list-holder-inner\"], [\"nzTreeNodeOutlet\", \"\"]],\n  template: function NzTreeViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementContainer(2, 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"@.disabled\", !ctx._afterViewInit || (ctx.noAnimation == null ? null : ctx.noAnimation.nzNoAnimation))(\"@treeCollapseMotion\", ctx._nodeOutlet.viewContainer.length);\n    }\n  },\n  directives: [NzTreeNodeOutletDirective],\n  encapsulation: 2,\n  data: {\n    animation: [treeCollapseMotion]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeViewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-view',\n      exportAs: 'nzTreeView',\n      template: `\n    <div class=\"ant-tree-list-holder\">\n      <div\n        [@.disabled]=\"!_afterViewInit || noAnimation?.nzNoAnimation\"\n        [@treeCollapseMotion]=\"_nodeOutlet.viewContainer.length\"\n        class=\"ant-tree-list-holder-inner\"\n      >\n        <ng-container nzTreeNodeOutlet></ng-container>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: CdkTree,\n        useExisting: NzTreeViewComponent\n      }, {\n        provide: NzTreeView,\n        useExisting: NzTreeViewComponent\n      }],\n      host: {\n        class: 'ant-tree',\n        '[class.ant-tree-block-node]': 'nzDirectoryTree || nzBlockNode',\n        '[class.ant-tree-directory]': 'nzDirectoryTree',\n        '[class.ant-tree-rtl]': `dir === 'rtl'`\n      },\n      animations: [treeCollapseMotion]\n    }]\n  }], null, {\n    nodeOutlet: [{\n      type: ViewChild,\n      args: [NzTreeNodeOutletDirective, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nconst DEFAULT_SIZE = 28;\n\nclass NzTreeVirtualScrollViewComponent extends NzTreeView {\n  constructor() {\n    super(...arguments);\n    this.nzItemSize = DEFAULT_SIZE;\n    this.nzMinBufferPx = DEFAULT_SIZE * 5;\n    this.nzMaxBufferPx = DEFAULT_SIZE * 10;\n    this.nodes = [];\n\n    this.innerTrackBy = i => i;\n  }\n\n  ngOnChanges(changes) {\n    if (changes.trackBy) {\n      if (typeof changes.trackBy.currentValue === 'function') {\n        this.innerTrackBy = (index, n) => this.trackBy(index, n.data);\n      } else {\n        this.innerTrackBy = i => i;\n      }\n    }\n  }\n\n  renderNodeChanges(data) {\n    this.nodes = new Array(...data).map((n, i) => this.createNode(n, i));\n\n    this._dataSourceChanged.next();\n  }\n\n  createNode(nodeData, index) {\n    const node = this._getNodeDef(nodeData, index);\n\n    const context = new CdkTreeNodeOutletContext(nodeData);\n\n    if (this.treeControl.getLevel) {\n      context.level = this.treeControl.getLevel(nodeData);\n    } else {\n      context.level = 0;\n    }\n\n    return {\n      data: nodeData,\n      context,\n      nodeDef: node\n    };\n  }\n\n}\n\nNzTreeVirtualScrollViewComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵNzTreeVirtualScrollViewComponent_BaseFactory;\n  return function NzTreeVirtualScrollViewComponent_Factory(t) {\n    return (ɵNzTreeVirtualScrollViewComponent_BaseFactory || (ɵNzTreeVirtualScrollViewComponent_BaseFactory = i0.ɵɵgetInheritedFactory(NzTreeVirtualScrollViewComponent)))(t || NzTreeVirtualScrollViewComponent);\n  };\n}();\n\nNzTreeVirtualScrollViewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzTreeVirtualScrollViewComponent,\n  selectors: [[\"nz-tree-virtual-scroll-view\"]],\n  viewQuery: function NzTreeVirtualScrollViewComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(NzTreeNodeOutletDirective, 7);\n      i0.ɵɵviewQuery(CdkVirtualScrollViewport, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.virtualScrollViewport = _t.first);\n    }\n  },\n  hostAttrs: [1, \"ant-tree\"],\n  hostVars: 6,\n  hostBindings: function NzTreeVirtualScrollViewComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"ant-tree-block-node\", ctx.nzDirectoryTree || ctx.nzBlockNode)(\"ant-tree-directory\", ctx.nzDirectoryTree)(\"ant-tree-rtl\", ctx.dir === \"rtl\");\n    }\n  },\n  inputs: {\n    nzItemSize: \"nzItemSize\",\n    nzMinBufferPx: \"nzMinBufferPx\",\n    nzMaxBufferPx: \"nzMaxBufferPx\",\n    trackBy: \"trackBy\"\n  },\n  exportAs: [\"nzTreeVirtualScrollView\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NzTreeView,\n    useExisting: NzTreeVirtualScrollViewComponent\n  }, {\n    provide: CdkTree,\n    useExisting: NzTreeVirtualScrollViewComponent\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 4,\n  vars: 5,\n  consts: [[1, \"ant-tree-list\"], [1, \"ant-tree-list-holder\", 3, \"itemSize\", \"minBufferPx\", \"maxBufferPx\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\", \"cdkVirtualForTrackBy\"], [\"nzTreeNodeOutlet\", \"\"], [\"nzTreeVirtualScrollNodeOutlet\", \"\", 3, \"data\"]],\n  template: function NzTreeVirtualScrollViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"cdk-virtual-scroll-viewport\", 1);\n      i0.ɵɵtemplate(2, NzTreeVirtualScrollViewComponent_ng_container_2_Template, 2, 1, \"ng-container\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementContainer(3, 3);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"itemSize\", ctx.nzItemSize)(\"minBufferPx\", ctx.nzMinBufferPx)(\"maxBufferPx\", ctx.nzMaxBufferPx);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"cdkVirtualForOf\", ctx.nodes)(\"cdkVirtualForTrackBy\", ctx.innerTrackBy);\n    }\n  },\n  directives: [i1$2.CdkVirtualScrollViewport, i1$2.CdkFixedSizeVirtualScroll, i1$2.CdkVirtualForOf, NzTreeVirtualScrollNodeOutletDirective, NzTreeNodeOutletDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeVirtualScrollViewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-virtual-scroll-view',\n      exportAs: 'nzTreeVirtualScrollView',\n      template: `\n    <div class=\"ant-tree-list\">\n      <cdk-virtual-scroll-viewport\n        class=\"ant-tree-list-holder\"\n        [itemSize]=\"nzItemSize\"\n        [minBufferPx]=\"nzMinBufferPx\"\n        [maxBufferPx]=\"nzMaxBufferPx\"\n      >\n        <ng-container *cdkVirtualFor=\"let item of nodes; let i = index; trackBy: innerTrackBy\">\n          <ng-template nzTreeVirtualScrollNodeOutlet [data]=\"item\"></ng-template>\n        </ng-container>\n      </cdk-virtual-scroll-viewport>\n    </div>\n    <ng-container nzTreeNodeOutlet></ng-container>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: NzTreeView,\n        useExisting: NzTreeVirtualScrollViewComponent\n      }, {\n        provide: CdkTree,\n        useExisting: NzTreeVirtualScrollViewComponent\n      }],\n      host: {\n        class: 'ant-tree',\n        '[class.ant-tree-block-node]': 'nzDirectoryTree || nzBlockNode',\n        '[class.ant-tree-directory]': 'nzDirectoryTree',\n        '[class.ant-tree-rtl]': `dir === 'rtl'`\n      }\n    }]\n  }], null, {\n    nodeOutlet: [{\n      type: ViewChild,\n      args: [NzTreeNodeOutletDirective, {\n        static: true\n      }]\n    }],\n    virtualScrollViewport: [{\n      type: ViewChild,\n      args: [CdkVirtualScrollViewport, {\n        static: true\n      }]\n    }],\n    nzItemSize: [{\n      type: Input\n    }],\n    nzMinBufferPx: [{\n      type: Input\n    }],\n    nzMaxBufferPx: [{\n      type: Input\n    }],\n    trackBy: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nconst treeWithControlComponents = [NzTreeView, NzTreeNodeOutletDirective, NzTreeViewComponent, NzTreeNodeDefDirective, NzTreeNodeComponent, NzTreeNodeToggleDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleRotateIconDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeOptionComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeCheckboxComponent, NzTreeNodeIndentsComponent, NzTreeVirtualScrollViewComponent, NzTreeVirtualScrollNodeOutletDirective, NzTreeNodeIndentLineDirective];\n\nclass NzTreeViewModule {}\n\nNzTreeViewModule.ɵfac = function NzTreeViewModule_Factory(t) {\n  return new (t || NzTreeViewModule)();\n};\n\nNzTreeViewModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NzTreeViewModule\n});\nNzTreeViewModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[BidiModule, CommonModule, NzNoAnimationModule, ScrollingModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeViewModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, CommonModule, NzNoAnimationModule, ScrollingModule],\n      declarations: [treeWithControlComponents],\n      exports: [treeWithControlComponents]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzTreeFlattener {\n  constructor(transformFunction, getLevel, isExpandable, getChildren) {\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n\n  flattenNode(node, level, resultNodes, parentMap) {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this.flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this.flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n\n    return resultNodes;\n  }\n\n  flattenChildren(children, level, resultNodes, parentMap) {\n    children.forEach((child, index) => {\n      const childParentMap = parentMap.slice();\n      childParentMap.push(index !== children.length - 1);\n      this.flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n\n\n  flattenNodes(structuredData) {\n    const resultNodes = [];\n    structuredData.forEach(node => this.flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n\n\n  expandFlattenedNodes(nodes, treeControl) {\n    const results = [];\n    const currentExpand = [];\n    currentExpand[0] = true;\n    nodes.forEach(node => {\n      let expand = true;\n\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n\n      if (expand) {\n        results.push(node);\n      }\n\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n\n}\n\nclass NzTreeFlatDataSource extends DataSource {\n  constructor(_treeControl, _treeFlattener, initialData = []) {\n    super();\n    this._treeControl = _treeControl;\n    this._treeFlattener = _treeFlattener;\n    this._flattenedData = new BehaviorSubject([]);\n    this._expandedData = new BehaviorSubject([]);\n    this._data = new BehaviorSubject(initialData);\n    this.flatNodes();\n  }\n\n  setData(value) {\n    this._data.next(value);\n\n    this.flatNodes();\n  }\n\n  getData() {\n    return this._data.getValue();\n  }\n\n  connect(collectionViewer) {\n    const changes = [collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {// no op\n  }\n\n  flatNodes() {\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.getData()));\n\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzTreeFlatDataSource, NzTreeFlattener, NzTreeNodeCheckboxComponent, NzTreeNodeComponent, NzTreeNodeDefDirective, NzTreeNodeIndentLineDirective, NzTreeNodeIndentsComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeOptionComponent, NzTreeNodeOutletDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeToggleDirective, NzTreeNodeToggleRotateIconDirective, NzTreeView, NzTreeViewComponent, NzTreeViewModule, NzTreeVirtualScrollNodeOutletDirective, NzTreeVirtualScrollViewComponent, getNextSibling, getParent };","map":{"version":3,"sources":["/home/tudor/Desktop/Work/Git/Cute/node_modules/ng-zorro-antd/fesm2015/ng-zorro-antd-tree-view.mjs"],"names":["i2","BidiModule","i1$2","CdkVirtualScrollViewport","ScrollingModule","i1$1","CommonModule","i0","EventEmitter","Component","ChangeDetectionStrategy","Input","Output","Host","Optional","Directive","Inject","ViewEncapsulation","ViewChild","NgModule","i1","NzNoAnimationModule","__decorate","InputBoolean","Subject","animationFrameScheduler","asapScheduler","merge","BehaviorSubject","takeUntil","auditTime","take","map","CdkTreeNode","CdkTree","CdkTreeNodeToggle","CdkTreeNodeDef","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodeOutlet","CdkTreeNodePadding","CdkTreeNodeOutletContext","coerceBooleanProperty","treeCollapseMotion","DataSource","NzTreeNodeCheckboxComponent","constructor","nzClick","onClick","e","nzDisabled","emit","ɵfac","ɵcmp","prototype","type","args","selector","template","changeDetection","OnPush","preserveWhitespaces","host","class","nzChecked","nzIndeterminate","getParent","nodes","node","getLevel","index","indexOf","level","preLevel","getNextSibling","_index","length","nextLevel","NzNodeBase","NzTreeView","differs","changeDetectorRef","noAnimation","directionality","destroy$","dir","_dataSourceChanged","nzDirectoryTree","nzBlockNode","dataSource","ngOnInit","_a","value","change","pipe","subscribe","direction","detectChanges","ngOnDestroy","next","complete","renderNodeChanges","data","dataDiffer","viewContainer","parentData","IterableDiffers","ChangeDetectorRef","NzNoAnimationDirective","Directionality","decorators","treeControl","booleanArrayToString","arr","i","join","BUILD_INDENTS_SCHEDULER","requestAnimationFrame","NzTreeNodeIndentsComponent","indents","NgForOf","NzTreeNodeIndentLineDirective","treeNode","tree","cdr","isLast","isLeaf","preNodeRef","nextNodeRef","currentIndents","buildIndents","checkLast","changeSubscription","_dataChanges","checkAdjacent","markForCheck","getIndents","dataNodes","parent","parentNextSibling","unshift","diffString","setIndents","preNode","nextNode","unsubscribe","ɵdir","NzTreeNodeNoopToggleDirective","NzTreeNodeToggleDirective","recursive","_recursive","isExpanded","_treeNode","provide","useExisting","providers","NzTreeNodeToggleRotateIconDirective","NzTreeNodeToggleActiveIconDirective","NzTreeNodeComponent","elementRef","renderer","disabled","selected","_elementRef","nativeElement","classList","add","isExpandable","disable","updateDisabledClass","enable","select","updateSelectedClass","deselect","addClass","removeClass","ElementRef","Renderer2","NgIf","exportAs","NzTreeNodeDefDirective","when","NzTreeVirtualScrollNodeOutletDirective","_viewContainerRef","_viewRef","ngOnChanges","changes","recreateView","shouldRecreateView","viewContainerRef","remove","createEmbeddedView","nodeDef","context","mostRecentTreeNode","updateExistingContext","ctxChange","hasContextShapeChanged","_b","prevCtxKeys","Object","keys","previousValue","currCtxKeys","currentValue","propName","ctx","ViewContainerRef","NzTreeNodeOptionComponent","nzSelected","NzTreeNodeOutletDirective","_node","undefined","NzTreeNodePaddingDirective","arguments","_indent","_level","_setLevelInput","indent","_setIndentInput","NzTreeViewComponent","_afterViewInit","ngAfterViewInit","Promise","resolve","then","encapsulation","None","animations","nodeOutlet","static","DEFAULT_SIZE","NzTreeVirtualScrollViewComponent","nzItemSize","nzMinBufferPx","nzMaxBufferPx","innerTrackBy","trackBy","n","Array","createNode","nodeData","_getNodeDef","CdkFixedSizeVirtualScroll","CdkVirtualForOf","virtualScrollViewport","treeWithControlComponents","NzTreeViewModule","ɵmod","ɵinj","imports","declarations","exports","NzTreeFlattener","transformFunction","getChildren","flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","flattenChildren","children","forEach","child","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","expand","NzTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","_expandedData","_data","flatNodes","setData","getData","getValue","connect","collectionViewer","viewChange","expansionModel","changed","disconnect"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,mBAApB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAO,KAAKC,IAAZ,MAAsB,wBAAtB;AACA,SAASC,wBAAT,EAAmCC,eAAnC,QAA0D,wBAA1D;AACA,OAAO,KAAKC,IAAZ,MAAsB,iBAAtB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,uBAAlC,EAA2DC,KAA3D,EAAkEC,MAAlE,EAA0EC,IAA1E,EAAgFC,QAAhF,EAA0FC,SAA1F,EAAqGC,MAArG,EAA6GC,iBAA7G,EAAgIC,SAAhI,EAA2IC,QAA3I,QAA2J,eAA3J;AACA,OAAO,KAAKC,EAAZ,MAAoB,iCAApB;AACA,SAASC,mBAAT,QAAoC,iCAApC;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,OAAT,EAAkBC,uBAAlB,EAA2CC,aAA3C,EAA0DC,KAA1D,EAAiEC,eAAjE,QAAwF,MAAxF;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,GAArC,QAAgD,gBAAhD;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,iBAA/B,EAAkDC,cAAlD,EAAkEC,yBAAlE,EAA6FC,iBAA7F,EAAgHC,kBAAhH,EAAoIC,wBAApI,QAAoK,mBAApK;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,UAAT,QAA2B,0BAA3B;;;;AAY8GpC,IAAAA,EAsK1G,wB;;;;;AAtK0GA,IAAAA,EAsKvE,mD;;;;;;AAtKuEA,IAAAA,EAuZ1G,wC;;;;mBAvZ0GA,E;AAAAA,IAAAA,EAuZpF,sC;;;;;;AAvZoFA,IAAAA,EAyZ1G,4C;AAzZ0GA,IAAAA,EA0ZxG,wB;AA1ZwGA,IAAAA,EA2Z1G,e;;;;;;;;;;;;AA3Z0GA,IAAAA,EAmwBtG,2B;AAnwBsGA,IAAAA,EAowBpG,8G;AApwBoGA,IAAAA,EAqwBtG,wB;;;;;AArwBsGA,IAAAA,EAowBzD,a;AApwByDA,IAAAA,EAowBzD,4B;;;;AA9wBrD,MAAMqC,2BAAN,CAAkC;AAC9BC,EAAAA,WAAW,GAAG;AACV,SAAKC,OAAL,GAAe,IAAItC,YAAJ,EAAf;AACH;;AACDuC,EAAAA,OAAO,CAACC,CAAD,EAAI;AACP,QAAI,CAAC,KAAKC,UAAV,EAAsB;AAClB,WAAKH,OAAL,CAAaI,IAAb,CAAkBF,CAAlB;AACH;AACJ;;AAR6B;;AAUlCJ,2BAA2B,CAACO,IAA5B;AAAA,mBAAwHP,2BAAxH;AAAA;;AACAA,2BAA2B,CAACQ,IAA5B,kBAD8G7C,EAC9G;AAAA,QAA4GqC,2BAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAD8GrC,MAAAA,EAC9G;AAAA,eAA4G,mBAA5G;AAAA;AAAA;;AAAA;AAD8GA,MAAAA,EAC9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAD8GA,MAAAA,EACkf,wBAAhmB;AAAA;AAAA;AAAA;AAAA;AAAA;;AACAe,UAAU,CAAC,CACPC,YAAY,EADL,CAAD,EAEPqB,2BAA2B,CAACS,SAFrB,EAEgC,YAFhC,EAE8C,KAAK,CAFnD,CAAV;;AAGA;AAAA,qDAL8G9C,EAK9G,mBAA2FqC,2BAA3F,EAAoI,CAAC;AACzHU,IAAAA,IAAI,EAAE7C,SADmH;AAEzH8C,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,sCADX;AAECC,MAAAA,QAAQ,EAAG,iDAFZ;AAGCC,MAAAA,eAAe,EAAEhD,uBAAuB,CAACiD,MAH1C;AAICC,MAAAA,mBAAmB,EAAE,KAJtB;AAKCC,MAAAA,IAAI,EAAE;AACFC,QAAAA,KAAK,EAAE,mBADL;AAEF,6CAAsC,WAFpC;AAGF,mDAA4C,iBAH1C;AAIF,8CAAuC,YAJrC;AAKF,mBAAW;AALT;AALP,KAAD;AAFmH,GAAD,CAApI,QAe4B;AAAEC,IAAAA,SAAS,EAAE,CAAC;AAC1BT,MAAAA,IAAI,EAAE3C;AADoB,KAAD,CAAb;AAEZqD,IAAAA,eAAe,EAAE,CAAC;AAClBV,MAAAA,IAAI,EAAE3C;AADY,KAAD,CAFL;AAIZsC,IAAAA,UAAU,EAAE,CAAC;AACbK,MAAAA,IAAI,EAAE3C;AADO,KAAD,CAJA;AAMZmC,IAAAA,OAAO,EAAE,CAAC;AACVQ,MAAAA,IAAI,EAAE1C;AADI,KAAD;AANG,GAf5B;AAAA;AAyBA;AACA;AACA;AACA;;;AACA,MAAMqD,SAAS,GAAG,CAACC,KAAD,EAAQC,IAAR,EAAcC,QAAd,KAA2B;AACzC,MAAIC,KAAK,GAAGH,KAAK,CAACI,OAAN,CAAcH,IAAd,CAAZ;;AACA,MAAIE,KAAK,GAAG,CAAZ,EAAe;AACX,WAAO,IAAP;AACH;;AACD,QAAME,KAAK,GAAGH,QAAQ,CAACD,IAAD,CAAtB;;AACA,OAAKE,KAAK,EAAV,EAAcA,KAAK,IAAI,CAAvB,EAA0BA,KAAK,EAA/B,EAAmC;AAC/B,UAAMG,QAAQ,GAAGJ,QAAQ,CAACF,KAAK,CAACG,KAAD,CAAN,CAAzB;;AACA,QAAIG,QAAQ,GAAG,CAAX,KAAiBD,KAArB,EAA4B;AACxB,aAAOL,KAAK,CAACG,KAAD,CAAZ;AACH;;AACD,QAAIG,QAAQ,GAAG,CAAX,GAAeD,KAAnB,EAA0B;AACtB,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH,CAhBD;;AAiBA,MAAME,cAAc,GAAG,CAACP,KAAD,EAAQC,IAAR,EAAcC,QAAd,EAAwBM,MAAxB,KAAmC;AACtD,MAAIL,KAAK,GAAG,OAAOK,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyCR,KAAK,CAACI,OAAN,CAAcH,IAAd,CAArD;;AACA,MAAIE,KAAK,GAAG,CAAZ,EAAe;AACX,WAAO,IAAP;AACH;;AACD,QAAME,KAAK,GAAGH,QAAQ,CAACD,IAAD,CAAtB;;AACA,OAAKE,KAAK,EAAV,EAAcA,KAAK,GAAGH,KAAK,CAACS,MAA5B,EAAoCN,KAAK,EAAzC,EAA6C;AACzC,UAAMO,SAAS,GAAGR,QAAQ,CAACF,KAAK,CAACG,KAAD,CAAN,CAA1B;;AACA,QAAIO,SAAS,GAAGL,KAAhB,EAAuB;AACnB,aAAO,IAAP;AACH;;AACD,QAAIK,SAAS,KAAKL,KAAlB,EAAyB;AACrB,aAAOL,KAAK,CAACG,KAAD,CAAZ;AACH;AACJ;;AACD,SAAO,IAAP;AACH,CAhBD;AAkBA;AACA;AACA;AACA;;;AACA,MAAMQ,UAAN,SAAyB5C,WAAzB,CAAqC,E,CAGrC;;;AACA,MAAM6C,UAAN,SAAyB5C,OAAzB,CAAiC;AAC7BW,EAAAA,WAAW,CAACkC,OAAD,EAAUC,iBAAV,EAA6BC,WAA7B,EAA0CC,cAA1C,EAA0D;AACjE,UAAMH,OAAN,EAAeC,iBAAf;AACA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,QAAL,GAAgB,IAAI3D,OAAJ,EAAhB;AACA,SAAK4D,GAAL,GAAW,KAAX;AACA,SAAKC,kBAAL,GAA0B,IAAI7D,OAAJ,EAA1B;AACA,SAAK8D,eAAL,GAAuB,KAAvB;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACH;;AACa,MAAVC,UAAU,GAAG;AACb,WAAO,MAAMA,UAAb;AACH;;AACa,MAAVA,UAAU,CAACA,UAAD,EAAa;AACvB,UAAMA,UAAN,GAAmBA,UAAnB;AACH;;AACDC,EAAAA,QAAQ,GAAG;AACP,QAAIC,EAAJ;;AACA,UAAMD,QAAN;;AACA,QAAI,KAAKP,cAAT,EAAyB;AACrB,WAAKE,GAAL,GAAW,KAAKF,cAAL,CAAoBS,KAA/B;AACA,OAACD,EAAE,GAAG,KAAKR,cAAL,CAAoBU,MAA1B,MAAsC,IAAtC,IAA8CF,EAAE,KAAK,KAAK,CAA1D,GAA8D,KAAK,CAAnE,GAAuEA,EAAE,CAACG,IAAH,CAAQhE,SAAS,CAAC,KAAKsD,QAAN,CAAjB,EAAkCW,SAAlC,CAA6CC,SAAD,IAAe;AAC9H,aAAKX,GAAL,GAAWW,SAAX;AACA,aAAKf,iBAAL,CAAuBgB,aAAvB;AACH,OAHsE,CAAvE;AAIH;AACJ;;AACDC,EAAAA,WAAW,GAAG;AACV,UAAMA,WAAN;AACA,SAAKd,QAAL,CAAce,IAAd;AACA,SAAKf,QAAL,CAAcgB,QAAd;AACH;;AACDC,EAAAA,iBAAiB,CAACC,IAAD,EAAOC,UAAP,EAAmBC,aAAnB,EAAkCC,UAAlC,EAA8C;AAC3D,UAAMJ,iBAAN,CAAwBC,IAAxB,EAA8BC,UAA9B,EAA0CC,aAA1C,EAAyDC,UAAzD;;AACA,SAAKnB,kBAAL,CAAwBa,IAAxB;AACH;;AAtC4B;;AAwCjCpB,UAAU,CAAC3B,IAAX;AAAA,mBAAuG2B,UAAvG,EArH8GvE,EAqH9G,mBAAmIA,EAAE,CAACkG,eAAtI,GArH8GlG,EAqH9G,mBAAkKA,EAAE,CAACmG,iBAArK,GArH8GnG,EAqH9G,mBAAmMa,EAAE,CAACuF,sBAAtM,MArH8GpG,EAqH9G,mBAAqQP,EAAE,CAAC4G,cAAxQ;AAAA;;AACA9B,UAAU,CAAC1B,IAAX,kBAtH8G7C,EAsH9G;AAAA,QAA2FuE,UAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAtH8GvE,EAsH9G;AAAA;AAAA;AAAA;AAAA;AAAA;;AACAe,UAAU,CAAC,CACPC,YAAY,EADL,CAAD,EAEPuD,UAAU,CAACzB,SAFJ,EAEe,iBAFf,EAEkC,KAAK,CAFvC,CAAV;;AAGA/B,UAAU,CAAC,CACPC,YAAY,EADL,CAAD,EAEPuD,UAAU,CAACzB,SAFJ,EAEe,aAFf,EAE8B,KAAK,CAFnC,CAAV;;AAGA;AAAA,qDA7H8G9C,EA6H9G,mBAA2FuE,UAA3F,EAAmH,CAAC;AACxGxB,IAAAA,IAAI,EAAE7C,SADkG;AAExG8C,IAAAA,IAAI,EAAE,CAAC;AAAEE,MAAAA,QAAQ,EAAE;AAAZ,KAAD;AAFkG,GAAD,CAAnH,EAG4B,YAAY;AAChC,WAAO,CAAC;AAAEH,MAAAA,IAAI,EAAE/C,EAAE,CAACkG;AAAX,KAAD,EAA+B;AAAEnD,MAAAA,IAAI,EAAE/C,EAAE,CAACmG;AAAX,KAA/B,EAA+D;AAAEpD,MAAAA,IAAI,EAAElC,EAAE,CAACuF,sBAAX;AAAmCE,MAAAA,UAAU,EAAE,CAAC;AACtGvD,QAAAA,IAAI,EAAEzC;AADgG,OAAD,EAEtG;AACCyC,QAAAA,IAAI,EAAExC;AADP,OAFsG;AAA/C,KAA/D,EAIW;AAAEwC,MAAAA,IAAI,EAAEtD,EAAE,CAAC4G,cAAX;AAA2BC,MAAAA,UAAU,EAAE,CAAC;AAC1CvD,QAAAA,IAAI,EAAExC;AADoC,OAAD;AAAvC,KAJX,CAAP;AAOH,GAXL,EAWuB;AAAEgG,IAAAA,WAAW,EAAE,CAAC;AACvBxD,MAAAA,IAAI,EAAE3C,KADiB;AAEvB4C,MAAAA,IAAI,EAAE,CAAC,eAAD;AAFiB,KAAD,CAAf;AAGPiC,IAAAA,UAAU,EAAE,CAAC;AACblC,MAAAA,IAAI,EAAE3C,KADO;AAEb4C,MAAAA,IAAI,EAAE,CAAC,cAAD;AAFO,KAAD,CAHL;AAMP+B,IAAAA,eAAe,EAAE,CAAC;AAClBhC,MAAAA,IAAI,EAAE3C;AADY,KAAD,CANV;AAQP4E,IAAAA,WAAW,EAAE,CAAC;AACdjC,MAAAA,IAAI,EAAE3C;AADQ,KAAD;AARN,GAXvB;AAAA;AAuBA;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAASoG,oBAAT,CAA8BC,GAA9B,EAAmC;AAC/B,SAAOA,GAAG,CAAChF,GAAJ,CAAQiF,CAAC,IAAKA,CAAC,GAAG,CAAH,GAAO,CAAtB,EAA0BC,IAA1B,CAA+B,EAA/B,CAAP;AACH;;AACD,MAAMC,uBAAuB,GAAG,OAAOC,qBAAP,KAAiC,WAAjC,GAA+C3F,uBAA/C,GAAyEC,aAAzG;;AACA,MAAM2F,0BAAN,CAAiC;AAC7BxE,EAAAA,WAAW,GAAG;AACV,SAAKyE,OAAL,GAAe,EAAf;AACH;;AAH4B;;AAKjCD,0BAA0B,CAAClE,IAA3B;AAAA,mBAAuHkE,0BAAvH;AAAA;;AACAA,0BAA0B,CAACjE,IAA3B,kBArK8G7C,EAqK9G;AAAA,QAA2G8G,0BAA3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AArK8G9G,MAAAA,EAsK1G,2EADJ;AAAA;;AAAA;AArK8GA,MAAAA,EAsKX,mCADnG;AAAA;AAAA;AAAA,eAE0CF,IAAI,CAACkH,OAF/C;AAAA;AAAA;AAAA;;AAGA;AAAA,qDAxK8GhH,EAwK9G,mBAA2F8G,0BAA3F,EAAmI,CAAC;AACxH/D,IAAAA,IAAI,EAAE7C,SADkH;AAExH8C,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,sBADX;AAECC,MAAAA,QAAQ,EAAG;AAC/B;AACA,GAJmB;AAKCC,MAAAA,eAAe,EAAEhD,uBAAuB,CAACiD,MAL1C;AAMCE,MAAAA,IAAI,EAAE;AACFC,QAAAA,KAAK,EAAE;AADL;AANP,KAAD;AAFkH,GAAD,CAAnI,QAY4B;AAAEwD,IAAAA,OAAO,EAAE,CAAC;AACxBhE,MAAAA,IAAI,EAAE3C;AADkB,KAAD;AAAX,GAZ5B;AAAA;;AAeA,MAAM6G,6BAAN,CAAoC;AAChC3E,EAAAA,WAAW,CAAC4E,QAAD,EAAWC,IAAX,EAAiBC,GAAjB,EAAsB;AAC7B,SAAKF,QAAL,GAAgBA,QAAhB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,MAAL,GAAc,OAAd;AACA,SAAKC,MAAL,GAAc,KAAd;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,YAAL;AACA,SAAKC,SAAL;AACA;AACR;AACA;AACA;;AACQ,SAAKC,kBAAL,GAA0BxG,KAAK,CAAC,KAAK8F,QAAL,CAAcW,YAAf,EAA6BV,IAAI,CAACrC,kBAAlC,CAAL,CACrBQ,IADqB,CAChB/D,SAAS,CAAC,CAAD,EAAIqF,uBAAJ,CADO,EAErBrB,SAFqB,CAEX,MAAM;AACjB,WAAKmC,YAAL;AACA,WAAKI,aAAL;AACA,WAAKV,GAAL,CAASW,YAAT;AACH,KANyB,CAA1B;AAOH;;AACDC,EAAAA,UAAU,GAAG;AACT,UAAMjB,OAAO,GAAG,EAAhB;AACA,UAAMpD,KAAK,GAAG,KAAKwD,IAAL,CAAUZ,WAAV,CAAsB0B,SAApC;AACA,UAAMpE,QAAQ,GAAG,KAAKsD,IAAL,CAAUZ,WAAV,CAAsB1C,QAAvC;AACA,QAAIqE,MAAM,GAAGxE,SAAS,CAACC,KAAD,EAAQ,KAAKuD,QAAL,CAAcpB,IAAtB,EAA4BjC,QAA5B,CAAtB;;AACA,WAAOqE,MAAP,EAAe;AACX,YAAMC,iBAAiB,GAAGjE,cAAc,CAACP,KAAD,EAAQuE,MAAR,EAAgBrE,QAAhB,CAAxC;;AACA,UAAIsE,iBAAJ,EAAuB;AACnBpB,QAAAA,OAAO,CAACqB,OAAR,CAAgB,IAAhB;AACH,OAFD,MAGK;AACDrB,QAAAA,OAAO,CAACqB,OAAR,CAAgB,KAAhB;AACH;;AACDF,MAAAA,MAAM,GAAGxE,SAAS,CAACC,KAAD,EAAQuE,MAAR,EAAgBrE,QAAhB,CAAlB;AACH;;AACD,WAAOkD,OAAP;AACH;;AACDW,EAAAA,YAAY,GAAG;AACX,QAAI,KAAKR,QAAL,CAAcpB,IAAlB,EAAwB;AACpB,YAAMiB,OAAO,GAAG,KAAKiB,UAAL,EAAhB;AACA,YAAMK,UAAU,GAAG7B,oBAAoB,CAACO,OAAD,CAAvC;;AACA,UAAIsB,UAAU,KAAK,KAAKZ,cAAxB,EAAwC;AACpC,aAAKP,QAAL,CAAcoB,UAAd,CAAyB,KAAKN,UAAL,EAAzB;AACA,aAAKP,cAAL,GAAsBY,UAAtB;AACH;AACJ;AACJ;AACD;AACJ;AACA;AACA;;;AACIP,EAAAA,aAAa,GAAG;AACZ,UAAMnE,KAAK,GAAG,KAAKwD,IAAL,CAAUZ,WAAV,CAAsB0B,SAApC;AACA,UAAMnE,KAAK,GAAGH,KAAK,CAACI,OAAN,CAAc,KAAKmD,QAAL,CAAcpB,IAA5B,CAAd;AACA,UAAMyC,OAAO,GAAG5E,KAAK,CAACG,KAAK,GAAG,CAAT,CAAL,IAAoB,IAApC;AACA,UAAM0E,QAAQ,GAAG7E,KAAK,CAACG,KAAK,GAAG,CAAT,CAAL,IAAoB,IAArC;;AACA,QAAI,KAAK0D,WAAL,KAAqBgB,QAArB,IAAiC,KAAKjB,UAAL,KAAoBgB,OAAzD,EAAkE;AAC9D,WAAKZ,SAAL,CAAe7D,KAAf;AACH;;AACD,SAAKyD,UAAL,GAAkBgB,OAAlB;AACA,SAAKf,WAAL,GAAmBgB,QAAnB;AACH;;AACDb,EAAAA,SAAS,CAAC7D,KAAD,EAAQ;AACb,UAAMH,KAAK,GAAG,KAAKwD,IAAL,CAAUZ,WAAV,CAAsB0B,SAApC;AACA,SAAKX,MAAL,GAAc,KAAKJ,QAAL,CAAcI,MAA5B;AACA,SAAKD,MAAL,GAAc,CAACnD,cAAc,CAACP,KAAD,EAAQ,KAAKuD,QAAL,CAAcpB,IAAtB,EAA4B,KAAKqB,IAAL,CAAUZ,WAAV,CAAsB1C,QAAlD,EAA4DC,KAA5D,CAA7B;AACH;;AACD4B,EAAAA,WAAW,GAAG;AACV,SAAK6B,UAAL,GAAkB,IAAlB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKI,kBAAL,CAAwBa,WAAxB;AACH;;AA3E+B;;AA6EpCxB,6BAA6B,CAACrE,IAA9B;AAAA,mBAA0HqE,6BAA1H,EApQ8GjH,EAoQ9G,mBAAyKsE,UAAzK,GApQ8GtE,EAoQ9G,mBAAgMuE,UAAhM,GApQ8GvE,EAoQ9G,mBAAuNA,EAAE,CAACmG,iBAA1N;AAAA;;AACAc,6BAA6B,CAACyB,IAA9B,kBArQ8G1I,EAqQ9G;AAAA,QAA8GiH,6BAA9G;AAAA;AAAA;AAAA;AAAA;AAAA;AArQ8GjH,MAAAA,EAqQ9G;AAAA;AAAA;AAAA;;AACA;AAAA,qDAtQ8GA,EAsQ9G,mBAA2FiH,6BAA3F,EAAsI,CAAC;AAC3HlE,IAAAA,IAAI,EAAEvC,SADqH;AAE3HwC,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,oCADX;AAECK,MAAAA,IAAI,EAAE;AACFC,QAAAA,KAAK,EAAE,oBADL;AAEF,+CAAuC;AAFrC;AAFP,KAAD;AAFqH,GAAD,CAAtI,EAS4B,YAAY;AAAE,WAAO,CAAC;AAAER,MAAAA,IAAI,EAAEuB;AAAR,KAAD,EAAuB;AAAEvB,MAAAA,IAAI,EAAEwB;AAAR,KAAvB,EAA6C;AAAExB,MAAAA,IAAI,EAAE/C,EAAE,CAACmG;AAAX,KAA7C,CAAP;AAAsF,GAThI;AAAA;AAWA;AACA;AACA;AACA;;;AACA,MAAMwC,6BAAN,CAAoC;;AAEpCA,6BAA6B,CAAC/F,IAA9B;AAAA,mBAA0H+F,6BAA1H;AAAA;;AACAA,6BAA6B,CAACD,IAA9B,kBAxR8G1I,EAwR9G;AAAA,QAA8G2I,6BAA9G;AAAA;AAAA;AAAA;;AACA;AAAA,qDAzR8G3I,EAyR9G,mBAA2F2I,6BAA3F,EAAsI,CAAC;AAC3H5F,IAAAA,IAAI,EAAEvC,SADqH;AAE3HwC,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,mEADX;AAECK,MAAAA,IAAI,EAAE;AACFC,QAAAA,KAAK,EAAE;AADL;AAFP,KAAD;AAFqH,GAAD,CAAtI;AAAA;;AASA,MAAMqF,yBAAN,SAAwChH,iBAAxC,CAA0D;AACzC,MAATiH,SAAS,GAAG;AACZ,WAAO,KAAKC,UAAZ;AACH;;AACY,MAATD,SAAS,CAACzD,KAAD,EAAQ;AACjB,SAAK0D,UAAL,GAAkB5G,qBAAqB,CAACkD,KAAD,CAAvC;AACH;;AACa,MAAV2D,UAAU,GAAG;AACb,WAAO,KAAKC,SAAL,CAAeD,UAAtB;AACH;;AATqD;;AAW1DH,yBAAyB,CAAChG,IAA1B;AAAA;AAAA;AAAA,gGA7S8G5C,EA6S9G,uBAAsH4I,yBAAtH,SAAsHA,yBAAtH;AAAA;AAAA;;AACAA,yBAAyB,CAACF,IAA1B,kBA9S8G1I,EA8S9G;AAAA,QAA0G4I,yBAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AA9S8G5I,MAAAA,EA8S9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA9S8GA,EA8S9G,oBAAic,CAAC;AAAEiJ,IAAAA,OAAO,EAAErH,iBAAX;AAA8BsH,IAAAA,WAAW,EAAEN;AAA3C,GAAD,CAAjc,GA9S8G5I,EA8S9G;AAAA;;AACA;AAAA,qDA/S8GA,EA+S9G,mBAA2F4I,yBAA3F,EAAkI,CAAC;AACvH7F,IAAAA,IAAI,EAAEvC,SADiH;AAEvHwC,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,qEADX;AAECkG,MAAAA,SAAS,EAAE,CAAC;AAAEF,QAAAA,OAAO,EAAErH,iBAAX;AAA8BsH,QAAAA,WAAW,EAAEN;AAA3C,OAAD,CAFZ;AAGCtF,MAAAA,IAAI,EAAE;AACFC,QAAAA,KAAK,EAAE,mBADL;AAEF,0CAAkC,YAFhC;AAGF,2CAAmC;AAHjC;AAHP,KAAD;AAFiH,GAAD,CAAlI,QAW4B;AAAEsF,IAAAA,SAAS,EAAE,CAAC;AAC1B9F,MAAAA,IAAI,EAAE3C,KADoB;AAE1B4C,MAAAA,IAAI,EAAE,CAAC,2BAAD;AAFoB,KAAD;AAAb,GAX5B;AAAA;;AAeA,MAAMoG,mCAAN,CAA0C;;AAE1CA,mCAAmC,CAACxG,IAApC;AAAA,mBAAgIwG,mCAAhI;AAAA;;AACAA,mCAAmC,CAACV,IAApC,kBAjU8G1I,EAiU9G;AAAA,QAAoHoJ,mCAApH;AAAA;AAAA;AAAA;;AACA;AAAA,qDAlU8GpJ,EAkU9G,mBAA2FoJ,mCAA3F,EAA4I,CAAC;AACjIrG,IAAAA,IAAI,EAAEvC,SAD2H;AAEjIwC,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,uCADX;AAECK,MAAAA,IAAI,EAAE;AACFC,QAAAA,KAAK,EAAE;AADL;AAFP,KAAD;AAF2H,GAAD,CAA5I;AAAA;;AASA,MAAM8F,mCAAN,CAA0C;;AAE1CA,mCAAmC,CAACzG,IAApC;AAAA,mBAAgIyG,mCAAhI;AAAA;;AACAA,mCAAmC,CAACX,IAApC,kBA9U8G1I,EA8U9G;AAAA,QAAoHqJ,mCAApH;AAAA;AAAA;AAAA;;AACA;AAAA,qDA/U8GrJ,EA+U9G,mBAA2FqJ,mCAA3F,EAA4I,CAAC;AACjItG,IAAAA,IAAI,EAAEvC,SAD2H;AAEjIwC,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,uCADX;AAECK,MAAAA,IAAI,EAAE;AACFC,QAAAA,KAAK,EAAE;AADL;AAFP,KAAD;AAF2H,GAAD,CAA5I;AAAA;AAUA;AACA;AACA;AACA;;;AACA,MAAM+F,mBAAN,SAAkChF,UAAlC,CAA6C;AACzChC,EAAAA,WAAW,CAACiH,UAAD,EAAapC,IAAb,EAAmBqC,QAAnB,EAA6BpC,GAA7B,EAAkC;AACzC,UAAMmC,UAAN,EAAkBpC,IAAlB;AACA,SAAKoC,UAAL,GAAkBA,UAAlB;AACA,SAAKpC,IAAL,GAAYA,IAAZ;AACA,SAAKqC,QAAL,GAAgBA,QAAhB;AACA,SAAKpC,GAAL,GAAWA,GAAX;AACA,SAAKL,OAAL,GAAe,EAAf;AACA,SAAK0C,QAAL,GAAgB,KAAhB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKpC,MAAL,GAAc,KAAd;;AACA,SAAKqC,WAAL,CAAiBC,aAAjB,CAA+BC,SAA/B,CAAyCC,GAAzC,CAA6C,mBAA7C;AACH;;AACD5E,EAAAA,QAAQ,GAAG;AACP,SAAKoC,MAAL,GAAc,CAAC,KAAKH,IAAL,CAAUZ,WAAV,CAAsBwD,YAAtB,CAAmC,KAAKjE,IAAxC,CAAf;AACH;;AACDkE,EAAAA,OAAO,GAAG;AACN,SAAKP,QAAL,GAAgB,IAAhB;AACA,SAAKQ,mBAAL;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,SAAKT,QAAL,GAAgB,KAAhB;AACA,SAAKQ,mBAAL;AACH;;AACDE,EAAAA,MAAM,GAAG;AACL,SAAKT,QAAL,GAAgB,IAAhB;AACA,SAAKU,mBAAL;AACH;;AACDC,EAAAA,QAAQ,GAAG;AACP,SAAKX,QAAL,GAAgB,KAAhB;AACA,SAAKU,mBAAL;AACH;;AACD9B,EAAAA,UAAU,CAACvB,OAAD,EAAU;AAChB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKK,GAAL,CAASW,YAAT;AACH;;AACDqC,EAAAA,mBAAmB,GAAG;AAClB,QAAI,KAAKV,QAAT,EAAmB;AACf,WAAKF,QAAL,CAAcc,QAAd,CAAuB,KAAKf,UAAL,CAAgBK,aAAvC,EAAsD,4BAAtD;AACH,KAFD,MAGK;AACD,WAAKJ,QAAL,CAAce,WAAd,CAA0B,KAAKhB,UAAL,CAAgBK,aAA1C,EAAyD,4BAAzD;AACH;AACJ;;AACDK,EAAAA,mBAAmB,GAAG;AAClB,QAAI,KAAKR,QAAT,EAAmB;AACf,WAAKD,QAAL,CAAcc,QAAd,CAAuB,KAAKf,UAAL,CAAgBK,aAAvC,EAAsD,4BAAtD;AACH,KAFD,MAGK;AACD,WAAKJ,QAAL,CAAce,WAAd,CAA0B,KAAKhB,UAAL,CAAgBK,aAA1C,EAAyD,4BAAzD;AACH;AACJ;;AAnDwC;;AAqD7CN,mBAAmB,CAAC1G,IAApB;AAAA,mBAAgH0G,mBAAhH,EAlZ8GtJ,EAkZ9G,mBAAqJA,EAAE,CAACwK,UAAxJ,GAlZ8GxK,EAkZ9G,mBAA+KuE,UAA/K,GAlZ8GvE,EAkZ9G,mBAAsMA,EAAE,CAACyK,SAAzM,GAlZ8GzK,EAkZ9G,mBAA+NA,EAAE,CAACmG,iBAAlO;AAAA;;AACAmD,mBAAmB,CAACzG,IAApB,kBAnZ8G7C,EAmZ9G;AAAA,QAAoGsJ,mBAApG;AAAA;AAAA;AAAA;AAAA;AAnZ8GtJ,MAAAA,EAmZ9G;AAAA;AAAA;AAAA;AAAA,aAnZ8GA,EAmZ9G,oBAAuT,CAC/S;AAAEiJ,IAAAA,OAAO,EAAEvH,WAAX;AAAwBwH,IAAAA,WAAW,EAAEI;AAArC,GAD+S,EAE/S;AAAEL,IAAAA,OAAO,EAAE3E,UAAX;AAAuB4E,IAAAA,WAAW,EAAEI;AAApC,GAF+S,CAAvT,GAnZ8GtJ,EAmZ9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnZ8GA,MAAAA,EAmZ9G;AAnZ8GA,MAAAA,EAuZ1G,oGAJJ;AAnZ8GA,MAAAA,EAwZ1G,gBALJ;AAnZ8GA,MAAAA,EAyZ1G,kGANJ;AAnZ8GA,MAAAA,EA4Z1G,mBATJ;AAnZ8GA,MAAAA,EA6Z1G,mBAVJ;AAnZ8GA,MAAAA,EA8Z1G,mBAXJ;AAAA;;AAAA;AAnZ8GA,MAAAA,EAuZ/D,uCAJ/C;AAnZ8GA,MAAAA,EAyZrD,aANzD;AAnZ8GA,MAAAA,EAyZrD,qDANzD;AAAA;AAAA;AAAA,eAY0C8G,0BAZ1C,EAYqJhH,IAAI,CAAC4K,IAZ1J,EAYwO/B,6BAZxO;AAAA;AAAA;AAAA;;AAaA;AAAA,qDAha8G3I,EAga9G,mBAA2FsJ,mBAA3F,EAA4H,CAAC;AACjHvG,IAAAA,IAAI,EAAE7C,SAD2G;AAEjH8C,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,6BADX;AAEC0H,MAAAA,QAAQ,EAAE,YAFX;AAGCxH,MAAAA,eAAe,EAAEhD,uBAAuB,CAACiD,MAH1C;AAIC+F,MAAAA,SAAS,EAAE,CACP;AAAEF,QAAAA,OAAO,EAAEvH,WAAX;AAAwBwH,QAAAA,WAAW,EAAEI;AAArC,OADO,EAEP;AAAEL,QAAAA,OAAO,EAAE3E,UAAX;AAAuB4E,QAAAA,WAAW,EAAEI;AAApC,OAFO,CAJZ;AAQCpG,MAAAA,QAAQ,EAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAjBmB;AAkBCI,MAAAA,IAAI,EAAE;AACF,mDAA2C,YADzC;AAEF,oDAA4C;AAF1C;AAlBP,KAAD;AAF2G,GAAD,CAA5H,EAyB4B,YAAY;AAAE,WAAO,CAAC;AAAEP,MAAAA,IAAI,EAAE/C,EAAE,CAACwK;AAAX,KAAD,EAA0B;AAAEzH,MAAAA,IAAI,EAAEwB;AAAR,KAA1B,EAAgD;AAAExB,MAAAA,IAAI,EAAE/C,EAAE,CAACyK;AAAX,KAAhD,EAAwE;AAAE1H,MAAAA,IAAI,EAAE/C,EAAE,CAACmG;AAAX,KAAxE,CAAP;AAAiH,GAzB3J;AAAA;;AA0BA,MAAMyE,sBAAN,SAAqC/I,cAArC,CAAoD;;AAEpD+I,sBAAsB,CAAChI,IAAvB;AAAA;AAAA;AAAA,0FA5b8G5C,EA4b9G,uBAAmH4K,sBAAnH,SAAmHA,sBAAnH;AAAA;AAAA;;AACAA,sBAAsB,CAAClC,IAAvB,kBA7b8G1I,EA6b9G;AAAA,QAAuG4K,sBAAvG;AAAA;AAAA;AAAA;AAAA;AAAA,aA7b8G5K,EA6b9G,oBAAwN,CAAC;AAAEiJ,IAAAA,OAAO,EAAEpH,cAAX;AAA2BqH,IAAAA,WAAW,EAAE0B;AAAxC,GAAD,CAAxN,GA7b8G5K,EA6b9G;AAAA;;AACA;AAAA,qDA9b8GA,EA8b9G,mBAA2F4K,sBAA3F,EAA+H,CAAC;AACpH7H,IAAAA,IAAI,EAAEvC,SAD8G;AAEpHwC,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,iBADX;AAECkG,MAAAA,SAAS,EAAE,CAAC;AAAEF,QAAAA,OAAO,EAAEpH,cAAX;AAA2BqH,QAAAA,WAAW,EAAE0B;AAAxC,OAAD;AAFZ,KAAD;AAF8G,GAAD,CAA/H,QAM4B;AAAEC,IAAAA,IAAI,EAAE,CAAC;AACrB9H,MAAAA,IAAI,EAAE3C,KADe;AAErB4C,MAAAA,IAAI,EAAE,CAAC,mBAAD;AAFe,KAAD;AAAR,GAN5B;AAAA;;AAUA,MAAM8H,sCAAN,CAA6C;AACzCxI,EAAAA,WAAW,CAACyI,iBAAD,EAAoB;AAC3B,SAAKA,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACH;;AACDC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,UAAMC,YAAY,GAAG,KAAKC,kBAAL,CAAwBF,OAAxB,CAArB;;AACA,QAAIC,YAAJ,EAAkB;AACd,YAAME,gBAAgB,GAAG,KAAKN,iBAA9B;;AACA,UAAI,KAAKC,QAAT,EAAmB;AACfK,QAAAA,gBAAgB,CAACC,MAAjB,CAAwBD,gBAAgB,CAACtH,OAAjB,CAAyB,KAAKiH,QAA9B,CAAxB;AACH;;AACD,WAAKA,QAAL,GAAgB,KAAKlF,IAAL,GACVuF,gBAAgB,CAACE,kBAAjB,CAAoC,KAAKzF,IAAL,CAAU0F,OAAV,CAAkBtI,QAAtD,EAAgE,KAAK4C,IAAL,CAAU2F,OAA1E,CADU,GAEV,IAFN;;AAGA,UAAI/J,WAAW,CAACgK,kBAAZ,IAAkC,KAAKV,QAA3C,EAAqD;AACjDtJ,QAAAA,WAAW,CAACgK,kBAAZ,CAA+B5F,IAA/B,GAAsC,KAAKA,IAAL,CAAUA,IAAhD;AACH;AACJ,KAXD,MAYK,IAAI,KAAKkF,QAAL,IAAiB,KAAKlF,IAAL,CAAU2F,OAA/B,EAAwC;AACzC,WAAKE,qBAAL,CAA2B,KAAK7F,IAAL,CAAU2F,OAArC;AACH;AACJ;;AACDL,EAAAA,kBAAkB,CAACF,OAAD,EAAU;AACxB,UAAMU,SAAS,GAAGV,OAAO,CAACpF,IAA1B;AACA,WAAO8F,SAAS,IAAI,KAAKC,sBAAL,CAA4BD,SAA5B,CAApB;AACH;;AACDC,EAAAA,sBAAsB,CAACD,SAAD,EAAY;AAC9B,QAAIzG,EAAJ,EAAQ2G,EAAR;;AACA,UAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYL,SAAS,CAACM,aAAV,IAA2B,EAAvC,CAApB;AACA,UAAMC,WAAW,GAAGH,MAAM,CAACC,IAAP,CAAYL,SAAS,CAACQ,YAAV,IAA0B,EAAtC,CAApB;;AACA,QAAIL,WAAW,CAAC3H,MAAZ,KAAuB+H,WAAW,CAAC/H,MAAvC,EAA+C;AAC3C,WAAK,MAAMiI,QAAX,IAAuBF,WAAvB,EAAoC;AAChC,YAAIJ,WAAW,CAAChI,OAAZ,CAAoBsI,QAApB,MAAkC,CAAC,CAAvC,EAA0C;AACtC,iBAAO,IAAP;AACH;AACJ;;AACD,aAAO,CAAC,CAAClH,EAAE,GAAGyG,SAAS,CAACM,aAAhB,MAAmC,IAAnC,IAA2C/G,EAAE,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,EAAE,CAACW,IAAxE,OAAmF,CAACgG,EAAE,GAAGF,SAAS,CAACQ,YAAhB,MAAkC,IAAlC,IAA0CN,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAAChG,IAAzJ,CAAP;AACH;;AACD,WAAO,IAAP;AACH;;AACD6F,EAAAA,qBAAqB,CAACW,GAAD,EAAM;AACvB,SAAK,MAAMD,QAAX,IAAuBL,MAAM,CAACC,IAAP,CAAYK,GAAZ,CAAvB,EAAyC;AACrC,WAAKtB,QAAL,CAAcS,OAAd,CAAsBY,QAAtB,IAAkC,KAAKvG,IAAL,CAAU2F,OAAV,CAAkBY,QAAlB,CAAlC;AACH;AACJ;;AA7CwC;;AA+C7CvB,sCAAsC,CAAClI,IAAvC;AAAA,mBAAmIkI,sCAAnI,EAvf8G9K,EAuf9G,mBAA2LA,EAAE,CAACuM,gBAA9L;AAAA;;AACAzB,sCAAsC,CAACpC,IAAvC,kBAxf8G1I,EAwf9G;AAAA,QAAuH8K,sCAAvH;AAAA;AAAA;AAAA;AAAA;AAAA,aAxf8G9K,EAwf9G;AAAA;;AACA;AAAA,qDAzf8GA,EAyf9G,mBAA2F8K,sCAA3F,EAA+I,CAAC;AACpI/H,IAAAA,IAAI,EAAEvC,SAD8H;AAEpIwC,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE;AADX,KAAD;AAF8H,GAAD,CAA/I,EAK4B,YAAY;AAAE,WAAO,CAAC;AAAEF,MAAAA,IAAI,EAAE/C,EAAE,CAACuM;AAAX,KAAD,CAAP;AAAyC,GALnF,EAKqG;AAAEzG,IAAAA,IAAI,EAAE,CAAC;AAC9F/C,MAAAA,IAAI,EAAE3C;AADwF,KAAD;AAAR,GALrG;AAAA;;AASA,MAAMoM,yBAAN,CAAgC;AAC5BlK,EAAAA,WAAW,CAAC4E,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACA,SAAKuF,UAAL,GAAkB,KAAlB;AACA,SAAK/J,UAAL,GAAkB,KAAlB;AACA,SAAKH,OAAL,GAAe,IAAItC,YAAJ,EAAf;AACH;;AACa,MAAV8I,UAAU,GAAG;AACb,WAAO,KAAK7B,QAAL,CAAc6B,UAArB;AACH;;AACDvG,EAAAA,OAAO,CAACC,CAAD,EAAI;AACP,QAAI,CAAC,KAAKC,UAAV,EAAsB;AAClB,WAAKH,OAAL,CAAaI,IAAb,CAAkBF,CAAlB;AACH;AACJ;;AACDwI,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,UAAM;AAAExI,MAAAA,UAAF;AAAc+J,MAAAA;AAAd,QAA6BvB,OAAnC;;AACA,QAAIxI,UAAJ,EAAgB;AACZ,UAAIA,UAAU,CAAC0J,YAAf,EAA6B;AACzB,aAAKlF,QAAL,CAAc8C,OAAd;AACH,OAFD,MAGK;AACD,aAAK9C,QAAL,CAAcgD,MAAd;AACH;AACJ;;AACD,QAAIuC,UAAJ,EAAgB;AACZ,UAAIA,UAAU,CAACL,YAAf,EAA6B;AACzB,aAAKlF,QAAL,CAAciD,MAAd;AACH,OAFD,MAGK;AACD,aAAKjD,QAAL,CAAcmD,QAAd;AACH;AACJ;AACJ;;AAjC2B;;AAmChCmC,yBAAyB,CAAC5J,IAA1B;AAAA,mBAAsH4J,yBAAtH,EAriB8GxM,EAqiB9G,mBAAiKsJ,mBAAjK;AAAA;;AACAkD,yBAAyB,CAAC3J,IAA1B,kBAtiB8G7C,EAsiB9G;AAAA,QAA0GwM,yBAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAtiB8GxM,MAAAA,EAsiB9G;AAAA,eAA0G,mBAA1G;AAAA;AAAA;;AAAA;AAtiB8GA,MAAAA,EAsiB9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAtiB8GA,EAsiB9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtiB8GA,MAAAA,EAsiB9G;AAtiB8GA,MAAAA,EAsiBsa,6BAAphB;AAtiB8GA,MAAAA,EAsiBmc,gBAAjjB;AAtiB8GA,MAAAA,EAsiB4d,eAA1kB;AAAA;AAAA;AAAA;AAAA;AAAA;;AACAe,UAAU,CAAC,CACPC,YAAY,EADL,CAAD,EAEPwL,yBAAyB,CAAC1J,SAFnB,EAE8B,YAF9B,EAE4C,KAAK,CAFjD,CAAV;;AAGA/B,UAAU,CAAC,CACPC,YAAY,EADL,CAAD,EAEPwL,yBAAyB,CAAC1J,SAFnB,EAE8B,YAF9B,EAE4C,KAAK,CAFjD,CAAV;;AAGA;AAAA,qDA7iB8G9C,EA6iB9G,mBAA2FwM,yBAA3F,EAAkI,CAAC;AACvHzJ,IAAAA,IAAI,EAAE7C,SADiH;AAEvH8C,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,qBADX;AAECC,MAAAA,QAAQ,EAAG,iEAFZ;AAGCC,MAAAA,eAAe,EAAEhD,uBAAuB,CAACiD,MAH1C;AAICE,MAAAA,IAAI,EAAE;AACFC,QAAAA,KAAK,EAAE,+BADL;AAEF,sDAA8C,YAF5C;AAGF,0CAAkC,YAHhC;AAIF,mBAAW;AAJT;AAJP,KAAD;AAFiH,GAAD,CAAlI,EAa4B,YAAY;AAAE,WAAO,CAAC;AAAER,MAAAA,IAAI,EAAEuG;AAAR,KAAD,CAAP;AAAyC,GAbnF,EAaqG;AAAEmD,IAAAA,UAAU,EAAE,CAAC;AACpG1J,MAAAA,IAAI,EAAE3C;AAD8F,KAAD,CAAd;AAErFsC,IAAAA,UAAU,EAAE,CAAC;AACbK,MAAAA,IAAI,EAAE3C;AADO,KAAD,CAFyE;AAIrFmC,IAAAA,OAAO,EAAE,CAAC;AACVQ,MAAAA,IAAI,EAAE1C;AADI,KAAD;AAJ4E,GAbrG;AAAA;AAqBA;AACA;AACA;AACA;;;AACA,MAAMqM,yBAAN,CAAgC;AAC5BpK,EAAAA,WAAW,CAAC0D,aAAD,EAAgB2G,KAAhB,EAAuB;AAC9B,SAAK3G,aAAL,GAAqBA,aAArB;AACA,SAAK2G,KAAL,GAAaA,KAAb;AACH;;AAJ2B;;AAMhCD,yBAAyB,CAAC9J,IAA1B;AAAA,mBAAsH8J,yBAAtH,EA5kB8G1M,EA4kB9G,mBAAiKA,EAAE,CAACuM,gBAApK,GA5kB8GvM,EA4kB9G,mBAAiM8B,yBAAjM;AAAA;;AACA4K,yBAAyB,CAAChE,IAA1B,kBA7kB8G1I,EA6kB9G;AAAA,QAA0G0M,yBAA1G;AAAA;AAAA,aA7kB8G1M,EA6kB9G,oBAAgL,CACxK;AACIiJ,IAAAA,OAAO,EAAElH,iBADb;AAEImH,IAAAA,WAAW,EAAEwD;AAFjB,GADwK,CAAhL;AAAA;;AAMA;AAAA,qDAnlB8G1M,EAmlB9G,mBAA2F0M,yBAA3F,EAAkI,CAAC;AACvH3J,IAAAA,IAAI,EAAEvC,SADiH;AAEvHwC,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,oBADX;AAECkG,MAAAA,SAAS,EAAE,CACP;AACIF,QAAAA,OAAO,EAAElH,iBADb;AAEImH,QAAAA,WAAW,EAAEwD;AAFjB,OADO;AAFZ,KAAD;AAFiH,GAAD,CAAlI,EAW4B,YAAY;AAChC,WAAO,CAAC;AAAE3J,MAAAA,IAAI,EAAE/C,EAAE,CAACuM;AAAX,KAAD,EAAgC;AAAExJ,MAAAA,IAAI,EAAE6J,SAAR;AAAmBtG,MAAAA,UAAU,EAAE,CAAC;AACvDvD,QAAAA,IAAI,EAAEtC,MADiD;AAEvDuC,QAAAA,IAAI,EAAE,CAAClB,yBAAD;AAFiD,OAAD,EAGvD;AACCiB,QAAAA,IAAI,EAAExC;AADP,OAHuD;AAA/B,KAAhC,CAAP;AAMH,GAlBL;AAAA;;AAoBA,MAAMsM,0BAAN,SAAyC7K,kBAAzC,CAA4D;AACxDM,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGwK,SAAT;AACA,SAAKC,OAAL,GAAe,EAAf;AACH;;AACQ,MAAL/I,KAAK,GAAG;AACR,WAAO,KAAKgJ,MAAZ;AACH;;AACQ,MAALhJ,KAAK,CAACoB,KAAD,EAAQ;AACb,SAAK6H,cAAL,CAAoB7H,KAApB;AACH;;AACS,MAAN8H,MAAM,GAAG;AACT,WAAO,KAAKH,OAAZ;AACH;;AACS,MAANG,MAAM,CAACA,MAAD,EAAS;AACf,SAAKC,eAAL,CAAqBD,MAArB;AACH;;AAhBuD;;AAkB5DL,0BAA0B,CAACjK,IAA3B;AAAA;AAAA;AAAA,kGAznB8G5C,EAynB9G,uBAAuH6M,0BAAvH,SAAuHA,0BAAvH;AAAA;AAAA;;AACAA,0BAA0B,CAACnE,IAA3B,kBA1nB8G1I,EA0nB9G;AAAA,QAA2G6M,0BAA3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA1nB8G7M,EA0nB9G,oBAAqR,CAAC;AAAEiJ,IAAAA,OAAO,EAAEjH,kBAAX;AAA+BkH,IAAAA,WAAW,EAAE2D;AAA5C,GAAD,CAArR,GA1nB8G7M,EA0nB9G;AAAA;;AACA;AAAA,qDA3nB8GA,EA2nB9G,mBAA2F6M,0BAA3F,EAAmI,CAAC;AACxH9J,IAAAA,IAAI,EAAEvC,SADkH;AAExHwC,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,qBADX;AAECkG,MAAAA,SAAS,EAAE,CAAC;AAAEF,QAAAA,OAAO,EAAEjH,kBAAX;AAA+BkH,QAAAA,WAAW,EAAE2D;AAA5C,OAAD;AAFZ,KAAD;AAFkH,GAAD,CAAnI,QAM4B;AAAE7I,IAAAA,KAAK,EAAE,CAAC;AACtBjB,MAAAA,IAAI,EAAE3C,KADgB;AAEtB4C,MAAAA,IAAI,EAAE,CAAC,mBAAD;AAFgB,KAAD,CAAT;AAGZkK,IAAAA,MAAM,EAAE,CAAC;AACTnK,MAAAA,IAAI,EAAE3C,KADG;AAET4C,MAAAA,IAAI,EAAE,CAAC,yBAAD;AAFG,KAAD;AAHI,GAN5B;AAAA;AAcA;AACA;AACA;AACA;;;AACA,MAAMoK,mBAAN,SAAkC7I,UAAlC,CAA6C;AACzCjC,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGwK,SAAT;AACA,SAAKO,cAAL,GAAsB,KAAtB;AACH;;AACDC,EAAAA,eAAe,GAAG;AACdC,IAAAA,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM;AACzB,WAAKJ,cAAL,GAAsB,IAAtB;AACA,WAAK5I,iBAAL,CAAuBsD,YAAvB;AACH,KAHD;AAIH;;AAVwC;;AAY7CqF,mBAAmB,CAACxK,IAApB;AAAA;AAAA;AAAA,oFAzpB8G5C,EAypB9G,uBAAgHoN,mBAAhH,SAAgHA,mBAAhH;AAAA;AAAA;;AACAA,mBAAmB,CAACvK,IAApB,kBA1pB8G7C,EA0pB9G;AAAA,QAAoGoN,mBAApG;AAAA;AAAA;AAAA;AA1pB8GpN,MAAAA,EA0pB9G,aAG2E0M,yBAH3E;AAAA;;AAAA;AAAA;;AA1pB8G1M,MAAAA,EA0pB9G,qBA1pB8GA,EA0pB9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA1pB8GA,MAAAA,EA0pB9G;AAAA;AAAA;AAAA;AAAA,aA1pB8GA,EA0pB9G,oBAAyW,CACjW;AAAEiJ,IAAAA,OAAO,EAAEtH,OAAX;AAAoBuH,IAAAA,WAAW,EAAEkE;AAAjC,GADiW,EAEjW;AAAEnE,IAAAA,OAAO,EAAE1E,UAAX;AAAuB2E,IAAAA,WAAW,EAAEkE;AAApC,GAFiW,CAAzW,GA1pB8GpN,EA0pB9G;AAAA;AAAA;AAAA;AAAA;AAAA;AA1pB8GA,MAAAA,EA8pB1G,4BAJJ;AA1pB8GA,MAAAA,EA+pBxG,4BALN;AA1pB8GA,MAAAA,EAoqBtG,yBAVR;AA1pB8GA,MAAAA,EAqqBxG,eAXN;AA1pB8GA,MAAAA,EAsqB1G,eAZJ;AAAA;;AAAA;AA1pB8GA,MAAAA,EAgqBtG,aANR;AA1pB8GA,MAAAA,EAgqBtG,+KANR;AAAA;AAAA;AAAA,eAa0C0M,yBAb1C;AAAA;AAAA;AAAA,eAaoH,CAACvK,kBAAD;AAbpH;AAAA;AAAA;;AAcA;AAAA,qDAxqB8GnC,EAwqB9G,mBAA2FoN,mBAA3F,EAA4H,CAAC;AACjHrK,IAAAA,IAAI,EAAE7C,SAD2G;AAEjH8C,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,cADX;AAEC0H,MAAAA,QAAQ,EAAE,YAFX;AAGCzH,MAAAA,QAAQ,EAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAbmB;AAcCwK,MAAAA,aAAa,EAAEhN,iBAAiB,CAACiN,IAdlC;AAeCxK,MAAAA,eAAe,EAAEhD,uBAAuB,CAACiD,MAf1C;AAgBC+F,MAAAA,SAAS,EAAE,CACP;AAAEF,QAAAA,OAAO,EAAEtH,OAAX;AAAoBuH,QAAAA,WAAW,EAAEkE;AAAjC,OADO,EAEP;AAAEnE,QAAAA,OAAO,EAAE1E,UAAX;AAAuB2E,QAAAA,WAAW,EAAEkE;AAApC,OAFO,CAhBZ;AAoBC9J,MAAAA,IAAI,EAAE;AACFC,QAAAA,KAAK,EAAE,UADL;AAEF,uCAA+B,gCAF7B;AAGF,sCAA8B,iBAH5B;AAIF,gCAAyB;AAJvB,OApBP;AA0BCqK,MAAAA,UAAU,EAAE,CAACzL,kBAAD;AA1Bb,KAAD;AAF2G,GAAD,CAA5H,QA8B4B;AAAE0L,IAAAA,UAAU,EAAE,CAAC;AAC3B9K,MAAAA,IAAI,EAAEpC,SADqB;AAE3BqC,MAAAA,IAAI,EAAE,CAAC0J,yBAAD,EAA4B;AAAEoB,QAAAA,MAAM,EAAE;AAAV,OAA5B;AAFqB,KAAD;AAAd,GA9B5B;AAAA;AAmCA;AACA;AACA;AACA;;;AACA,MAAMC,YAAY,GAAG,EAArB;;AACA,MAAMC,gCAAN,SAA+CzJ,UAA/C,CAA0D;AACtDjC,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGwK,SAAT;AACA,SAAKmB,UAAL,GAAkBF,YAAlB;AACA,SAAKG,aAAL,GAAqBH,YAAY,GAAG,CAApC;AACA,SAAKI,aAAL,GAAqBJ,YAAY,GAAG,EAApC;AACA,SAAKpK,KAAL,GAAa,EAAb;;AACA,SAAKyK,YAAL,GAAoB1H,CAAC,IAAIA,CAAzB;AACH;;AACDuE,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,QAAIA,OAAO,CAACmD,OAAZ,EAAqB;AACjB,UAAI,OAAOnD,OAAO,CAACmD,OAAR,CAAgBjC,YAAvB,KAAwC,UAA5C,EAAwD;AACpD,aAAKgC,YAAL,GAAoB,CAACtK,KAAD,EAAQwK,CAAR,KAAc,KAAKD,OAAL,CAAavK,KAAb,EAAoBwK,CAAC,CAACxI,IAAtB,CAAlC;AACH,OAFD,MAGK;AACD,aAAKsI,YAAL,GAAoB1H,CAAC,IAAIA,CAAzB;AACH;AACJ;AACJ;;AACDb,EAAAA,iBAAiB,CAACC,IAAD,EAAO;AACpB,SAAKnC,KAAL,GAAa,IAAI4K,KAAJ,CAAU,GAAGzI,IAAb,EAAmBrE,GAAnB,CAAuB,CAAC6M,CAAD,EAAI5H,CAAJ,KAAU,KAAK8H,UAAL,CAAgBF,CAAhB,EAAmB5H,CAAnB,CAAjC,CAAb;;AACA,SAAK5B,kBAAL,CAAwBa,IAAxB;AACH;;AACD6I,EAAAA,UAAU,CAACC,QAAD,EAAW3K,KAAX,EAAkB;AACxB,UAAMF,IAAI,GAAG,KAAK8K,WAAL,CAAiBD,QAAjB,EAA2B3K,KAA3B,CAAb;;AACA,UAAM2H,OAAO,GAAG,IAAIxJ,wBAAJ,CAA6BwM,QAA7B,CAAhB;;AACA,QAAI,KAAKlI,WAAL,CAAiB1C,QAArB,EAA+B;AAC3B4H,MAAAA,OAAO,CAACzH,KAAR,GAAgB,KAAKuC,WAAL,CAAiB1C,QAAjB,CAA0B4K,QAA1B,CAAhB;AACH,KAFD,MAGK;AACDhD,MAAAA,OAAO,CAACzH,KAAR,GAAgB,CAAhB;AACH;;AACD,WAAO;AACH8B,MAAAA,IAAI,EAAE2I,QADH;AAEHhD,MAAAA,OAFG;AAGHD,MAAAA,OAAO,EAAE5H;AAHN,KAAP;AAKH;;AArCqD;;AAuC1DoK,gCAAgC,CAACpL,IAAjC;AAAA;AAAA;AAAA,8GAvvB8G5C,EAuvB9G,uBAA6HgO,gCAA7H,SAA6HA,gCAA7H;AAAA;AAAA;;AACAA,gCAAgC,CAACnL,IAAjC,kBAxvB8G7C,EAwvB9G;AAAA,QAAiHgO,gCAAjH;AAAA;AAAA;AAAA;AAxvB8GhO,MAAAA,EAwvB9G,aAG2E0M,yBAH3E;AAxvB8G1M,MAAAA,EAwvB9G,aAG0MJ,wBAH1M;AAAA;;AAAA;AAAA;;AAxvB8GI,MAAAA,EAwvB9G,qBAxvB8GA,EAwvB9G;AAxvB8GA,MAAAA,EAwvB9G,qBAxvB8GA,EAwvB9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxvB8GA,MAAAA,EAwvB9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAxvB8GA,EAwvB9G,oBAA4gB,CACpgB;AAAEiJ,IAAAA,OAAO,EAAE1E,UAAX;AAAuB2E,IAAAA,WAAW,EAAE8E;AAApC,GADogB,EAEpgB;AAAE/E,IAAAA,OAAO,EAAEtH,OAAX;AAAoBuH,IAAAA,WAAW,EAAE8E;AAAjC,GAFogB,CAA5gB,GAxvB8GhO,EAwvB9G,6BAxvB8GA,EAwvB9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAxvB8GA,MAAAA,EA4vB1G,4BAJJ;AAxvB8GA,MAAAA,EA6vBxG,oDALN;AAxvB8GA,MAAAA,EAmwBtG,iGAXR;AAxvB8GA,MAAAA,EAswBxG,eAdN;AAxvB8GA,MAAAA,EAuwB1G,eAfJ;AAxvB8GA,MAAAA,EAwwB1G,yBAhBJ;AAAA;;AAAA;AAxvB8GA,MAAAA,EA+vBtG,aAPR;AAxvB8GA,MAAAA,EA+vBtG,2GAPR;AAxvB8GA,MAAAA,EAmwB/D,aAX/C;AAxvB8GA,MAAAA,EAmwB/D,mFAX/C;AAAA;AAAA;AAAA,eAiB0CL,IAAI,CAACC,wBAjB/C,EAiBmND,IAAI,CAACgP,yBAjBxN,EAiBoWhP,IAAI,CAACiP,eAjBzW,EAiBkiB9D,sCAjBliB,EAiBmpB4B,yBAjBnpB;AAAA;AAAA;AAAA;;AAkBA;AAAA,qDA1wB8G1M,EA0wB9G,mBAA2FgO,gCAA3F,EAAyI,CAAC;AAC9HjL,IAAAA,IAAI,EAAE7C,SADwH;AAE9H8C,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,6BADX;AAEC0H,MAAAA,QAAQ,EAAE,yBAFX;AAGCzH,MAAAA,QAAQ,EAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAjBmB;AAkBCwK,MAAAA,aAAa,EAAEhN,iBAAiB,CAACiN,IAlBlC;AAmBCxK,MAAAA,eAAe,EAAEhD,uBAAuB,CAACiD,MAnB1C;AAoBC+F,MAAAA,SAAS,EAAE,CACP;AAAEF,QAAAA,OAAO,EAAE1E,UAAX;AAAuB2E,QAAAA,WAAW,EAAE8E;AAApC,OADO,EAEP;AAAE/E,QAAAA,OAAO,EAAEtH,OAAX;AAAoBuH,QAAAA,WAAW,EAAE8E;AAAjC,OAFO,CApBZ;AAwBC1K,MAAAA,IAAI,EAAE;AACFC,QAAAA,KAAK,EAAE,UADL;AAEF,uCAA+B,gCAF7B;AAGF,sCAA8B,iBAH5B;AAIF,gCAAyB;AAJvB;AAxBP,KAAD;AAFwH,GAAD,CAAzI,QAiC4B;AAAEsK,IAAAA,UAAU,EAAE,CAAC;AAC3B9K,MAAAA,IAAI,EAAEpC,SADqB;AAE3BqC,MAAAA,IAAI,EAAE,CAAC0J,yBAAD,EAA4B;AAAEoB,QAAAA,MAAM,EAAE;AAAV,OAA5B;AAFqB,KAAD,CAAd;AAGZe,IAAAA,qBAAqB,EAAE,CAAC;AACxB9L,MAAAA,IAAI,EAAEpC,SADkB;AAExBqC,MAAAA,IAAI,EAAE,CAACpD,wBAAD,EAA2B;AAAEkO,QAAAA,MAAM,EAAE;AAAV,OAA3B;AAFkB,KAAD,CAHX;AAMZG,IAAAA,UAAU,EAAE,CAAC;AACblL,MAAAA,IAAI,EAAE3C;AADO,KAAD,CANA;AAQZ8N,IAAAA,aAAa,EAAE,CAAC;AAChBnL,MAAAA,IAAI,EAAE3C;AADU,KAAD,CARH;AAUZ+N,IAAAA,aAAa,EAAE,CAAC;AAChBpL,MAAAA,IAAI,EAAE3C;AADU,KAAD,CAVH;AAYZiO,IAAAA,OAAO,EAAE,CAAC;AACVtL,MAAAA,IAAI,EAAE3C;AADI,KAAD;AAZG,GAjC5B;AAAA;AAiDA;AACA;AACA;AACA;;;AACA,MAAM0O,yBAAyB,GAAG,CAC9BvK,UAD8B,EAE9BmI,yBAF8B,EAG9BU,mBAH8B,EAI9BxC,sBAJ8B,EAK9BtB,mBAL8B,EAM9BV,yBAN8B,EAO9BiE,0BAP8B,EAQ9BzD,mCAR8B,EAS9BC,mCAT8B,EAU9BmD,yBAV8B,EAW9B7D,6BAX8B,EAY9BtG,2BAZ8B,EAa9ByE,0BAb8B,EAc9BkH,gCAd8B,EAe9BlD,sCAf8B,EAgB9B7D,6BAhB8B,CAAlC;;AAkBA,MAAM8H,gBAAN,CAAuB;;AAEvBA,gBAAgB,CAACnM,IAAjB;AAAA,mBAA6GmM,gBAA7G;AAAA;;AACAA,gBAAgB,CAACC,IAAjB,kBAp1B8GhP,EAo1B9G;AAAA,QAA8G+O;AAA9G;AA+BAA,gBAAgB,CAACE,IAAjB,kBAn3B8GjP,EAm3B9G;AAAA,YAA0I,CAACN,UAAD,EAAaK,YAAb,EAA2Be,mBAA3B,EAAgDjB,eAAhD,CAA1I;AAAA;;AACA;AAAA,qDAp3B8GG,EAo3B9G,mBAA2F+O,gBAA3F,EAAyH,CAAC;AAC9GhM,IAAAA,IAAI,EAAEnC,QADwG;AAE9GoC,IAAAA,IAAI,EAAE,CAAC;AACCkM,MAAAA,OAAO,EAAE,CAACxP,UAAD,EAAaK,YAAb,EAA2Be,mBAA3B,EAAgDjB,eAAhD,CADV;AAECsP,MAAAA,YAAY,EAAE,CAACL,yBAAD,CAFf;AAGCM,MAAAA,OAAO,EAAE,CAACN,yBAAD;AAHV,KAAD;AAFwG,GAAD,CAAzH;AAAA;AASA;AACA;AACA;AACA;;;AACA,MAAMO,eAAN,CAAsB;AAClB/M,EAAAA,WAAW,CAACgN,iBAAD,EAAoBzL,QAApB,EAA8BkG,YAA9B,EAA4CwF,WAA5C,EAAyD;AAChE,SAAKD,iBAAL,GAAyBA,iBAAzB;AACA,SAAKzL,QAAL,GAAgBA,QAAhB;AACA,SAAKkG,YAAL,GAAoBA,YAApB;AACA,SAAKwF,WAAL,GAAmBA,WAAnB;AACH;;AACDC,EAAAA,WAAW,CAAC5L,IAAD,EAAOI,KAAP,EAAcyL,WAAd,EAA2BC,SAA3B,EAAsC;AAC7C,UAAMC,QAAQ,GAAG,KAAKL,iBAAL,CAAuB1L,IAAvB,EAA6BI,KAA7B,CAAjB;AACAyL,IAAAA,WAAW,CAACG,IAAZ,CAAiBD,QAAjB;;AACA,QAAI,KAAK5F,YAAL,CAAkB4F,QAAlB,CAAJ,EAAiC;AAC7B,YAAME,aAAa,GAAG,KAAKN,WAAL,CAAiB3L,IAAjB,CAAtB;;AACA,UAAIiM,aAAJ,EAAmB;AACf,YAAItB,KAAK,CAACuB,OAAN,CAAcD,aAAd,CAAJ,EAAkC;AAC9B,eAAKE,eAAL,CAAqBF,aAArB,EAAoC7L,KAApC,EAA2CyL,WAA3C,EAAwDC,SAAxD;AACH,SAFD,MAGK;AACDG,UAAAA,aAAa,CAACvK,IAAd,CAAmB9D,IAAI,CAAC,CAAD,CAAvB,EAA4B+D,SAA5B,CAAsCyK,QAAQ,IAAI;AAC9C,iBAAKD,eAAL,CAAqBC,QAArB,EAA+BhM,KAA/B,EAAsCyL,WAAtC,EAAmDC,SAAnD;AACH,WAFD;AAGH;AACJ;AACJ;;AACD,WAAOD,WAAP;AACH;;AACDM,EAAAA,eAAe,CAACC,QAAD,EAAWhM,KAAX,EAAkByL,WAAlB,EAA+BC,SAA/B,EAA0C;AACrDM,IAAAA,QAAQ,CAACC,OAAT,CAAiB,CAACC,KAAD,EAAQpM,KAAR,KAAkB;AAC/B,YAAMqM,cAAc,GAAGT,SAAS,CAACU,KAAV,EAAvB;AACAD,MAAAA,cAAc,CAACP,IAAf,CAAoB9L,KAAK,KAAKkM,QAAQ,CAAC5L,MAAT,GAAkB,CAAhD;AACA,WAAKoL,WAAL,CAAiBU,KAAjB,EAAwBlM,KAAK,GAAG,CAAhC,EAAmCyL,WAAnC,EAAgDU,cAAhD;AACH,KAJD;AAKH;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,YAAY,CAACC,cAAD,EAAiB;AACzB,UAAMb,WAAW,GAAG,EAApB;AACAa,IAAAA,cAAc,CAACL,OAAf,CAAuBrM,IAAI,IAAI,KAAK4L,WAAL,CAAiB5L,IAAjB,EAAuB,CAAvB,EAA0B6L,WAA1B,EAAuC,EAAvC,CAA/B;AACA,WAAOA,WAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIc,EAAAA,oBAAoB,CAAC5M,KAAD,EAAQ4C,WAAR,EAAqB;AACrC,UAAMiK,OAAO,GAAG,EAAhB;AACA,UAAMC,aAAa,GAAG,EAAtB;AACAA,IAAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,IAAnB;AACA9M,IAAAA,KAAK,CAACsM,OAAN,CAAcrM,IAAI,IAAI;AAClB,UAAI8M,MAAM,GAAG,IAAb;;AACA,WAAK,IAAIhK,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAK7C,QAAL,CAAcD,IAAd,CAArB,EAA0C8C,CAAC,EAA3C,EAA+C;AAC3CgK,QAAAA,MAAM,GAAGA,MAAM,IAAID,aAAa,CAAC/J,CAAD,CAAhC;AACH;;AACD,UAAIgK,MAAJ,EAAY;AACRF,QAAAA,OAAO,CAACZ,IAAR,CAAahM,IAAb;AACH;;AACD,UAAI,KAAKmG,YAAL,CAAkBnG,IAAlB,CAAJ,EAA6B;AACzB6M,QAAAA,aAAa,CAAC,KAAK5M,QAAL,CAAcD,IAAd,IAAsB,CAAvB,CAAb,GAAyC2C,WAAW,CAACwC,UAAZ,CAAuBnF,IAAvB,CAAzC;AACH;AACJ,KAXD;AAYA,WAAO4M,OAAP;AACH;;AA/DiB;;AAiEtB,MAAMG,oBAAN,SAAmCvO,UAAnC,CAA8C;AAC1CE,EAAAA,WAAW,CAACsO,YAAD,EAAeC,cAAf,EAA+BC,WAAW,GAAG,EAA7C,EAAiD;AACxD;AACA,SAAKF,YAAL,GAAoBA,YAApB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKE,cAAL,GAAsB,IAAI1P,eAAJ,CAAoB,EAApB,CAAtB;AACA,SAAK2P,aAAL,GAAqB,IAAI3P,eAAJ,CAAoB,EAApB,CAArB;AACA,SAAK4P,KAAL,GAAa,IAAI5P,eAAJ,CAAoByP,WAApB,CAAb;AACA,SAAKI,SAAL;AACH;;AACDC,EAAAA,OAAO,CAAC/L,KAAD,EAAQ;AACX,SAAK6L,KAAL,CAAWtL,IAAX,CAAgBP,KAAhB;;AACA,SAAK8L,SAAL;AACH;;AACDE,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKH,KAAL,CAAWI,QAAX,EAAP;AACH;;AACDC,EAAAA,OAAO,CAACC,gBAAD,EAAmB;AACtB,UAAMrG,OAAO,GAAG,CAACqG,gBAAgB,CAACC,UAAlB,EAA8B,KAAKZ,YAAL,CAAkBa,cAAlB,CAAiCC,OAA/D,EAAwE,KAAKX,cAA7E,CAAhB;AACA,WAAO3P,KAAK,CAAC,GAAG8J,OAAJ,CAAL,CAAkB5F,IAAlB,CAAuB7D,GAAG,CAAC,MAAM;AACpC,WAAKuP,aAAL,CAAmBrL,IAAnB,CAAwB,KAAKkL,cAAL,CAAoBN,oBAApB,CAAyC,KAAKQ,cAAL,CAAoB3L,KAA7D,EAAoE,KAAKwL,YAAzE,CAAxB;;AACA,aAAO,KAAKI,aAAL,CAAmB5L,KAA1B;AACH,KAHgC,CAA1B,CAAP;AAIH;;AACDuM,EAAAA,UAAU,GAAG,CACT;AACH;;AACDT,EAAAA,SAAS,GAAG;AACR,SAAKH,cAAL,CAAoBpL,IAApB,CAAyB,KAAKkL,cAAL,CAAoBR,YAApB,CAAiC,KAAKe,OAAL,EAAjC,CAAzB;;AACA,SAAKR,YAAL,CAAkB3I,SAAlB,GAA8B,KAAK8I,cAAL,CAAoB3L,KAAlD;AACH;;AA9ByC;AAiC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASuL,oBAAT,EAA+BtB,eAA/B,EAAgDhN,2BAAhD,EAA6EiH,mBAA7E,EAAkGsB,sBAAlG,EAA0H3D,6BAA1H,EAAyJH,0BAAzJ,EAAqL6B,6BAArL,EAAoN6D,yBAApN,EAA+OE,yBAA/O,EAA0QG,0BAA1Q,EAAsSxD,mCAAtS,EAA2UT,yBAA3U,EAAsWQ,mCAAtW,EAA2Y7E,UAA3Y,EAAuZ6I,mBAAvZ,EAA4a2B,gBAA5a,EAA8bjE,sCAA9b,EAAsekD,gCAAte,EAAwgB9J,cAAxgB,EAAwhBR,SAAxhB","sourcesContent":["import * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i1$2 from '@angular/cdk/scrolling';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, Host, Optional, Directive, Inject, ViewEncapsulation, ViewChild, NgModule } from '@angular/core';\nimport * as i1 from 'ng-zorro-antd/core/no-animation';\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport { __decorate } from 'tslib';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject, animationFrameScheduler, asapScheduler, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, auditTime, take, map } from 'rxjs/operators';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeToggle, CdkTreeNodeDef, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet, CdkTreeNodePadding, CdkTreeNodeOutletContext } from '@angular/cdk/tree';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { treeCollapseMotion } from 'ng-zorro-antd/core/animation';\nimport { DataSource } from '@angular/cdk/collections';\n\nclass NzTreeNodeCheckboxComponent {\n    constructor() {\n        this.nzClick = new EventEmitter();\n    }\n    onClick(e) {\n        if (!this.nzDisabled) {\n            this.nzClick.emit(e);\n        }\n    }\n}\nNzTreeNodeCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeCheckboxComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nNzTreeNodeCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeNodeCheckboxComponent, selector: \"nz-tree-node-checkbox:not([builtin])\", inputs: { nzChecked: \"nzChecked\", nzIndeterminate: \"nzIndeterminate\", nzDisabled: \"nzDisabled\" }, outputs: { nzClick: \"nzClick\" }, host: { listeners: { \"click\": \"onClick($event)\" }, properties: { \"class.ant-tree-checkbox-checked\": \"nzChecked\", \"class.ant-tree-checkbox-indeterminate\": \"nzIndeterminate\", \"class.ant-tree-checkbox-disabled\": \"nzDisabled\" }, classAttribute: \"ant-tree-checkbox\" }, ngImport: i0, template: ` <span class=\"ant-tree-checkbox-inner\"></span> `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\n__decorate([\n    InputBoolean()\n], NzTreeNodeCheckboxComponent.prototype, \"nzDisabled\", void 0);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeCheckboxComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'nz-tree-node-checkbox:not([builtin])',\n                    template: ` <span class=\"ant-tree-checkbox-inner\"></span> `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    preserveWhitespaces: false,\n                    host: {\n                        class: 'ant-tree-checkbox',\n                        '[class.ant-tree-checkbox-checked]': `nzChecked`,\n                        '[class.ant-tree-checkbox-indeterminate]': `nzIndeterminate`,\n                        '[class.ant-tree-checkbox-disabled]': `nzDisabled`,\n                        '(click)': 'onClick($event)'\n                    }\n                }]\n        }], propDecorators: { nzChecked: [{\n                type: Input\n            }], nzIndeterminate: [{\n                type: Input\n            }], nzDisabled: [{\n                type: Input\n            }], nzClick: [{\n                type: Output\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst getParent = (nodes, node, getLevel) => {\n    let index = nodes.indexOf(node);\n    if (index < 0) {\n        return null;\n    }\n    const level = getLevel(node);\n    for (index--; index >= 0; index--) {\n        const preLevel = getLevel(nodes[index]);\n        if (preLevel + 1 === level) {\n            return nodes[index];\n        }\n        if (preLevel + 1 < level) {\n            return null;\n        }\n    }\n    return null;\n};\nconst getNextSibling = (nodes, node, getLevel, _index) => {\n    let index = typeof _index !== 'undefined' ? _index : nodes.indexOf(node);\n    if (index < 0) {\n        return null;\n    }\n    const level = getLevel(node);\n    for (index++; index < nodes.length; index++) {\n        const nextLevel = getLevel(nodes[index]);\n        if (nextLevel < level) {\n            return null;\n        }\n        if (nextLevel === level) {\n            return nodes[index];\n        }\n    }\n    return null;\n};\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzNodeBase extends CdkTreeNode {\n}\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass NzTreeView extends CdkTree {\n    constructor(differs, changeDetectorRef, noAnimation, directionality) {\n        super(differs, changeDetectorRef);\n        this.differs = differs;\n        this.changeDetectorRef = changeDetectorRef;\n        this.noAnimation = noAnimation;\n        this.directionality = directionality;\n        this.destroy$ = new Subject();\n        this.dir = 'ltr';\n        this._dataSourceChanged = new Subject();\n        this.nzDirectoryTree = false;\n        this.nzBlockNode = false;\n    }\n    get dataSource() {\n        return super.dataSource;\n    }\n    set dataSource(dataSource) {\n        super.dataSource = dataSource;\n    }\n    ngOnInit() {\n        var _a;\n        super.ngOnInit();\n        if (this.directionality) {\n            this.dir = this.directionality.value;\n            (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe((direction) => {\n                this.dir = direction;\n                this.changeDetectorRef.detectChanges();\n            });\n        }\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n    renderNodeChanges(data, dataDiffer, viewContainer, parentData) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n        this._dataSourceChanged.next();\n    }\n}\nNzTreeView.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeView, deps: [{ token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }, { token: i1.NzNoAnimationDirective, host: true, optional: true }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nNzTreeView.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeView, selector: \"ng-component\", inputs: { treeControl: [\"nzTreeControl\", \"treeControl\"], dataSource: [\"nzDataSource\", \"dataSource\"], nzDirectoryTree: \"nzDirectoryTree\", nzBlockNode: \"nzBlockNode\" }, usesInheritance: true, ngImport: i0, template: '', isInline: true });\n__decorate([\n    InputBoolean()\n], NzTreeView.prototype, \"nzDirectoryTree\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeView.prototype, \"nzBlockNode\", void 0);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeView, decorators: [{\n            type: Component,\n            args: [{ template: '' }]\n        }], ctorParameters: function () {\n        return [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }, { type: i1.NzNoAnimationDirective, decorators: [{\n                        type: Host\n                    }, {\n                        type: Optional\n                    }] }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { treeControl: [{\n                type: Input,\n                args: ['nzTreeControl']\n            }], dataSource: [{\n                type: Input,\n                args: ['nzDataSource']\n            }], nzDirectoryTree: [{\n                type: Input\n            }], nzBlockNode: [{\n                type: Input\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n/**\n * [true, false, false, true] => 1001\n */\nfunction booleanArrayToString(arr) {\n    return arr.map(i => (i ? 1 : 0)).join('');\n}\nconst BUILD_INDENTS_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\nclass NzTreeNodeIndentsComponent {\n    constructor() {\n        this.indents = [];\n    }\n}\nNzTreeNodeIndentsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeIndentsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nNzTreeNodeIndentsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeNodeIndentsComponent, selector: \"nz-tree-node-indents\", inputs: { indents: \"indents\" }, host: { classAttribute: \"ant-tree-indent\" }, ngImport: i0, template: `\n    <span class=\"ant-tree-indent-unit\" [class.ant-tree-indent-unit-end]=\"!isEnd\" *ngFor=\"let isEnd of indents\"></span>\n  `, isInline: true, directives: [{ type: i1$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeIndentsComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'nz-tree-node-indents',\n                    template: `\n    <span class=\"ant-tree-indent-unit\" [class.ant-tree-indent-unit-end]=\"!isEnd\" *ngFor=\"let isEnd of indents\"></span>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        class: 'ant-tree-indent'\n                    }\n                }]\n        }], propDecorators: { indents: [{\n                type: Input\n            }] } });\nclass NzTreeNodeIndentLineDirective {\n    constructor(treeNode, tree, cdr) {\n        this.treeNode = treeNode;\n        this.tree = tree;\n        this.cdr = cdr;\n        this.isLast = 'unset';\n        this.isLeaf = false;\n        this.preNodeRef = null;\n        this.nextNodeRef = null;\n        this.currentIndents = '';\n        this.buildIndents();\n        this.checkLast();\n        /**\n         * The dependent data (TreeControl.dataNodes) can be set after node instantiation,\n         * and setting the indents can cause frame rate loss if it is set too often.\n         */\n        this.changeSubscription = merge(this.treeNode._dataChanges, tree._dataSourceChanged)\n            .pipe(auditTime(0, BUILD_INDENTS_SCHEDULER))\n            .subscribe(() => {\n            this.buildIndents();\n            this.checkAdjacent();\n            this.cdr.markForCheck();\n        });\n    }\n    getIndents() {\n        const indents = [];\n        const nodes = this.tree.treeControl.dataNodes;\n        const getLevel = this.tree.treeControl.getLevel;\n        let parent = getParent(nodes, this.treeNode.data, getLevel);\n        while (parent) {\n            const parentNextSibling = getNextSibling(nodes, parent, getLevel);\n            if (parentNextSibling) {\n                indents.unshift(true);\n            }\n            else {\n                indents.unshift(false);\n            }\n            parent = getParent(nodes, parent, getLevel);\n        }\n        return indents;\n    }\n    buildIndents() {\n        if (this.treeNode.data) {\n            const indents = this.getIndents();\n            const diffString = booleanArrayToString(indents);\n            if (diffString !== this.currentIndents) {\n                this.treeNode.setIndents(this.getIndents());\n                this.currentIndents = diffString;\n            }\n        }\n    }\n    /**\n     * We need to add an class name for the last child node,\n     * this result can also be affected when the adjacent nodes are changed.\n     */\n    checkAdjacent() {\n        const nodes = this.tree.treeControl.dataNodes;\n        const index = nodes.indexOf(this.treeNode.data);\n        const preNode = nodes[index - 1] || null;\n        const nextNode = nodes[index + 1] || null;\n        if (this.nextNodeRef !== nextNode || this.preNodeRef !== preNode) {\n            this.checkLast(index);\n        }\n        this.preNodeRef = preNode;\n        this.nextNodeRef = nextNode;\n    }\n    checkLast(index) {\n        const nodes = this.tree.treeControl.dataNodes;\n        this.isLeaf = this.treeNode.isLeaf;\n        this.isLast = !getNextSibling(nodes, this.treeNode.data, this.tree.treeControl.getLevel, index);\n    }\n    ngOnDestroy() {\n        this.preNodeRef = null;\n        this.nextNodeRef = null;\n        this.changeSubscription.unsubscribe();\n    }\n}\nNzTreeNodeIndentLineDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeIndentLineDirective, deps: [{ token: NzNodeBase }, { token: NzTreeView }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\nNzTreeNodeIndentLineDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeNodeIndentLineDirective, selector: \"nz-tree-node[nzTreeNodeIndentLine]\", host: { properties: { \"class.ant-tree-treenode-leaf-last\": \"isLast && isLeaf\" }, classAttribute: \"ant-tree-show-line\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeIndentLineDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'nz-tree-node[nzTreeNodeIndentLine]',\n                    host: {\n                        class: 'ant-tree-show-line',\n                        '[class.ant-tree-treenode-leaf-last]': 'isLast && isLeaf'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: NzNodeBase }, { type: NzTreeView }, { type: i0.ChangeDetectorRef }]; } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNodeNoopToggleDirective {\n}\nNzTreeNodeNoopToggleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeNoopToggleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nNzTreeNodeNoopToggleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeNodeNoopToggleDirective, selector: \"nz-tree-node-toggle[nzTreeNodeNoopToggle], [nzTreeNodeNoopToggle]\", host: { classAttribute: \"ant-tree-switcher ant-tree-switcher-noop\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeNoopToggleDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'nz-tree-node-toggle[nzTreeNodeNoopToggle], [nzTreeNodeNoopToggle]',\n                    host: {\n                        class: 'ant-tree-switcher ant-tree-switcher-noop'\n                    }\n                }]\n        }] });\nclass NzTreeNodeToggleDirective extends CdkTreeNodeToggle {\n    get recursive() {\n        return this._recursive;\n    }\n    set recursive(value) {\n        this._recursive = coerceBooleanProperty(value);\n    }\n    get isExpanded() {\n        return this._treeNode.isExpanded;\n    }\n}\nNzTreeNodeToggleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeToggleDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nNzTreeNodeToggleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeNodeToggleDirective, selector: \"nz-tree-node-toggle:not([nzTreeNodeNoopToggle]), [nzTreeNodeToggle]\", inputs: { recursive: [\"nzTreeNodeToggleRecursive\", \"recursive\"] }, host: { properties: { \"class.ant-tree-switcher_open\": \"isExpanded\", \"class.ant-tree-switcher_close\": \"!isExpanded\" }, classAttribute: \"ant-tree-switcher\" }, providers: [{ provide: CdkTreeNodeToggle, useExisting: NzTreeNodeToggleDirective }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeToggleDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'nz-tree-node-toggle:not([nzTreeNodeNoopToggle]), [nzTreeNodeToggle]',\n                    providers: [{ provide: CdkTreeNodeToggle, useExisting: NzTreeNodeToggleDirective }],\n                    host: {\n                        class: 'ant-tree-switcher',\n                        '[class.ant-tree-switcher_open]': 'isExpanded',\n                        '[class.ant-tree-switcher_close]': '!isExpanded'\n                    }\n                }]\n        }], propDecorators: { recursive: [{\n                type: Input,\n                args: ['nzTreeNodeToggleRecursive']\n            }] } });\nclass NzTreeNodeToggleRotateIconDirective {\n}\nNzTreeNodeToggleRotateIconDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeToggleRotateIconDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nNzTreeNodeToggleRotateIconDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeNodeToggleRotateIconDirective, selector: \"[nz-icon][nzTreeNodeToggleRotateIcon]\", host: { classAttribute: \"ant-tree-switcher-icon\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeToggleRotateIconDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[nz-icon][nzTreeNodeToggleRotateIcon]',\n                    host: {\n                        class: 'ant-tree-switcher-icon'\n                    }\n                }]\n        }] });\nclass NzTreeNodeToggleActiveIconDirective {\n}\nNzTreeNodeToggleActiveIconDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeToggleActiveIconDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nNzTreeNodeToggleActiveIconDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeNodeToggleActiveIconDirective, selector: \"[nz-icon][nzTreeNodeToggleActiveIcon]\", host: { classAttribute: \"ant-tree-switcher-loading-icon\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeToggleActiveIconDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[nz-icon][nzTreeNodeToggleActiveIcon]',\n                    host: {\n                        class: 'ant-tree-switcher-loading-icon'\n                    }\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNodeComponent extends NzNodeBase {\n    constructor(elementRef, tree, renderer, cdr) {\n        super(elementRef, tree);\n        this.elementRef = elementRef;\n        this.tree = tree;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        this.indents = [];\n        this.disabled = false;\n        this.selected = false;\n        this.isLeaf = false;\n        this._elementRef.nativeElement.classList.add('ant-tree-treenode');\n    }\n    ngOnInit() {\n        this.isLeaf = !this.tree.treeControl.isExpandable(this.data);\n    }\n    disable() {\n        this.disabled = true;\n        this.updateDisabledClass();\n    }\n    enable() {\n        this.disabled = false;\n        this.updateDisabledClass();\n    }\n    select() {\n        this.selected = true;\n        this.updateSelectedClass();\n    }\n    deselect() {\n        this.selected = false;\n        this.updateSelectedClass();\n    }\n    setIndents(indents) {\n        this.indents = indents;\n        this.cdr.markForCheck();\n    }\n    updateSelectedClass() {\n        if (this.selected) {\n            this.renderer.addClass(this.elementRef.nativeElement, 'ant-tree-treenode-selected');\n        }\n        else {\n            this.renderer.removeClass(this.elementRef.nativeElement, 'ant-tree-treenode-selected');\n        }\n    }\n    updateDisabledClass() {\n        if (this.disabled) {\n            this.renderer.addClass(this.elementRef.nativeElement, 'ant-tree-treenode-disabled');\n        }\n        else {\n            this.renderer.removeClass(this.elementRef.nativeElement, 'ant-tree-treenode-disabled');\n        }\n    }\n}\nNzTreeNodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeComponent, deps: [{ token: i0.ElementRef }, { token: NzTreeView }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nNzTreeNodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeNodeComponent, selector: \"nz-tree-node:not([builtin])\", host: { properties: { \"class.ant-tree-treenode-switcher-open\": \"isExpanded\", \"class.ant-tree-treenode-switcher-close\": \"!isExpanded\" } }, providers: [\n        { provide: CdkTreeNode, useExisting: NzTreeNodeComponent },\n        { provide: NzNodeBase, useExisting: NzTreeNodeComponent }\n    ], exportAs: [\"nzTreeNode\"], usesInheritance: true, ngImport: i0, template: `\n    <nz-tree-node-indents [indents]=\"indents\" *ngIf=\"indents.length\"></nz-tree-node-indents>\n    <ng-content select=\"nz-tree-node-toggle, [nz-tree-node-toggle]\"></ng-content>\n    <nz-tree-node-toggle class=\"nz-tree-leaf-line-icon\" *ngIf=\"indents.length && isLeaf\" nzTreeNodeNoopToggle>\n      <span class=\"ant-tree-switcher-leaf-line\"></span>\n    </nz-tree-node-toggle>\n    <ng-content select=\"nz-tree-node-checkbox\"></ng-content>\n    <ng-content select=\"nz-tree-node-option\"></ng-content>\n    <ng-content></ng-content>\n  `, isInline: true, components: [{ type: NzTreeNodeIndentsComponent, selector: \"nz-tree-node-indents\", inputs: [\"indents\"] }], directives: [{ type: i1$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: NzTreeNodeNoopToggleDirective, selector: \"nz-tree-node-toggle[nzTreeNodeNoopToggle], [nzTreeNodeNoopToggle]\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'nz-tree-node:not([builtin])',\n                    exportAs: 'nzTreeNode',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    providers: [\n                        { provide: CdkTreeNode, useExisting: NzTreeNodeComponent },\n                        { provide: NzNodeBase, useExisting: NzTreeNodeComponent }\n                    ],\n                    template: `\n    <nz-tree-node-indents [indents]=\"indents\" *ngIf=\"indents.length\"></nz-tree-node-indents>\n    <ng-content select=\"nz-tree-node-toggle, [nz-tree-node-toggle]\"></ng-content>\n    <nz-tree-node-toggle class=\"nz-tree-leaf-line-icon\" *ngIf=\"indents.length && isLeaf\" nzTreeNodeNoopToggle>\n      <span class=\"ant-tree-switcher-leaf-line\"></span>\n    </nz-tree-node-toggle>\n    <ng-content select=\"nz-tree-node-checkbox\"></ng-content>\n    <ng-content select=\"nz-tree-node-option\"></ng-content>\n    <ng-content></ng-content>\n  `,\n                    host: {\n                        '[class.ant-tree-treenode-switcher-open]': 'isExpanded',\n                        '[class.ant-tree-treenode-switcher-close]': '!isExpanded'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NzTreeView }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; } });\nclass NzTreeNodeDefDirective extends CdkTreeNodeDef {\n}\nNzTreeNodeDefDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeDefDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nNzTreeNodeDefDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeNodeDefDirective, selector: \"[nzTreeNodeDef]\", inputs: { when: [\"nzTreeNodeDefWhen\", \"when\"] }, providers: [{ provide: CdkTreeNodeDef, useExisting: NzTreeNodeDefDirective }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeDefDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[nzTreeNodeDef]',\n                    providers: [{ provide: CdkTreeNodeDef, useExisting: NzTreeNodeDefDirective }]\n                }]\n        }], propDecorators: { when: [{\n                type: Input,\n                args: ['nzTreeNodeDefWhen']\n            }] } });\nclass NzTreeVirtualScrollNodeOutletDirective {\n    constructor(_viewContainerRef) {\n        this._viewContainerRef = _viewContainerRef;\n        this._viewRef = null;\n    }\n    ngOnChanges(changes) {\n        const recreateView = this.shouldRecreateView(changes);\n        if (recreateView) {\n            const viewContainerRef = this._viewContainerRef;\n            if (this._viewRef) {\n                viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));\n            }\n            this._viewRef = this.data\n                ? viewContainerRef.createEmbeddedView(this.data.nodeDef.template, this.data.context)\n                : null;\n            if (CdkTreeNode.mostRecentTreeNode && this._viewRef) {\n                CdkTreeNode.mostRecentTreeNode.data = this.data.data;\n            }\n        }\n        else if (this._viewRef && this.data.context) {\n            this.updateExistingContext(this.data.context);\n        }\n    }\n    shouldRecreateView(changes) {\n        const ctxChange = changes.data;\n        return ctxChange && this.hasContextShapeChanged(ctxChange);\n    }\n    hasContextShapeChanged(ctxChange) {\n        var _a, _b;\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            for (const propName of currCtxKeys) {\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                    return true;\n                }\n            }\n            return ((_a = ctxChange.previousValue) === null || _a === void 0 ? void 0 : _a.data) !== ((_b = ctxChange.currentValue) === null || _b === void 0 ? void 0 : _b.data);\n        }\n        return true;\n    }\n    updateExistingContext(ctx) {\n        for (const propName of Object.keys(ctx)) {\n            this._viewRef.context[propName] = this.data.context[propName];\n        }\n    }\n}\nNzTreeVirtualScrollNodeOutletDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeVirtualScrollNodeOutletDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\nNzTreeVirtualScrollNodeOutletDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeVirtualScrollNodeOutletDirective, selector: \"[nzTreeVirtualScrollNodeOutlet]\", inputs: { data: \"data\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeVirtualScrollNodeOutletDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[nzTreeVirtualScrollNodeOutlet]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\nclass NzTreeNodeOptionComponent {\n    constructor(treeNode) {\n        this.treeNode = treeNode;\n        this.nzSelected = false;\n        this.nzDisabled = false;\n        this.nzClick = new EventEmitter();\n    }\n    get isExpanded() {\n        return this.treeNode.isExpanded;\n    }\n    onClick(e) {\n        if (!this.nzDisabled) {\n            this.nzClick.emit(e);\n        }\n    }\n    ngOnChanges(changes) {\n        const { nzDisabled, nzSelected } = changes;\n        if (nzDisabled) {\n            if (nzDisabled.currentValue) {\n                this.treeNode.disable();\n            }\n            else {\n                this.treeNode.enable();\n            }\n        }\n        if (nzSelected) {\n            if (nzSelected.currentValue) {\n                this.treeNode.select();\n            }\n            else {\n                this.treeNode.deselect();\n            }\n        }\n    }\n}\nNzTreeNodeOptionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeOptionComponent, deps: [{ token: NzTreeNodeComponent }], target: i0.ɵɵFactoryTarget.Component });\nNzTreeNodeOptionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeNodeOptionComponent, selector: \"nz-tree-node-option\", inputs: { nzSelected: \"nzSelected\", nzDisabled: \"nzDisabled\" }, outputs: { nzClick: \"nzClick\" }, host: { listeners: { \"click\": \"onClick($event)\" }, properties: { \"class.ant-tree-node-content-wrapper-open\": \"isExpanded\", \"class.ant-tree-node-selected\": \"nzSelected\" }, classAttribute: \"ant-tree-node-content-wrapper\" }, usesOnChanges: true, ngImport: i0, template: ` <span class=\"ant-tree-title\"><ng-content></ng-content></span> `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\n__decorate([\n    InputBoolean()\n], NzTreeNodeOptionComponent.prototype, \"nzSelected\", void 0);\n__decorate([\n    InputBoolean()\n], NzTreeNodeOptionComponent.prototype, \"nzDisabled\", void 0);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeOptionComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'nz-tree-node-option',\n                    template: ` <span class=\"ant-tree-title\"><ng-content></ng-content></span> `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        class: 'ant-tree-node-content-wrapper',\n                        '[class.ant-tree-node-content-wrapper-open]': 'isExpanded',\n                        '[class.ant-tree-node-selected]': 'nzSelected',\n                        '(click)': 'onClick($event)'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: NzTreeNodeComponent }]; }, propDecorators: { nzSelected: [{\n                type: Input\n            }], nzDisabled: [{\n                type: Input\n            }], nzClick: [{\n                type: Output\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNodeOutletDirective {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nNzTreeNodeOutletDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeOutletDirective, deps: [{ token: i0.ViewContainerRef }, { token: CDK_TREE_NODE_OUTLET_NODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nNzTreeNodeOutletDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeNodeOutletDirective, selector: \"[nzTreeNodeOutlet]\", providers: [\n        {\n            provide: CdkTreeNodeOutlet,\n            useExisting: NzTreeNodeOutletDirective\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodeOutletDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[nzTreeNodeOutlet]',\n                    providers: [\n                        {\n                            provide: CdkTreeNodeOutlet,\n                            useExisting: NzTreeNodeOutletDirective\n                        }\n                    ]\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TREE_NODE_OUTLET_NODE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n\nclass NzTreeNodePaddingDirective extends CdkTreeNodePadding {\n    constructor() {\n        super(...arguments);\n        this._indent = 24;\n    }\n    get level() {\n        return this._level;\n    }\n    set level(value) {\n        this._setLevelInput(value);\n    }\n    get indent() {\n        return this._indent;\n    }\n    set indent(indent) {\n        this._setIndentInput(indent);\n    }\n}\nNzTreeNodePaddingDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodePaddingDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nNzTreeNodePaddingDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeNodePaddingDirective, selector: \"[nzTreeNodePadding]\", inputs: { level: [\"nzTreeNodePadding\", \"level\"], indent: [\"nzTreeNodePaddingIndent\", \"indent\"] }, providers: [{ provide: CdkTreeNodePadding, useExisting: NzTreeNodePaddingDirective }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeNodePaddingDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[nzTreeNodePadding]',\n                    providers: [{ provide: CdkTreeNodePadding, useExisting: NzTreeNodePaddingDirective }]\n                }]\n        }], propDecorators: { level: [{\n                type: Input,\n                args: ['nzTreeNodePadding']\n            }], indent: [{\n                type: Input,\n                args: ['nzTreeNodePaddingIndent']\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeViewComponent extends NzTreeView {\n    constructor() {\n        super(...arguments);\n        this._afterViewInit = false;\n    }\n    ngAfterViewInit() {\n        Promise.resolve().then(() => {\n            this._afterViewInit = true;\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n}\nNzTreeViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeViewComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nNzTreeViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeViewComponent, selector: \"nz-tree-view\", host: { properties: { \"class.ant-tree-block-node\": \"nzDirectoryTree || nzBlockNode\", \"class.ant-tree-directory\": \"nzDirectoryTree\", \"class.ant-tree-rtl\": \"dir === 'rtl'\" }, classAttribute: \"ant-tree\" }, providers: [\n        { provide: CdkTree, useExisting: NzTreeViewComponent },\n        { provide: NzTreeView, useExisting: NzTreeViewComponent }\n    ], viewQueries: [{ propertyName: \"nodeOutlet\", first: true, predicate: NzTreeNodeOutletDirective, descendants: true, static: true }], exportAs: [\"nzTreeView\"], usesInheritance: true, ngImport: i0, template: `\n    <div class=\"ant-tree-list-holder\">\n      <div\n        [@.disabled]=\"!_afterViewInit || noAnimation?.nzNoAnimation\"\n        [@treeCollapseMotion]=\"_nodeOutlet.viewContainer.length\"\n        class=\"ant-tree-list-holder-inner\"\n      >\n        <ng-container nzTreeNodeOutlet></ng-container>\n      </div>\n    </div>\n  `, isInline: true, directives: [{ type: NzTreeNodeOutletDirective, selector: \"[nzTreeNodeOutlet]\" }], animations: [treeCollapseMotion], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeViewComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'nz-tree-view',\n                    exportAs: 'nzTreeView',\n                    template: `\n    <div class=\"ant-tree-list-holder\">\n      <div\n        [@.disabled]=\"!_afterViewInit || noAnimation?.nzNoAnimation\"\n        [@treeCollapseMotion]=\"_nodeOutlet.viewContainer.length\"\n        class=\"ant-tree-list-holder-inner\"\n      >\n        <ng-container nzTreeNodeOutlet></ng-container>\n      </div>\n    </div>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    providers: [\n                        { provide: CdkTree, useExisting: NzTreeViewComponent },\n                        { provide: NzTreeView, useExisting: NzTreeViewComponent }\n                    ],\n                    host: {\n                        class: 'ant-tree',\n                        '[class.ant-tree-block-node]': 'nzDirectoryTree || nzBlockNode',\n                        '[class.ant-tree-directory]': 'nzDirectoryTree',\n                        '[class.ant-tree-rtl]': `dir === 'rtl'`\n                    },\n                    animations: [treeCollapseMotion]\n                }]\n        }], propDecorators: { nodeOutlet: [{\n                type: ViewChild,\n                args: [NzTreeNodeOutletDirective, { static: true }]\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst DEFAULT_SIZE = 28;\nclass NzTreeVirtualScrollViewComponent extends NzTreeView {\n    constructor() {\n        super(...arguments);\n        this.nzItemSize = DEFAULT_SIZE;\n        this.nzMinBufferPx = DEFAULT_SIZE * 5;\n        this.nzMaxBufferPx = DEFAULT_SIZE * 10;\n        this.nodes = [];\n        this.innerTrackBy = i => i;\n    }\n    ngOnChanges(changes) {\n        if (changes.trackBy) {\n            if (typeof changes.trackBy.currentValue === 'function') {\n                this.innerTrackBy = (index, n) => this.trackBy(index, n.data);\n            }\n            else {\n                this.innerTrackBy = i => i;\n            }\n        }\n    }\n    renderNodeChanges(data) {\n        this.nodes = new Array(...data).map((n, i) => this.createNode(n, i));\n        this._dataSourceChanged.next();\n    }\n    createNode(nodeData, index) {\n        const node = this._getNodeDef(nodeData, index);\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else {\n            context.level = 0;\n        }\n        return {\n            data: nodeData,\n            context,\n            nodeDef: node\n        };\n    }\n}\nNzTreeVirtualScrollViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeVirtualScrollViewComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nNzTreeVirtualScrollViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NzTreeVirtualScrollViewComponent, selector: \"nz-tree-virtual-scroll-view\", inputs: { nzItemSize: \"nzItemSize\", nzMinBufferPx: \"nzMinBufferPx\", nzMaxBufferPx: \"nzMaxBufferPx\", trackBy: \"trackBy\" }, host: { properties: { \"class.ant-tree-block-node\": \"nzDirectoryTree || nzBlockNode\", \"class.ant-tree-directory\": \"nzDirectoryTree\", \"class.ant-tree-rtl\": \"dir === 'rtl'\" }, classAttribute: \"ant-tree\" }, providers: [\n        { provide: NzTreeView, useExisting: NzTreeVirtualScrollViewComponent },\n        { provide: CdkTree, useExisting: NzTreeVirtualScrollViewComponent }\n    ], viewQueries: [{ propertyName: \"nodeOutlet\", first: true, predicate: NzTreeNodeOutletDirective, descendants: true, static: true }, { propertyName: \"virtualScrollViewport\", first: true, predicate: CdkVirtualScrollViewport, descendants: true, static: true }], exportAs: [\"nzTreeVirtualScrollView\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"ant-tree-list\">\n      <cdk-virtual-scroll-viewport\n        class=\"ant-tree-list-holder\"\n        [itemSize]=\"nzItemSize\"\n        [minBufferPx]=\"nzMinBufferPx\"\n        [maxBufferPx]=\"nzMaxBufferPx\"\n      >\n        <ng-container *cdkVirtualFor=\"let item of nodes; let i = index; trackBy: innerTrackBy\">\n          <ng-template nzTreeVirtualScrollNodeOutlet [data]=\"item\"></ng-template>\n        </ng-container>\n      </cdk-virtual-scroll-viewport>\n    </div>\n    <ng-container nzTreeNodeOutlet></ng-container>\n  `, isInline: true, components: [{ type: i1$2.CdkVirtualScrollViewport, selector: \"cdk-virtual-scroll-viewport\", inputs: [\"orientation\", \"appendOnly\"], outputs: [\"scrolledIndexChange\"] }], directives: [{ type: i1$2.CdkFixedSizeVirtualScroll, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: [\"itemSize\", \"minBufferPx\", \"maxBufferPx\"] }, { type: i1$2.CdkVirtualForOf, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: [\"cdkVirtualForOf\", \"cdkVirtualForTrackBy\", \"cdkVirtualForTemplate\", \"cdkVirtualForTemplateCacheSize\"] }, { type: NzTreeVirtualScrollNodeOutletDirective, selector: \"[nzTreeVirtualScrollNodeOutlet]\", inputs: [\"data\"] }, { type: NzTreeNodeOutletDirective, selector: \"[nzTreeNodeOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeVirtualScrollViewComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'nz-tree-virtual-scroll-view',\n                    exportAs: 'nzTreeVirtualScrollView',\n                    template: `\n    <div class=\"ant-tree-list\">\n      <cdk-virtual-scroll-viewport\n        class=\"ant-tree-list-holder\"\n        [itemSize]=\"nzItemSize\"\n        [minBufferPx]=\"nzMinBufferPx\"\n        [maxBufferPx]=\"nzMaxBufferPx\"\n      >\n        <ng-container *cdkVirtualFor=\"let item of nodes; let i = index; trackBy: innerTrackBy\">\n          <ng-template nzTreeVirtualScrollNodeOutlet [data]=\"item\"></ng-template>\n        </ng-container>\n      </cdk-virtual-scroll-viewport>\n    </div>\n    <ng-container nzTreeNodeOutlet></ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    providers: [\n                        { provide: NzTreeView, useExisting: NzTreeVirtualScrollViewComponent },\n                        { provide: CdkTree, useExisting: NzTreeVirtualScrollViewComponent }\n                    ],\n                    host: {\n                        class: 'ant-tree',\n                        '[class.ant-tree-block-node]': 'nzDirectoryTree || nzBlockNode',\n                        '[class.ant-tree-directory]': 'nzDirectoryTree',\n                        '[class.ant-tree-rtl]': `dir === 'rtl'`\n                    }\n                }]\n        }], propDecorators: { nodeOutlet: [{\n                type: ViewChild,\n                args: [NzTreeNodeOutletDirective, { static: true }]\n            }], virtualScrollViewport: [{\n                type: ViewChild,\n                args: [CdkVirtualScrollViewport, { static: true }]\n            }], nzItemSize: [{\n                type: Input\n            }], nzMinBufferPx: [{\n                type: Input\n            }], nzMaxBufferPx: [{\n                type: Input\n            }], trackBy: [{\n                type: Input\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst treeWithControlComponents = [\n    NzTreeView,\n    NzTreeNodeOutletDirective,\n    NzTreeViewComponent,\n    NzTreeNodeDefDirective,\n    NzTreeNodeComponent,\n    NzTreeNodeToggleDirective,\n    NzTreeNodePaddingDirective,\n    NzTreeNodeToggleRotateIconDirective,\n    NzTreeNodeToggleActiveIconDirective,\n    NzTreeNodeOptionComponent,\n    NzTreeNodeNoopToggleDirective,\n    NzTreeNodeCheckboxComponent,\n    NzTreeNodeIndentsComponent,\n    NzTreeVirtualScrollViewComponent,\n    NzTreeVirtualScrollNodeOutletDirective,\n    NzTreeNodeIndentLineDirective\n];\nclass NzTreeViewModule {\n}\nNzTreeViewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNzTreeViewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeViewModule, declarations: [NzTreeView,\n        NzTreeNodeOutletDirective,\n        NzTreeViewComponent,\n        NzTreeNodeDefDirective,\n        NzTreeNodeComponent,\n        NzTreeNodeToggleDirective,\n        NzTreeNodePaddingDirective,\n        NzTreeNodeToggleRotateIconDirective,\n        NzTreeNodeToggleActiveIconDirective,\n        NzTreeNodeOptionComponent,\n        NzTreeNodeNoopToggleDirective,\n        NzTreeNodeCheckboxComponent,\n        NzTreeNodeIndentsComponent,\n        NzTreeVirtualScrollViewComponent,\n        NzTreeVirtualScrollNodeOutletDirective,\n        NzTreeNodeIndentLineDirective], imports: [BidiModule, CommonModule, NzNoAnimationModule, ScrollingModule], exports: [NzTreeView,\n        NzTreeNodeOutletDirective,\n        NzTreeViewComponent,\n        NzTreeNodeDefDirective,\n        NzTreeNodeComponent,\n        NzTreeNodeToggleDirective,\n        NzTreeNodePaddingDirective,\n        NzTreeNodeToggleRotateIconDirective,\n        NzTreeNodeToggleActiveIconDirective,\n        NzTreeNodeOptionComponent,\n        NzTreeNodeNoopToggleDirective,\n        NzTreeNodeCheckboxComponent,\n        NzTreeNodeIndentsComponent,\n        NzTreeVirtualScrollViewComponent,\n        NzTreeVirtualScrollNodeOutletDirective,\n        NzTreeNodeIndentLineDirective] });\nNzTreeViewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeViewModule, imports: [[BidiModule, CommonModule, NzNoAnimationModule, ScrollingModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTreeViewModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, CommonModule, NzNoAnimationModule, ScrollingModule],\n                    declarations: [treeWithControlComponents],\n                    exports: [treeWithControlComponents]\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeFlattener {\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    flattenNode(node, level, resultNodes, parentMap) {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this.flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this.flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            const childParentMap = parentMap.slice();\n            childParentMap.push(index !== children.length - 1);\n            this.flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData) {\n        const resultNodes = [];\n        structuredData.forEach(node => this.flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        const results = [];\n        const currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\nclass NzTreeFlatDataSource extends DataSource {\n    constructor(_treeControl, _treeFlattener, initialData = []) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject(initialData);\n        this.flatNodes();\n    }\n    setData(value) {\n        this._data.next(value);\n        this.flatNodes();\n    }\n    getData() {\n        return this._data.getValue();\n    }\n    connect(collectionViewer) {\n        const changes = [collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData];\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n    flatNodes() {\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.getData()));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzTreeFlatDataSource, NzTreeFlattener, NzTreeNodeCheckboxComponent, NzTreeNodeComponent, NzTreeNodeDefDirective, NzTreeNodeIndentLineDirective, NzTreeNodeIndentsComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeOptionComponent, NzTreeNodeOutletDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeToggleDirective, NzTreeNodeToggleRotateIconDirective, NzTreeView, NzTreeViewComponent, NzTreeViewModule, NzTreeVirtualScrollNodeOutletDirective, NzTreeVirtualScrollViewComponent, getNextSibling, getParent };\n"]},"metadata":{},"sourceType":"module"}