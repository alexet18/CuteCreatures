{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Optional, ViewChild, TemplateRef, Host, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { zoomBigMotion } from 'ng-zorro-antd/core/animation';\nimport { isPresetColor } from 'ng-zorro-antd/core/color';\nimport { toBoolean, isNotNil, InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport * as i4 from 'ng-zorro-antd/core/overlay';\nimport { DEFAULT_TOOLTIP_POSITIONS, POSITION_MAP, getPlacementName, NzOverlayModule } from 'ng-zorro-antd/core/overlay';\nimport * as i1 from 'ng-zorro-antd/core/no-animation';\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport * as i2 from 'ng-zorro-antd/core/config';\nimport * as i3 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i3$1 from '@angular/cdk/overlay';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i6 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nconst _c0 = [\"overlay\"];\n\nfunction NzToolTipComponent_ng_template_0_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.nzTitle);\n  }\n}\n\nfunction NzToolTipComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelementStart(1, \"div\", 3);\n    i0.ɵɵelementStart(2, \"div\", 4);\n    i0.ɵɵelement(3, \"span\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 6);\n    i0.ɵɵtemplate(5, NzToolTipComponent_ng_template_0_ng_container_5_Template, 2, 1, \"ng-container\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"ant-tooltip-rtl\", ctx_r1.dir === \"rtl\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r1._classMap)(\"ngStyle\", ctx_r1.nzOverlayStyle)(\"@.disabled\", ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation)(\"nzNoAnimation\", ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation)(\"@zoomBigMotion\", \"active\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1._contentStyleMap);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1._contentStyleMap);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r1.nzTitle)(\"nzStringTemplateOutletContext\", ctx_r1.nzTitleContext);\n  }\n}\n\nlet NzTooltipBaseDirective = /*#__PURE__*/(() => {\n  class NzTooltipBaseDirective {\n    constructor(elementRef, hostView, resolver, renderer, noAnimation, nzConfigService) {\n      this.elementRef = elementRef;\n      this.hostView = hostView;\n      this.resolver = resolver;\n      this.renderer = renderer;\n      this.noAnimation = noAnimation;\n      this.nzConfigService = nzConfigService;\n      this.visibleChange = new EventEmitter();\n      this.internalVisible = false;\n      this.destroy$ = new Subject();\n      this.triggerDisposables = [];\n    }\n    /**\n     * This true title that would be used in other parts on this component.\n     */\n\n\n    get _title() {\n      return this.title || this.directiveTitle || null;\n    }\n\n    get _content() {\n      return this.content || this.directiveContent || null;\n    }\n\n    get _trigger() {\n      return typeof this.trigger !== 'undefined' ? this.trigger : 'hover';\n    }\n\n    get _placement() {\n      const p = this.placement;\n      return Array.isArray(p) && p.length > 0 ? p : typeof p === 'string' && p ? [p] : ['top'];\n    }\n\n    get _visible() {\n      return (typeof this.visible !== 'undefined' ? this.visible : this.internalVisible) || false;\n    }\n\n    get _mouseEnterDelay() {\n      return this.mouseEnterDelay || 0.15;\n    }\n\n    get _mouseLeaveDelay() {\n      return this.mouseLeaveDelay || 0.1;\n    }\n\n    get _overlayClassName() {\n      return this.overlayClassName || null;\n    }\n\n    get _overlayStyle() {\n      return this.overlayStyle || null;\n    }\n\n    getProxyPropertyMap() {\n      return {\n        noAnimation: ['noAnimation', () => !!this.noAnimation]\n      };\n    }\n\n    ngOnChanges(changes) {\n      const {\n        trigger\n      } = changes;\n\n      if (trigger && !trigger.isFirstChange()) {\n        this.registerTriggers();\n      }\n\n      if (this.component) {\n        this.updatePropertiesByChanges(changes);\n      }\n    }\n\n    ngAfterViewInit() {\n      this.createComponent();\n      this.registerTriggers();\n    }\n\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete(); // Clear toggling timer. Issue #3875 #4317 #4386\n\n      this.clearTogglingTimer();\n      this.removeTriggerListeners();\n    }\n\n    show() {\n      var _a;\n\n      (_a = this.component) === null || _a === void 0 ? void 0 : _a.show();\n    }\n\n    hide() {\n      var _a;\n\n      (_a = this.component) === null || _a === void 0 ? void 0 : _a.hide();\n    }\n    /**\n     * Force the component to update its position.\n     */\n\n\n    updatePosition() {\n      if (this.component) {\n        this.component.updatePosition();\n      }\n    }\n    /**\n     * Create a dynamic tooltip component. This method can be override.\n     */\n\n\n    createComponent() {\n      const componentRef = this.componentRef;\n      this.component = componentRef.instance; // Remove the component's DOM because it should be in the overlay container.\n\n      this.renderer.removeChild(this.renderer.parentNode(this.elementRef.nativeElement), componentRef.location.nativeElement);\n      this.component.setOverlayOrigin(this.origin || this.elementRef);\n      this.initProperties();\n      this.component.nzVisibleChange.pipe(distinctUntilChanged(), takeUntil(this.destroy$)).subscribe(visible => {\n        this.internalVisible = visible;\n        this.visibleChange.emit(visible);\n      });\n    }\n\n    registerTriggers() {\n      // When the method gets invoked, all properties has been synced to the dynamic component.\n      // After removing the old API, we can just check the directive's own `nzTrigger`.\n      const el = this.elementRef.nativeElement;\n      const trigger = this.trigger;\n      this.removeTriggerListeners();\n\n      if (trigger === 'hover') {\n        let overlayElement;\n        this.triggerDisposables.push(this.renderer.listen(el, 'mouseenter', () => {\n          this.delayEnterLeave(true, true, this._mouseEnterDelay);\n        }));\n        this.triggerDisposables.push(this.renderer.listen(el, 'mouseleave', () => {\n          var _a;\n\n          this.delayEnterLeave(true, false, this._mouseLeaveDelay);\n\n          if (((_a = this.component) === null || _a === void 0 ? void 0 : _a.overlay.overlayRef) && !overlayElement) {\n            overlayElement = this.component.overlay.overlayRef.overlayElement;\n            this.triggerDisposables.push(this.renderer.listen(overlayElement, 'mouseenter', () => {\n              this.delayEnterLeave(false, true, this._mouseEnterDelay);\n            }));\n            this.triggerDisposables.push(this.renderer.listen(overlayElement, 'mouseleave', () => {\n              this.delayEnterLeave(false, false, this._mouseLeaveDelay);\n            }));\n          }\n        }));\n      } else if (trigger === 'focus') {\n        this.triggerDisposables.push(this.renderer.listen(el, 'focusin', () => this.show()));\n        this.triggerDisposables.push(this.renderer.listen(el, 'focusout', () => this.hide()));\n      } else if (trigger === 'click') {\n        this.triggerDisposables.push(this.renderer.listen(el, 'click', e => {\n          e.preventDefault();\n          this.show();\n        }));\n      } // Else do nothing because user wants to control the visibility programmatically.\n\n    }\n\n    updatePropertiesByChanges(changes) {\n      this.updatePropertiesByKeys(Object.keys(changes));\n    }\n\n    updatePropertiesByKeys(keys) {\n      var _a;\n\n      const mappingProperties = Object.assign({\n        // common mappings\n        title: ['nzTitle', () => this._title],\n        directiveTitle: ['nzTitle', () => this._title],\n        content: ['nzContent', () => this._content],\n        directiveContent: ['nzContent', () => this._content],\n        trigger: ['nzTrigger', () => this._trigger],\n        placement: ['nzPlacement', () => this._placement],\n        visible: ['nzVisible', () => this._visible],\n        mouseEnterDelay: ['nzMouseEnterDelay', () => this._mouseEnterDelay],\n        mouseLeaveDelay: ['nzMouseLeaveDelay', () => this._mouseLeaveDelay],\n        overlayClassName: ['nzOverlayClassName', () => this._overlayClassName],\n        overlayStyle: ['nzOverlayStyle', () => this._overlayStyle],\n        arrowPointAtCenter: ['nzArrowPointAtCenter', () => this.arrowPointAtCenter]\n      }, this.getProxyPropertyMap());\n      (keys || Object.keys(mappingProperties).filter(key => !key.startsWith('directive'))).forEach(property => {\n        if (mappingProperties[property]) {\n          const [name, valueFn] = mappingProperties[property];\n          this.updateComponentValue(name, valueFn());\n        }\n      });\n      (_a = this.component) === null || _a === void 0 ? void 0 : _a.updateByDirective();\n    }\n\n    initProperties() {\n      this.updatePropertiesByKeys();\n    }\n\n    updateComponentValue(key, value) {\n      if (typeof value !== 'undefined') {\n        // @ts-ignore\n        this.component[key] = value;\n      }\n    }\n\n    delayEnterLeave(isOrigin, isEnter, delay = -1) {\n      if (this.delayTimer) {\n        this.clearTogglingTimer();\n      } else if (delay > 0) {\n        this.delayTimer = setTimeout(() => {\n          this.delayTimer = undefined;\n          isEnter ? this.show() : this.hide();\n        }, delay * 1000);\n      } else {\n        // `isOrigin` is used due to the tooltip will not hide immediately\n        // (may caused by the fade-out animation).\n        isEnter && isOrigin ? this.show() : this.hide();\n      }\n    }\n\n    removeTriggerListeners() {\n      this.triggerDisposables.forEach(dispose => dispose());\n      this.triggerDisposables.length = 0;\n    }\n\n    clearTogglingTimer() {\n      if (this.delayTimer) {\n        clearTimeout(this.delayTimer);\n        this.delayTimer = undefined;\n      }\n    }\n\n  }\n\n  NzTooltipBaseDirective.ɵfac = function NzTooltipBaseDirective_Factory(t) {\n    return new (t || NzTooltipBaseDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.NzNoAnimationDirective), i0.ɵɵdirectiveInject(i2.NzConfigService));\n  };\n\n  NzTooltipBaseDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NzTooltipBaseDirective,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return NzTooltipBaseDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // eslint-disable-next-line @angular-eslint/directive-class-suffix\n\n\nlet NzTooltipBaseComponent = /*#__PURE__*/(() => {\n  class NzTooltipBaseComponent {\n    constructor(cdr, directionality, noAnimation) {\n      this.cdr = cdr;\n      this.directionality = directionality;\n      this.noAnimation = noAnimation;\n      this.nzTitle = null;\n      this.nzContent = null;\n      this.nzArrowPointAtCenter = false;\n      this.nzOverlayStyle = {};\n      this.nzBackdrop = false;\n      this.nzVisibleChange = new Subject();\n      this._visible = false;\n      this._trigger = 'hover';\n      this.preferredPlacement = 'top';\n      this.dir = 'ltr';\n      this._classMap = {};\n      this._prefix = 'ant-tooltip';\n      this._positions = [...DEFAULT_TOOLTIP_POSITIONS];\n      this.destroy$ = new Subject();\n    }\n\n    set nzVisible(value) {\n      const visible = toBoolean(value);\n\n      if (this._visible !== visible) {\n        this._visible = visible;\n        this.nzVisibleChange.next(visible);\n      }\n    }\n\n    get nzVisible() {\n      return this._visible;\n    }\n\n    set nzTrigger(value) {\n      this._trigger = value;\n    }\n\n    get nzTrigger() {\n      return this._trigger;\n    }\n\n    set nzPlacement(value) {\n      const preferredPosition = value.map(placement => POSITION_MAP[placement]);\n      this._positions = [...preferredPosition, ...DEFAULT_TOOLTIP_POSITIONS];\n    }\n\n    ngOnInit() {\n      var _a;\n\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n      });\n      this.dir = this.directionality.value;\n    }\n\n    ngOnDestroy() {\n      this.nzVisibleChange.complete();\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n\n    show() {\n      if (this.nzVisible) {\n        return;\n      }\n\n      if (!this.isEmpty()) {\n        this.nzVisible = true;\n        this.nzVisibleChange.next(true);\n        this.cdr.detectChanges();\n      } // for ltr for overlay to display tooltip in correct placement in rtl direction.\n\n\n      if (this.origin && this.overlay && this.overlay.overlayRef && this.overlay.overlayRef.getDirection() === 'rtl') {\n        this.overlay.overlayRef.setDirection('ltr');\n      }\n    }\n\n    hide() {\n      if (!this.nzVisible) {\n        return;\n      }\n\n      this.nzVisible = false;\n      this.nzVisibleChange.next(false);\n      this.cdr.detectChanges();\n    }\n\n    updateByDirective() {\n      this.updateStyles();\n      this.cdr.detectChanges();\n      Promise.resolve().then(() => {\n        this.updatePosition();\n        this.updateVisibilityByTitle();\n      });\n    }\n    /**\n     * Force the component to update its position.\n     */\n\n\n    updatePosition() {\n      if (this.origin && this.overlay && this.overlay.overlayRef) {\n        this.overlay.overlayRef.updatePosition();\n      }\n    }\n\n    onPositionChange(position) {\n      this.preferredPlacement = getPlacementName(position);\n      this.updateStyles(); // We have to trigger immediate change detection or the element would blink.\n\n      this.cdr.detectChanges();\n    }\n\n    setOverlayOrigin(origin) {\n      this.origin = origin;\n      this.cdr.markForCheck();\n    }\n\n    onClickOutside(event) {\n      if (!this.origin.nativeElement.contains(event.target) && this.nzTrigger !== null) {\n        this.hide();\n      }\n    }\n    /**\n     * Hide the component while the content is empty.\n     */\n\n\n    updateVisibilityByTitle() {\n      if (this.isEmpty()) {\n        this.hide();\n      }\n    }\n\n    updateStyles() {\n      this._classMap = {\n        [this.nzOverlayClassName]: true,\n        [`${this._prefix}-placement-${this.preferredPlacement}`]: true\n      };\n    }\n\n  }\n\n  NzTooltipBaseComponent.ɵfac = function NzTooltipBaseComponent_Factory(t) {\n    return new (t || NzTooltipBaseComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.Directionality, 8), i0.ɵɵdirectiveInject(i1.NzNoAnimationDirective));\n  };\n\n  NzTooltipBaseComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NzTooltipBaseComponent,\n    viewQuery: function NzTooltipBaseComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.overlay = _t.first);\n      }\n    }\n  });\n  return NzTooltipBaseComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction isTooltipEmpty(value) {\n  return value instanceof TemplateRef ? false : value === '' || !isNotNil(value);\n}\n\nlet NzTooltipDirective = /*#__PURE__*/(() => {\n  class NzTooltipDirective extends NzTooltipBaseDirective {\n    constructor(elementRef, hostView, resolver, renderer, noAnimation) {\n      super(elementRef, hostView, resolver, renderer, noAnimation);\n      this.titleContext = null;\n      this.trigger = 'hover';\n      this.placement = 'top'; // eslint-disable-next-line @angular-eslint/no-output-rename\n\n      this.visibleChange = new EventEmitter();\n      this.componentRef = this.hostView.createComponent(NzToolTipComponent);\n    }\n\n    getProxyPropertyMap() {\n      return Object.assign(Object.assign({}, super.getProxyPropertyMap()), {\n        nzTooltipColor: ['nzColor', () => this.nzTooltipColor],\n        nzTooltipTitleContext: ['nzTitleContext', () => this.titleContext]\n      });\n    }\n\n  }\n\n  NzTooltipDirective.ɵfac = function NzTooltipDirective_Factory(t) {\n    return new (t || NzTooltipDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.NzNoAnimationDirective, 9));\n  };\n\n  NzTooltipDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NzTooltipDirective,\n    selectors: [[\"\", \"nz-tooltip\", \"\"]],\n    hostVars: 2,\n    hostBindings: function NzTooltipDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"ant-tooltip-open\", ctx.visible);\n      }\n    },\n    inputs: {\n      title: [\"nzTooltipTitle\", \"title\"],\n      titleContext: [\"nzTooltipTitleContext\", \"titleContext\"],\n      directiveTitle: [\"nz-tooltip\", \"directiveTitle\"],\n      trigger: [\"nzTooltipTrigger\", \"trigger\"],\n      placement: [\"nzTooltipPlacement\", \"placement\"],\n      origin: [\"nzTooltipOrigin\", \"origin\"],\n      visible: [\"nzTooltipVisible\", \"visible\"],\n      mouseEnterDelay: [\"nzTooltipMouseEnterDelay\", \"mouseEnterDelay\"],\n      mouseLeaveDelay: [\"nzTooltipMouseLeaveDelay\", \"mouseLeaveDelay\"],\n      overlayClassName: [\"nzTooltipOverlayClassName\", \"overlayClassName\"],\n      overlayStyle: [\"nzTooltipOverlayStyle\", \"overlayStyle\"],\n      arrowPointAtCenter: [\"nzTooltipArrowPointAtCenter\", \"arrowPointAtCenter\"],\n      nzTooltipColor: \"nzTooltipColor\"\n    },\n    outputs: {\n      visibleChange: \"nzTooltipVisibleChange\"\n    },\n    exportAs: [\"nzTooltip\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n\n  __decorate([InputBoolean()], NzTooltipDirective.prototype, \"arrowPointAtCenter\", void 0);\n\n  return NzTooltipDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NzToolTipComponent = /*#__PURE__*/(() => {\n  class NzToolTipComponent extends NzTooltipBaseComponent {\n    constructor(cdr, directionality, noAnimation) {\n      super(cdr, directionality, noAnimation);\n      this.nzTitle = null;\n      this.nzTitleContext = null;\n      this._contentStyleMap = {};\n    }\n\n    isEmpty() {\n      return isTooltipEmpty(this.nzTitle);\n    }\n\n    updateStyles() {\n      const isColorPreset = this.nzColor && isPresetColor(this.nzColor);\n      this._classMap = {\n        [this.nzOverlayClassName]: true,\n        [`${this._prefix}-placement-${this.preferredPlacement}`]: true,\n        [`${this._prefix}-${this.nzColor}`]: isColorPreset\n      };\n      this._contentStyleMap = {\n        backgroundColor: !!this.nzColor && !isColorPreset ? this.nzColor : null\n      };\n    }\n\n  }\n\n  NzToolTipComponent.ɵfac = function NzToolTipComponent_Factory(t) {\n    return new (t || NzToolTipComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.Directionality, 8), i0.ɵɵdirectiveInject(i1.NzNoAnimationDirective, 9));\n  };\n\n  NzToolTipComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzToolTipComponent,\n    selectors: [[\"nz-tooltip\"]],\n    exportAs: [\"nzTooltipComponent\"],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 5,\n    consts: [[\"cdkConnectedOverlay\", \"\", \"nzConnectedOverlay\", \"\", 3, \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPush\", \"nzArrowPointAtCenter\", \"overlayOutsideClick\", \"detach\", \"positionChange\"], [\"overlay\", \"cdkConnectedOverlay\"], [1, \"ant-tooltip\", 3, \"ngClass\", \"ngStyle\", \"nzNoAnimation\"], [1, \"ant-tooltip-content\"], [1, \"ant-tooltip-arrow\"], [1, \"ant-tooltip-arrow-content\", 3, \"ngStyle\"], [1, \"ant-tooltip-inner\", 3, \"ngStyle\"], [4, \"nzStringTemplateOutlet\", \"nzStringTemplateOutletContext\"]],\n    template: function NzToolTipComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NzToolTipComponent_ng_template_0_Template, 6, 11, \"ng-template\", 0, 1, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵlistener(\"overlayOutsideClick\", function NzToolTipComponent_Template_ng_template_overlayOutsideClick_0_listener($event) {\n          return ctx.onClickOutside($event);\n        })(\"detach\", function NzToolTipComponent_Template_ng_template_detach_0_listener() {\n          return ctx.hide();\n        })(\"positionChange\", function NzToolTipComponent_Template_ng_template_positionChange_0_listener($event) {\n          return ctx.onPositionChange($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"cdkConnectedOverlayOrigin\", ctx.origin)(\"cdkConnectedOverlayOpen\", ctx._visible)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayPush\", true)(\"nzArrowPointAtCenter\", ctx.nzArrowPointAtCenter);\n      }\n    },\n    directives: [i3$1.CdkConnectedOverlay, i4.NzConnectedOverlayDirective, i5.NgClass, i5.NgStyle, i1.NzNoAnimationDirective, i6.NzStringTemplateOutletDirective],\n    encapsulation: 2,\n    data: {\n      animation: [zoomBigMotion]\n    },\n    changeDetection: 0\n  });\n  return NzToolTipComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nlet NzToolTipModule = /*#__PURE__*/(() => {\n  class NzToolTipModule {}\n\n  NzToolTipModule.ɵfac = function NzToolTipModule_Factory(t) {\n    return new (t || NzToolTipModule)();\n  };\n\n  NzToolTipModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NzToolTipModule\n  });\n  NzToolTipModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[BidiModule, CommonModule, OverlayModule, NzOutletModule, NzOverlayModule, NzNoAnimationModule]]\n  });\n  return NzToolTipModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzToolTipComponent, NzToolTipModule, NzTooltipBaseComponent, NzTooltipBaseDirective, NzTooltipDirective, isTooltipEmpty }; //# sourceMappingURL=ng-zorro-antd-tooltip.mjs.map","map":null,"metadata":{},"sourceType":"module"}