{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\nimport { sum, isNumberFinite, toDecimal, isNil } from 'ng-zorro-antd/core/util';\nimport * as i1 from '@angular/platform-browser';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nclass NzAggregatePipe {\n  transform(value, method) {\n    if (!Array.isArray(value)) {\n      return value;\n    }\n\n    if (value.length === 0) {\n      return undefined;\n    }\n\n    switch (method) {\n      case 'sum':\n        return sum(value);\n\n      case 'avg':\n        return sum(value) / value.length;\n\n      case 'max':\n        return Math.max(...value);\n\n      case 'min':\n        return Math.min(...value);\n\n      default:\n        throw Error(`Invalid Pipe Arguments: Aggregate pipe doesn't support this type`);\n    }\n  }\n\n}\n\nNzAggregatePipe.ɵfac = function NzAggregatePipe_Factory(t) {\n  return new (t || NzAggregatePipe)();\n};\n\nNzAggregatePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"nzAggregate\",\n  type: NzAggregatePipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzAggregatePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzAggregate'\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzBytesPipe {\n  transform(input, decimal = 0, from = 'B', to) {\n    if (!(isNumberFinite(input) && isNumberFinite(decimal) && decimal % 1 === 0 && decimal >= 0)) {\n      return input;\n    }\n\n    let bytes = input;\n    let unit = from;\n\n    while (unit !== 'B') {\n      bytes *= 1024;\n      unit = NzBytesPipe.formats[unit].prev;\n    }\n\n    if (to) {\n      const format = NzBytesPipe.formats[to];\n      const result = toDecimal(NzBytesPipe.calculateResult(format, bytes), decimal);\n      return NzBytesPipe.formatResult(result, to);\n    }\n\n    for (const key in NzBytesPipe.formats) {\n      if (NzBytesPipe.formats.hasOwnProperty(key)) {\n        const format = NzBytesPipe.formats[key];\n\n        if (bytes < format.max) {\n          const result = toDecimal(NzBytesPipe.calculateResult(format, bytes), decimal);\n          return NzBytesPipe.formatResult(result, key);\n        }\n      }\n    }\n  }\n\n  static formatResult(result, unit) {\n    return `${result} ${unit}`;\n  }\n\n  static calculateResult(format, bytes) {\n    const prev = format.prev ? NzBytesPipe.formats[format.prev] : undefined;\n    return prev ? bytes / prev.max : bytes;\n  }\n\n}\n\nNzBytesPipe.formats = {\n  B: {\n    max: 1024\n  },\n  kB: {\n    max: Math.pow(1024, 2),\n    prev: 'B'\n  },\n  KB: {\n    max: Math.pow(1024, 2),\n    prev: 'B'\n  },\n  MB: {\n    max: Math.pow(1024, 3),\n    prev: 'kB'\n  },\n  GB: {\n    max: Math.pow(1024, 4),\n    prev: 'MB'\n  },\n  TB: {\n    max: Number.MAX_SAFE_INTEGER,\n    prev: 'GB'\n  }\n};\n\nNzBytesPipe.ɵfac = function NzBytesPipe_Factory(t) {\n  return new (t || NzBytesPipe)();\n};\n\nNzBytesPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"nzBytes\",\n  type: NzBytesPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzBytesPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzBytes'\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzToCssUnitPipe {\n  transform(value, defaultUnit = 'px') {\n    const absoluteLengthUnit = ['cm', 'mm', 'Q', 'in', 'pc', 'pt', 'px'];\n    const relativeLengthUnit = ['em', 'ex', 'ch', 'rem', '1h', 'vw', 'vh', 'vmin', 'vmax'];\n    const percentagesUnit = ['%'];\n    const listOfUnit = [...absoluteLengthUnit, ...relativeLengthUnit, ...percentagesUnit];\n    let unit = 'px';\n\n    if (listOfUnit.some(u => u === defaultUnit)) {\n      unit = defaultUnit;\n    }\n\n    return typeof value === 'number' ? `${value}${unit}` : `${value}`;\n  }\n\n}\n\nNzToCssUnitPipe.ɵfac = function NzToCssUnitPipe_Factory(t) {\n  return new (t || NzToCssUnitPipe)();\n};\n\nNzToCssUnitPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"nzToCssUnit\",\n  type: NzToCssUnitPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzToCssUnitPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzToCssUnit'\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzEllipsisPipe {\n  transform(value, length, suffix = '') {\n    if (typeof value !== 'string') {\n      return value;\n    }\n\n    const len = typeof length === 'undefined' ? value.length : length;\n\n    if (value.length <= len) {\n      return value;\n    }\n\n    return value.substring(0, len) + suffix;\n  }\n\n}\n\nNzEllipsisPipe.ɵfac = function NzEllipsisPipe_Factory(t) {\n  return new (t || NzEllipsisPipe)();\n};\n\nNzEllipsisPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"nzEllipsis\",\n  type: NzEllipsisPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzEllipsisPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzEllipsis'\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzSafeNullPipe {\n  transform(value, replace = '') {\n    if (isNil(value)) {\n      return replace;\n    }\n\n    return value;\n  }\n\n}\n\nNzSafeNullPipe.ɵfac = function NzSafeNullPipe_Factory(t) {\n  return new (t || NzSafeNullPipe)();\n};\n\nNzSafeNullPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"nzSafeNull\",\n  type: NzSafeNullPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzSafeNullPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzSafeNull'\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzSanitizerPipe {\n  constructor(sanitizer) {\n    this.sanitizer = sanitizer;\n  }\n\n  transform(value, type = 'html') {\n    switch (type) {\n      case 'html':\n        return this.sanitizer.bypassSecurityTrustHtml(value);\n\n      case 'style':\n        return this.sanitizer.bypassSecurityTrustStyle(value);\n\n      case 'url':\n        return this.sanitizer.bypassSecurityTrustUrl(value);\n\n      case 'resourceUrl':\n        return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n\n      default:\n        throw new Error(`Invalid safe type specified`);\n    }\n  }\n\n}\n\nNzSanitizerPipe.ɵfac = function NzSanitizerPipe_Factory(t) {\n  return new (t || NzSanitizerPipe)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n};\n\nNzSanitizerPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"nzSanitizer\",\n  type: NzSanitizerPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzSanitizerPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzSanitizer'\n    }]\n  }], function () {\n    return [{\n      type: i1.DomSanitizer\n    }];\n  }, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzTrimPipe {\n  // TODO(chensimeng) trimEnd, trimStart\n  transform(text) {\n    return text.trim();\n  }\n\n}\n\nNzTrimPipe.ɵfac = function NzTrimPipe_Factory(t) {\n  return new (t || NzTrimPipe)();\n};\n\nNzTrimPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"nzTrim\",\n  type: NzTrimPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTrimPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzTrim'\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nconst pipes = [NzToCssUnitPipe, NzSafeNullPipe, NzSanitizerPipe, NzTrimPipe, NzBytesPipe, NzAggregatePipe, NzEllipsisPipe];\n\nclass NzPipesModule {}\n\nNzPipesModule.ɵfac = function NzPipesModule_Factory(t) {\n  return new (t || NzPipesModule)();\n};\n\nNzPipesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NzPipesModule\n});\nNzPipesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzPipesModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [pipes],\n      declarations: [pipes]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzAggregatePipe, NzBytesPipe, NzEllipsisPipe, NzPipesModule, NzSafeNullPipe, NzSanitizerPipe, NzToCssUnitPipe, NzTrimPipe };","map":{"version":3,"sources":["/home/tudor/Desktop/Work/Git/Cute/node_modules/ng-zorro-antd/fesm2015/ng-zorro-antd-pipes.mjs"],"names":["CommonModule","i0","Pipe","NgModule","sum","isNumberFinite","toDecimal","isNil","i1","NzAggregatePipe","transform","value","method","Array","isArray","length","undefined","Math","max","min","Error","ɵfac","ɵpipe","type","args","name","NzBytesPipe","input","decimal","from","to","bytes","unit","formats","prev","format","result","calculateResult","formatResult","key","hasOwnProperty","B","kB","pow","KB","MB","GB","TB","Number","MAX_SAFE_INTEGER","NzToCssUnitPipe","defaultUnit","absoluteLengthUnit","relativeLengthUnit","percentagesUnit","listOfUnit","some","u","NzEllipsisPipe","suffix","len","substring","NzSafeNullPipe","replace","NzSanitizerPipe","constructor","sanitizer","bypassSecurityTrustHtml","bypassSecurityTrustStyle","bypassSecurityTrustUrl","bypassSecurityTrustResourceUrl","DomSanitizer","NzTrimPipe","text","trim","pipes","NzPipesModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"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","sourcesContent":["import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\nimport { sum, isNumberFinite, toDecimal, isNil } from 'ng-zorro-antd/core/util';\nimport * as i1 from '@angular/platform-browser';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzAggregatePipe {\n    transform(value, method) {\n        if (!Array.isArray(value)) {\n            return value;\n        }\n        if (value.length === 0) {\n            return undefined;\n        }\n        switch (method) {\n            case 'sum':\n                return sum(value);\n            case 'avg':\n                return sum(value) / value.length;\n            case 'max':\n                return Math.max(...value);\n            case 'min':\n                return Math.min(...value);\n            default:\n                throw Error(`Invalid Pipe Arguments: Aggregate pipe doesn't support this type`);\n        }\n    }\n}\nNzAggregatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzAggregatePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nNzAggregatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzAggregatePipe, name: \"nzAggregate\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzAggregatePipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'nzAggregate'\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzBytesPipe {\n    transform(input, decimal = 0, from = 'B', to) {\n        if (!(isNumberFinite(input) && isNumberFinite(decimal) && decimal % 1 === 0 && decimal >= 0)) {\n            return input;\n        }\n        let bytes = input;\n        let unit = from;\n        while (unit !== 'B') {\n            bytes *= 1024;\n            unit = NzBytesPipe.formats[unit].prev;\n        }\n        if (to) {\n            const format = NzBytesPipe.formats[to];\n            const result = toDecimal(NzBytesPipe.calculateResult(format, bytes), decimal);\n            return NzBytesPipe.formatResult(result, to);\n        }\n        for (const key in NzBytesPipe.formats) {\n            if (NzBytesPipe.formats.hasOwnProperty(key)) {\n                const format = NzBytesPipe.formats[key];\n                if (bytes < format.max) {\n                    const result = toDecimal(NzBytesPipe.calculateResult(format, bytes), decimal);\n                    return NzBytesPipe.formatResult(result, key);\n                }\n            }\n        }\n    }\n    static formatResult(result, unit) {\n        return `${result} ${unit}`;\n    }\n    static calculateResult(format, bytes) {\n        const prev = format.prev ? NzBytesPipe.formats[format.prev] : undefined;\n        return prev ? bytes / prev.max : bytes;\n    }\n}\nNzBytesPipe.formats = {\n    B: { max: 1024 },\n    kB: { max: Math.pow(1024, 2), prev: 'B' },\n    KB: { max: Math.pow(1024, 2), prev: 'B' },\n    MB: { max: Math.pow(1024, 3), prev: 'kB' },\n    GB: { max: Math.pow(1024, 4), prev: 'MB' },\n    TB: { max: Number.MAX_SAFE_INTEGER, prev: 'GB' }\n};\nNzBytesPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzBytesPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nNzBytesPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzBytesPipe, name: \"nzBytes\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzBytesPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'nzBytes'\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzToCssUnitPipe {\n    transform(value, defaultUnit = 'px') {\n        const absoluteLengthUnit = ['cm', 'mm', 'Q', 'in', 'pc', 'pt', 'px'];\n        const relativeLengthUnit = ['em', 'ex', 'ch', 'rem', '1h', 'vw', 'vh', 'vmin', 'vmax'];\n        const percentagesUnit = ['%'];\n        const listOfUnit = [...absoluteLengthUnit, ...relativeLengthUnit, ...percentagesUnit];\n        let unit = 'px';\n        if (listOfUnit.some(u => u === defaultUnit)) {\n            unit = defaultUnit;\n        }\n        return typeof value === 'number' ? `${value}${unit}` : `${value}`;\n    }\n}\nNzToCssUnitPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzToCssUnitPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nNzToCssUnitPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzToCssUnitPipe, name: \"nzToCssUnit\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzToCssUnitPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'nzToCssUnit'\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzEllipsisPipe {\n    transform(value, length, suffix = '') {\n        if (typeof value !== 'string') {\n            return value;\n        }\n        const len = typeof length === 'undefined' ? value.length : length;\n        if (value.length <= len) {\n            return value;\n        }\n        return value.substring(0, len) + suffix;\n    }\n}\nNzEllipsisPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzEllipsisPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nNzEllipsisPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzEllipsisPipe, name: \"nzEllipsis\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzEllipsisPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'nzEllipsis'\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzSafeNullPipe {\n    transform(value, replace = '') {\n        if (isNil(value)) {\n            return replace;\n        }\n        return value;\n    }\n}\nNzSafeNullPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzSafeNullPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nNzSafeNullPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzSafeNullPipe, name: \"nzSafeNull\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzSafeNullPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'nzSafeNull'\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzSanitizerPipe {\n    constructor(sanitizer) {\n        this.sanitizer = sanitizer;\n    }\n    transform(value, type = 'html') {\n        switch (type) {\n            case 'html':\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n            case 'resourceUrl':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            default:\n                throw new Error(`Invalid safe type specified`);\n        }\n    }\n}\nNzSanitizerPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzSanitizerPipe, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe });\nNzSanitizerPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzSanitizerPipe, name: \"nzSanitizer\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzSanitizerPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'nzSanitizer'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTrimPipe {\n    // TODO(chensimeng) trimEnd, trimStart\n    transform(text) {\n        return text.trim();\n    }\n}\nNzTrimPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTrimPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nNzTrimPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTrimPipe, name: \"nzTrim\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzTrimPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'nzTrim'\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst pipes = [\n    NzToCssUnitPipe,\n    NzSafeNullPipe,\n    NzSanitizerPipe,\n    NzTrimPipe,\n    NzBytesPipe,\n    NzAggregatePipe,\n    NzEllipsisPipe\n];\nclass NzPipesModule {\n}\nNzPipesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzPipesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNzPipesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzPipesModule, declarations: [NzToCssUnitPipe,\n        NzSafeNullPipe,\n        NzSanitizerPipe,\n        NzTrimPipe,\n        NzBytesPipe,\n        NzAggregatePipe,\n        NzEllipsisPipe], imports: [CommonModule], exports: [NzToCssUnitPipe,\n        NzSafeNullPipe,\n        NzSanitizerPipe,\n        NzTrimPipe,\n        NzBytesPipe,\n        NzAggregatePipe,\n        NzEllipsisPipe] });\nNzPipesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzPipesModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NzPipesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    exports: [pipes],\n                    declarations: [pipes]\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzAggregatePipe, NzBytesPipe, NzEllipsisPipe, NzPipesModule, NzSafeNullPipe, NzSanitizerPipe, NzToCssUnitPipe, NzTrimPipe };\n"]},"metadata":{},"sourceType":"module"}