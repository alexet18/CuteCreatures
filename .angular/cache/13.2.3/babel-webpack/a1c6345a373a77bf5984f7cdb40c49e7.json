{"ast":null,"code":"import { BidiModule } from '@angular/cdk/bidi';\nimport * as i1 from '@angular/cdk/overlay';\nimport { OverlayConfig, ConnectionPositionPair, OverlayModule } from '@angular/cdk/overlay';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Directive, Injectable, forwardRef, EventEmitter, TemplateRef, ElementRef, Component, ChangeDetectionStrategy, Optional, Inject, Input, Output, ViewChild, ViewChildren, ContentChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport * as i4 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { Subject, Observable, merge, fromEvent } from 'rxjs';\nimport { __decorate } from 'tslib';\nimport { ENTER, LEFT_ARROW, RIGHT_ARROW, TAB, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { startWith, switchMap } from 'rxjs/operators';\nimport { DEFAULT_MENTION_BOTTOM_POSITIONS, DEFAULT_MENTION_TOP_POSITIONS } from 'ng-zorro-antd/core/overlay';\nimport { getMentions, getCaretCoordinates, InputBoolean } from 'ng-zorro-antd/core/util';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nconst _c0 = [\"items\"];\n\nfunction NzMentionComponent_ng_template_1_li_1_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction NzMentionComponent_ng_template_1_li_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzMentionComponent_ng_template_1_li_1_ng_container_2_ng_container_1_Template, 1, 0, \"ng-container\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const suggestion_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.suggestionTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c1, suggestion_r4));\n  }\n}\n\nfunction NzMentionComponent_ng_template_1_li_1_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const suggestion_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵtextInterpolate(ctx_r9.nzValueWith(suggestion_r4));\n  }\n}\n\nfunction NzMentionComponent_ng_template_1_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 4, 5);\n    i0.ɵɵlistener(\"click\", function NzMentionComponent_ng_template_1_li_1_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const suggestion_r4 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.selectSuggestion(suggestion_r4);\n    });\n    i0.ɵɵtemplate(2, NzMentionComponent_ng_template_1_li_1_ng_container_2_Template, 2, 4, \"ng-container\", 6);\n    i0.ɵɵtemplate(3, NzMentionComponent_ng_template_1_li_1_ng_template_3_Template, 1, 1, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const i_r5 = ctx.index;\n\n    const _r8 = i0.ɵɵreference(4);\n\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"focus\", i_r5 === ctx_r2.activeIndex);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.suggestionTemplate)(\"ngIfElse\", _r8);\n  }\n}\n\nfunction NzMentionComponent_ng_template_1_li_2_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"i\", 11);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction NzMentionComponent_ng_template_1_li_2_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r16.nzNotFoundContent);\n  }\n}\n\nfunction NzMentionComponent_ng_template_1_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 9);\n    i0.ɵɵtemplate(1, NzMentionComponent_ng_template_1_li_2_span_1_Template, 2, 0, \"span\", 10);\n    i0.ɵɵtemplate(2, NzMentionComponent_ng_template_1_li_2_span_2_Template, 2, 1, \"span\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.nzLoading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.nzLoading);\n  }\n}\n\nfunction NzMentionComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 1);\n    i0.ɵɵtemplate(1, NzMentionComponent_ng_template_1_li_1_Template, 5, 4, \"li\", 2);\n    i0.ɵɵtemplate(2, NzMentionComponent_ng_template_1_li_2_Template, 3, 2, \"li\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.filteredSuggestions);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.filteredSuggestions.length === 0);\n  }\n}\n\nconst _c2 = [\"*\"];\nlet NzMentionSuggestionDirective = /*#__PURE__*/(() => {\n  class NzMentionSuggestionDirective {}\n\n  NzMentionSuggestionDirective.ɵfac = function NzMentionSuggestionDirective_Factory(t) {\n    return new (t || NzMentionSuggestionDirective)();\n  };\n\n  NzMentionSuggestionDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NzMentionSuggestionDirective,\n    selectors: [[\"\", \"nzMentionSuggestion\", \"\"]],\n    exportAs: [\"nzMentionSuggestion\"]\n  });\n  return NzMentionSuggestionDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nconst NZ_MENTION_CONFIG = {\n  split: ' '\n};\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nlet NzMentionService = /*#__PURE__*/(() => {\n  class NzMentionService {\n    constructor() {\n      this.triggerChange$ = new Subject();\n    }\n\n    triggerChanged() {\n      return this.triggerChange$.asObservable();\n    }\n\n    registerTrigger(trigger) {\n      if (this.trigger !== trigger) {\n        this.trigger = trigger;\n        this.triggerChange$.next(trigger);\n      }\n    }\n\n    ngOnDestroy() {\n      this.triggerChange$.complete();\n    }\n\n  }\n\n  NzMentionService.ɵfac = function NzMentionService_Factory(t) {\n    return new (t || NzMentionService)();\n  };\n\n  NzMentionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NzMentionService,\n    factory: NzMentionService.ɵfac\n  });\n  return NzMentionService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nconst NZ_MENTION_TRIGGER_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NzMentionTriggerDirective),\n  multi: true\n};\nlet NzMentionTriggerDirective = /*#__PURE__*/(() => {\n  class NzMentionTriggerDirective {\n    constructor(el, nzMentionService) {\n      this.el = el;\n      this.nzMentionService = nzMentionService;\n\n      this.onChange = () => {};\n\n      this.onTouched = () => {};\n\n      this.onFocusin = new EventEmitter();\n      this.onBlur = new EventEmitter();\n      this.onInput = new EventEmitter();\n      this.onKeydown = new EventEmitter();\n      this.onClick = new EventEmitter();\n    }\n\n    completeEvents() {\n      this.onFocusin.complete();\n      this.onBlur.complete();\n      this.onInput.complete();\n      this.onKeydown.complete();\n      this.onClick.complete();\n    }\n\n    focus(caretPos) {\n      this.el.nativeElement.focus();\n      this.el.nativeElement.setSelectionRange(caretPos, caretPos);\n    }\n\n    insertMention(mention) {\n      const value = this.el.nativeElement.value;\n      const insertValue = `${mention.mention}${NZ_MENTION_CONFIG.split}`;\n      const newValue = [value.slice(0, mention.startPos + 1), insertValue, value.slice(mention.endPos, value.length)].join('');\n      this.el.nativeElement.value = newValue;\n      this.focus(mention.startPos + insertValue.length + 1);\n      this.onChange(newValue);\n      this.value = newValue;\n    }\n\n    writeValue(value) {\n      this.value = value;\n\n      if (typeof value === 'string') {\n        this.el.nativeElement.value = value;\n      } else {\n        this.el.nativeElement.value = '';\n      }\n    }\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    ngAfterViewInit() {\n      this.nzMentionService.registerTrigger(this);\n    }\n\n    ngOnDestroy() {\n      this.completeEvents();\n    }\n\n  }\n\n  NzMentionTriggerDirective.ɵfac = function NzMentionTriggerDirective_Factory(t) {\n    return new (t || NzMentionTriggerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NzMentionService));\n  };\n\n  NzMentionTriggerDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NzMentionTriggerDirective,\n    selectors: [[\"input\", \"nzMentionTrigger\", \"\"], [\"textarea\", \"nzMentionTrigger\", \"\"]],\n    hostAttrs: [\"autocomplete\", \"off\"],\n    hostBindings: function NzMentionTriggerDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focusin\", function NzMentionTriggerDirective_focusin_HostBindingHandler() {\n          return ctx.onFocusin.emit();\n        })(\"blur\", function NzMentionTriggerDirective_blur_HostBindingHandler() {\n          return ctx.onBlur.emit();\n        })(\"input\", function NzMentionTriggerDirective_input_HostBindingHandler($event) {\n          return ctx.onInput.emit($event);\n        })(\"keydown\", function NzMentionTriggerDirective_keydown_HostBindingHandler($event) {\n          return ctx.onKeydown.emit($event);\n        })(\"click\", function NzMentionTriggerDirective_click_HostBindingHandler($event) {\n          return ctx.onClick.emit($event);\n        });\n      }\n    },\n    exportAs: [\"nzMentionTrigger\"],\n    features: [i0.ɵɵProvidersFeature([NZ_MENTION_TRIGGER_ACCESSOR])]\n  });\n  return NzMentionTriggerDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NzMentionComponent = /*#__PURE__*/(() => {\n  class NzMentionComponent {\n    constructor(ngZone, ngDocument, cdr, overlay, viewContainerRef, nzMentionService) {\n      this.ngZone = ngZone;\n      this.ngDocument = ngDocument;\n      this.cdr = cdr;\n      this.overlay = overlay;\n      this.viewContainerRef = viewContainerRef;\n      this.nzMentionService = nzMentionService;\n\n      this.nzValueWith = value => value;\n\n      this.nzPrefix = '@';\n      this.nzLoading = false;\n      this.nzNotFoundContent = '无匹配结果，轻敲空格完成输入';\n      this.nzPlacement = 'bottom';\n      this.nzSuggestions = [];\n      this.nzOnSelect = new EventEmitter();\n      this.nzOnSearchChange = new EventEmitter();\n      this.isOpen = false;\n      this.filteredSuggestions = [];\n      this.suggestionTemplate = null;\n      this.activeIndex = -1;\n      this.previousValue = null;\n      this.cursorMention = null;\n      this.overlayRef = null;\n    }\n\n    set suggestionChild(value) {\n      if (value) {\n        this.suggestionTemplate = value;\n      }\n    }\n\n    get triggerNativeElement() {\n      return this.trigger.el.nativeElement;\n    }\n\n    get focusItemElement() {\n      var _a;\n\n      const itemArr = (_a = this.items) === null || _a === void 0 ? void 0 : _a.toArray();\n\n      if (itemArr && itemArr[this.activeIndex]) {\n        return itemArr[this.activeIndex].nativeElement;\n      }\n\n      return null;\n    }\n\n    ngOnInit() {\n      this.nzMentionService.triggerChanged().subscribe(trigger => {\n        this.trigger = trigger;\n        this.bindTriggerEvents();\n        this.closeDropdown();\n        this.overlayRef = null;\n      });\n    }\n\n    ngOnChanges(changes) {\n      if (changes.hasOwnProperty('nzSuggestions')) {\n        if (this.isOpen) {\n          this.previousValue = null;\n          this.activeIndex = -1;\n          this.resetDropdown(false);\n        }\n      }\n    }\n\n    ngAfterViewInit() {\n      this.items.changes.pipe(startWith(this.items), switchMap(() => {\n        const items = this.items.toArray(); // Caretaker note: we explicitly should call `subscribe()` within the root zone.\n        // `runOutsideAngular(() => fromEvent(...))` will just create an observable within the root zone,\n        // but `addEventListener` is called when the `fromEvent` is subscribed.\n\n        return new Observable(subscriber => this.ngZone.runOutsideAngular(() => merge(...items.map(item => fromEvent(item.nativeElement, 'mousedown'))).subscribe(subscriber)));\n      })).subscribe(event => {\n        event.preventDefault();\n      });\n    }\n\n    ngOnDestroy() {\n      this.closeDropdown();\n    }\n\n    closeDropdown() {\n      if (this.overlayRef && this.overlayRef.hasAttached()) {\n        this.overlayRef.detach();\n        this.overlayOutsideClickSubscription.unsubscribe();\n        this.isOpen = false;\n        this.cdr.markForCheck();\n      }\n    }\n\n    openDropdown() {\n      this.attachOverlay();\n      this.isOpen = true;\n      this.cdr.markForCheck();\n    }\n\n    getMentions() {\n      return this.trigger ? getMentions(this.trigger.value, this.nzPrefix) : [];\n    }\n\n    selectSuggestion(suggestion) {\n      const value = this.nzValueWith(suggestion);\n      this.trigger.insertMention({\n        mention: value,\n        startPos: this.cursorMentionStart,\n        endPos: this.cursorMentionEnd\n      });\n      this.nzOnSelect.emit(suggestion);\n      this.closeDropdown();\n      this.activeIndex = -1;\n    }\n\n    handleInput(event) {\n      const target = event.target;\n      this.trigger.onChange(target.value);\n      this.trigger.value = target.value;\n      this.resetDropdown();\n    }\n\n    handleKeydown(event) {\n      const keyCode = event.keyCode;\n\n      if (this.isOpen && keyCode === ENTER && this.activeIndex !== -1 && this.filteredSuggestions.length) {\n        this.selectSuggestion(this.filteredSuggestions[this.activeIndex]);\n        event.preventDefault();\n      } else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {\n        this.resetDropdown();\n        event.stopPropagation();\n      } else {\n        if (this.isOpen && (keyCode === TAB || keyCode === ESCAPE)) {\n          this.closeDropdown();\n          return;\n        }\n\n        if (this.isOpen && keyCode === UP_ARROW) {\n          this.setPreviousItemActive();\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        if (this.isOpen && keyCode === DOWN_ARROW) {\n          this.setNextItemActive();\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n    }\n\n    handleClick() {\n      this.resetDropdown();\n    }\n\n    bindTriggerEvents() {\n      this.trigger.onInput.subscribe(e => this.handleInput(e));\n      this.trigger.onKeydown.subscribe(e => this.handleKeydown(e));\n      this.trigger.onClick.subscribe(() => this.handleClick());\n    }\n\n    suggestionsFilter(value, emit) {\n      const suggestions = value.substring(1);\n      /**\n       * Should always emit (nzOnSearchChange) when value empty\n       *\n       * @[something]... @[empty]... @[empty]\n       *     ^             ^           ^\n       * preValue        preValue  (should emit)\n       */\n\n      if (this.previousValue === value && value !== this.cursorMention[0]) {\n        return;\n      }\n\n      this.previousValue = value;\n\n      if (emit) {\n        this.nzOnSearchChange.emit({\n          value: this.cursorMention.substring(1),\n          prefix: this.cursorMention[0]\n        });\n      }\n\n      const searchValue = suggestions.toLowerCase();\n      this.filteredSuggestions = this.nzSuggestions.filter(suggestion => this.nzValueWith(suggestion).toLowerCase().includes(searchValue));\n    }\n\n    resetDropdown(emit = true) {\n      this.resetCursorMention();\n\n      if (typeof this.cursorMention !== 'string' || !this.canOpen()) {\n        this.closeDropdown();\n        return;\n      }\n\n      this.suggestionsFilter(this.cursorMention, emit);\n      const activeIndex = this.filteredSuggestions.indexOf(this.cursorMention.substring(1));\n      this.activeIndex = activeIndex >= 0 ? activeIndex : 0;\n      this.openDropdown();\n    }\n\n    setNextItemActive() {\n      this.activeIndex = this.activeIndex + 1 <= this.filteredSuggestions.length - 1 ? this.activeIndex + 1 : 0;\n      this.cdr.markForCheck();\n      this.scrollToFocusItem();\n    }\n\n    setPreviousItemActive() {\n      this.activeIndex = this.activeIndex - 1 < 0 ? this.filteredSuggestions.length - 1 : this.activeIndex - 1;\n      this.cdr.markForCheck();\n      this.scrollToFocusItem();\n    }\n\n    scrollToFocusItem() {\n      if (this.focusItemElement) {\n        this.focusItemElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center',\n          inline: 'nearest'\n        });\n      }\n    }\n\n    canOpen() {\n      const element = this.triggerNativeElement;\n      return !element.readOnly && !element.disabled;\n    }\n\n    resetCursorMention() {\n      const value = this.triggerNativeElement.value.replace(/[\\r\\n]/g, NZ_MENTION_CONFIG.split) || '';\n      const selectionStart = this.triggerNativeElement.selectionStart;\n      const prefix = typeof this.nzPrefix === 'string' ? [this.nzPrefix] : this.nzPrefix;\n      let i = prefix.length;\n\n      while (i >= 0) {\n        const startPos = value.lastIndexOf(prefix[i], selectionStart);\n        const endPos = value.indexOf(NZ_MENTION_CONFIG.split, selectionStart) > -1 ? value.indexOf(NZ_MENTION_CONFIG.split, selectionStart) : value.length;\n        const mention = value.substring(startPos, endPos);\n\n        if (startPos > 0 && value[startPos - 1] !== NZ_MENTION_CONFIG.split || startPos < 0 || mention.includes(prefix[i], 1) || mention.includes(NZ_MENTION_CONFIG.split)) {\n          this.cursorMention = null;\n          this.cursorMentionStart = -1;\n          this.cursorMentionEnd = -1;\n        } else {\n          this.cursorMention = mention;\n          this.cursorMentionStart = startPos;\n          this.cursorMentionEnd = endPos;\n          return;\n        }\n\n        i--;\n      }\n    }\n\n    updatePositions() {\n      const coordinates = getCaretCoordinates(this.triggerNativeElement, this.cursorMentionStart);\n      const top = coordinates.top - this.triggerNativeElement.getBoundingClientRect().height - this.triggerNativeElement.scrollTop + (this.nzPlacement === 'bottom' ? coordinates.height - 6 : -6);\n      const left = coordinates.left - this.triggerNativeElement.scrollLeft;\n      this.positionStrategy.withDefaultOffsetX(left).withDefaultOffsetY(top);\n\n      if (this.nzPlacement === 'bottom') {\n        this.positionStrategy.withPositions([...DEFAULT_MENTION_BOTTOM_POSITIONS]);\n      }\n\n      if (this.nzPlacement === 'top') {\n        this.positionStrategy.withPositions([...DEFAULT_MENTION_TOP_POSITIONS]);\n      }\n\n      this.positionStrategy.apply();\n    }\n\n    subscribeOverlayOutsideClick() {\n      return merge(this.overlayRef.outsidePointerEvents(), fromEvent(this.ngDocument, 'touchend')).subscribe(event => {\n        var _a;\n\n        const clickTarget = event.target;\n\n        if (this.isOpen && clickTarget !== this.trigger.el.nativeElement && !((_a = this.overlayRef) === null || _a === void 0 ? void 0 : _a.overlayElement.contains(clickTarget))) {\n          this.closeDropdown();\n        }\n      });\n    }\n\n    attachOverlay() {\n      if (!this.overlayRef) {\n        this.portal = new TemplatePortal(this.suggestionsTemp, this.viewContainerRef);\n        this.overlayRef = this.overlay.create(this.getOverlayConfig());\n      }\n\n      if (this.overlayRef && !this.overlayRef.hasAttached()) {\n        this.overlayRef.attach(this.portal);\n        this.overlayOutsideClickSubscription = this.subscribeOverlayOutsideClick();\n      }\n\n      this.updatePositions();\n    }\n\n    getOverlayConfig() {\n      return new OverlayConfig({\n        positionStrategy: this.getOverlayPosition(),\n        scrollStrategy: this.overlay.scrollStrategies.reposition(),\n        disposeOnNavigation: true\n      });\n    }\n\n    getOverlayPosition() {\n      const positions = [new ConnectionPositionPair({\n        originX: 'start',\n        originY: 'bottom'\n      }, {\n        overlayX: 'start',\n        overlayY: 'top'\n      }), new ConnectionPositionPair({\n        originX: 'start',\n        originY: 'top'\n      }, {\n        overlayX: 'start',\n        overlayY: 'bottom'\n      })];\n      this.positionStrategy = this.overlay.position().flexibleConnectedTo(this.trigger.el).withPositions(positions).withFlexibleDimensions(false).withPush(false);\n      return this.positionStrategy;\n    }\n\n  }\n\n  NzMentionComponent.ɵfac = function NzMentionComponent_Factory(t) {\n    return new (t || NzMentionComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.Overlay), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(NzMentionService));\n  };\n\n  NzMentionComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzMentionComponent,\n    selectors: [[\"nz-mention\"]],\n    contentQueries: function NzMentionComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, NzMentionSuggestionDirective, 5, TemplateRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.suggestionChild = _t.first);\n      }\n    },\n    viewQuery: function NzMentionComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TemplateRef, 5);\n        i0.ɵɵviewQuery(_c0, 5, ElementRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.suggestionsTemp = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    inputs: {\n      nzValueWith: \"nzValueWith\",\n      nzPrefix: \"nzPrefix\",\n      nzLoading: \"nzLoading\",\n      nzNotFoundContent: \"nzNotFoundContent\",\n      nzPlacement: \"nzPlacement\",\n      nzSuggestions: \"nzSuggestions\"\n    },\n    outputs: {\n      nzOnSelect: \"nzOnSelect\",\n      nzOnSearchChange: \"nzOnSearchChange\"\n    },\n    exportAs: [\"nzMention\"],\n    features: [i0.ɵɵProvidersFeature([NzMentionService]), i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c2,\n    decls: 3,\n    vars: 0,\n    consts: [[\"suggestions\", \"\"], [1, \"ant-mention-dropdown\"], [\"class\", \"ant-mention-dropdown-item\", 3, \"focus\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"ant-mention-dropdown-notfound ant-mention-dropdown-item\", 4, \"ngIf\"], [1, \"ant-mention-dropdown-item\", 3, \"click\"], [\"items\", \"\"], [4, \"ngIf\", \"ngIfElse\"], [\"defaultSuggestion\", \"\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"ant-mention-dropdown-notfound\", \"ant-mention-dropdown-item\"], [4, \"ngIf\"], [\"nz-icon\", \"\", \"nzType\", \"loading\"]],\n    template: function NzMentionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n        i0.ɵɵtemplate(1, NzMentionComponent_ng_template_1_Template, 3, 2, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      }\n    },\n    directives: [i3.NgForOf, i3.NgIf, i3.NgTemplateOutlet, i4.NzIconDirective],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean()], NzMentionComponent.prototype, \"nzLoading\", void 0);\n\n  return NzMentionComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nconst COMPONENTS = [NzMentionComponent, NzMentionTriggerDirective, NzMentionSuggestionDirective];\nlet NzMentionModule = /*#__PURE__*/(() => {\n  class NzMentionModule {}\n\n  NzMentionModule.ɵfac = function NzMentionModule_Factory(t) {\n    return new (t || NzMentionModule)();\n  };\n\n  NzMentionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NzMentionModule\n  });\n  NzMentionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[BidiModule, CommonModule, FormsModule, OverlayModule, NzIconModule]]\n  });\n  return NzMentionModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NZ_MENTION_TRIGGER_ACCESSOR, NzMentionComponent, NzMentionModule, NzMentionService, NzMentionSuggestionDirective, NzMentionTriggerDirective }; //# sourceMappingURL=ng-zorro-antd-mention.mjs.map","map":null,"metadata":{},"sourceType":"module"}